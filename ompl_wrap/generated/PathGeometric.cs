//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PathGeometric : Path {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PathGeometric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_wrapPINVOKE.PathGeometric_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PathGeometric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_PathGeometric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public PathGeometric(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t si) : this(ompl_wrapPINVOKE.new_PathGeometric__SWIG_0(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t.getCPtr(si)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathGeometric(PathGeometric path) : this(ompl_wrapPINVOKE.new_PathGeometric__SWIG_1(PathGeometric.getCPtr(path)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathGeometric(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t si, State state) : this(ompl_wrapPINVOKE.new_PathGeometric__SWIG_2(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t.getCPtr(si), State.getCPtr(state)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathGeometric(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t si, State state1, State state2) : this(ompl_wrapPINVOKE.new_PathGeometric__SWIG_3(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t.getCPtr(si), State.getCPtr(state1), State.getCPtr(state2)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Cost cost(SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t obj) {
    Cost ret = new Cost(ompl_wrapPINVOKE.PathGeometric_cost(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t.getCPtr(obj)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double length() {
    double ret = ompl_wrapPINVOKE.PathGeometric_length(swigCPtr);
    return ret;
  }

  public override bool check() {
    bool ret = ompl_wrapPINVOKE.PathGeometric_check(swigCPtr);
    return ret;
  }

  public double smoothness() {
    double ret = ompl_wrapPINVOKE.PathGeometric_smoothness(swigCPtr);
    return ret;
  }

  public double clearance() {
    double ret = ompl_wrapPINVOKE.PathGeometric_clearance(swigCPtr);
    return ret;
  }

  public override void print(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.PathGeometric_print(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printAsMatrix(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.PathGeometric_printAsMatrix(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void interpolate(uint count) {
    ompl_wrapPINVOKE.PathGeometric_interpolate__SWIG_0(swigCPtr, count);
  }

  public void interpolate() {
    ompl_wrapPINVOKE.PathGeometric_interpolate__SWIG_1(swigCPtr);
  }

  public void subdivide() {
    ompl_wrapPINVOKE.PathGeometric_subdivide(swigCPtr);
  }

  public void reverse() {
    ompl_wrapPINVOKE.PathGeometric_reverse(swigCPtr);
  }

  public SWIGTYPE_p_std__pairT_bool_bool_t checkAndRepair(uint attempts) {
    SWIGTYPE_p_std__pairT_bool_bool_t ret = new SWIGTYPE_p_std__pairT_bool_bool_t(ompl_wrapPINVOKE.PathGeometric_checkAndRepair(swigCPtr, attempts), true);
    return ret;
  }

  public void overlay(PathGeometric over, uint startIndex) {
    ompl_wrapPINVOKE.PathGeometric_overlay__SWIG_0(swigCPtr, PathGeometric.getCPtr(over), startIndex);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void overlay(PathGeometric over) {
    ompl_wrapPINVOKE.PathGeometric_overlay__SWIG_1(swigCPtr, PathGeometric.getCPtr(over));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void append(State state) {
    ompl_wrapPINVOKE.PathGeometric_append__SWIG_0(swigCPtr, State.getCPtr(state));
  }

  public void append(PathGeometric path) {
    ompl_wrapPINVOKE.PathGeometric_append__SWIG_1(swigCPtr, PathGeometric.getCPtr(path));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void prepend(State state) {
    ompl_wrapPINVOKE.PathGeometric_prepend(swigCPtr, State.getCPtr(state));
  }

  public void keepAfter(State state) {
    ompl_wrapPINVOKE.PathGeometric_keepAfter(swigCPtr, State.getCPtr(state));
  }

  public void keepBefore(State state) {
    ompl_wrapPINVOKE.PathGeometric_keepBefore(swigCPtr, State.getCPtr(state));
  }

  public void random() {
    ompl_wrapPINVOKE.PathGeometric_random(swigCPtr);
  }

  public bool randomValid(uint attempts) {
    bool ret = ompl_wrapPINVOKE.PathGeometric_randomValid(swigCPtr, attempts);
    return ret;
  }

  public int getClosestIndex(State state) {
    int ret = ompl_wrapPINVOKE.PathGeometric_getClosestIndex(swigCPtr, State.getCPtr(state));
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ompl__base__State_p_t getStates() {
    SWIGTYPE_p_std__vectorT_ompl__base__State_p_t ret = new SWIGTYPE_p_std__vectorT_ompl__base__State_p_t(ompl_wrapPINVOKE.PathGeometric_getStates(swigCPtr), false);
    return ret;
  }

  public State getState(uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.PathGeometric_getState__SWIG_0(swigCPtr, index);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__size_t getStateCount() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(ompl_wrapPINVOKE.PathGeometric_getStateCount(swigCPtr), true);
    return ret;
  }

  public void clear() {
    ompl_wrapPINVOKE.PathGeometric_clear(swigCPtr);
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PathControl : Path {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PathControl(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_wrapPINVOKE.PathControl_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PathControl obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_PathControl(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public PathControl(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t si) : this(ompl_wrapPINVOKE.new_PathControl__SWIG_0(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t.getCPtr(si)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathControl(PathControl path) : this(ompl_wrapPINVOKE.new_PathControl__SWIG_1(PathControl.getCPtr(path)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override Cost cost(SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t opt) {
    Cost ret = new Cost(ompl_wrapPINVOKE.PathControl_cost(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t.getCPtr(opt)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double length() {
    double ret = ompl_wrapPINVOKE.PathControl_length(swigCPtr);
    return ret;
  }

  public override bool check() {
    bool ret = ompl_wrapPINVOKE.PathControl_check(swigCPtr);
    return ret;
  }

  public override void print(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.PathControl_print(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printAsMatrix(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.PathControl_printAsMatrix(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PathGeometric asGeometric() {
    PathGeometric ret = new PathGeometric(ompl_wrapPINVOKE.PathControl_asGeometric(swigCPtr), true);
    return ret;
  }

  public void append(State state) {
    ompl_wrapPINVOKE.PathControl_append__SWIG_0(swigCPtr, State.getCPtr(state));
  }

  public void append(State state, Control control, double duration) {
    ompl_wrapPINVOKE.PathControl_append__SWIG_1(swigCPtr, State.getCPtr(state), Control.getCPtr(control), duration);
  }

  public void interpolate() {
    ompl_wrapPINVOKE.PathControl_interpolate(swigCPtr);
  }

  public void random() {
    ompl_wrapPINVOKE.PathControl_random(swigCPtr);
  }

  public bool randomValid(uint attempts) {
    bool ret = ompl_wrapPINVOKE.PathControl_randomValid(swigCPtr, attempts);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ompl__base__State_p_t getStates() {
    SWIGTYPE_p_std__vectorT_ompl__base__State_p_t ret = new SWIGTYPE_p_std__vectorT_ompl__base__State_p_t(ompl_wrapPINVOKE.PathControl_getStates(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ompl__control__Control_p_t getControls() {
    SWIGTYPE_p_std__vectorT_ompl__control__Control_p_t ret = new SWIGTYPE_p_std__vectorT_ompl__control__Control_p_t(ompl_wrapPINVOKE.PathControl_getControls(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_double_t getControlDurations() {
    SWIGTYPE_p_std__vectorT_double_t ret = new SWIGTYPE_p_std__vectorT_double_t(ompl_wrapPINVOKE.PathControl_getControlDurations(swigCPtr), false);
    return ret;
  }

  public State getState(uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.PathControl_getState__SWIG_0(swigCPtr, index);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public Control getControl(uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.PathControl_getControl__SWIG_0(swigCPtr, index);
    Control ret = (cPtr == global::System.IntPtr.Zero) ? null : new Control(cPtr, false);
    return ret;
  }

  public double getControlDuration(uint index) {
    double ret = ompl_wrapPINVOKE.PathControl_getControlDuration(swigCPtr, index);
    return ret;
  }

  public SWIGTYPE_p_std__size_t getStateCount() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(ompl_wrapPINVOKE.PathControl_getStateCount(swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_std__size_t getControlCount() {
    SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(ompl_wrapPINVOKE.PathControl_getControlCount(swigCPtr), true);
    return ret;
  }

}

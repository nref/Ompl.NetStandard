//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Geometric {

using Ompl.Base;

public class SimpleSetup : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal SimpleSetup(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SimpleSetup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SimpleSetup() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ompl_geometricPINVOKE.delete_SimpleSetup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SimpleSetup(SpaceInformation si) : this(ompl_geometricPINVOKE.new_SimpleSetup__SWIG_0(SpaceInformation.getCPtr(si)), true) {
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public SimpleSetup(StateSpace space) : this(ompl_geometricPINVOKE.new_SimpleSetup__SWIG_1(StateSpace.getCPtr(space)), true) {
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public SpaceInformation getSpaceInformation() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getSpaceInformation(swigCPtr);
    SpaceInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpaceInformation(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ProblemDefinition getProblemDefinition() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getProblemDefinition__SWIG_0(swigCPtr);
    ProblemDefinition ret = (cPtr == global::System.IntPtr.Zero) ? null : new ProblemDefinition(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateSpace getStateSpace() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getStateSpace(swigCPtr);
    StateSpace ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateSpace(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t getStateValidityChecker() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t(ompl_geometricPINVOKE.SimpleSetup_getStateValidityChecker(swigCPtr), false);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Goal getGoal() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getGoal(swigCPtr);
    Goal ret = (cPtr == global::System.IntPtr.Zero) ? null : new Goal(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Planner getPlanner() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getPlanner(swigCPtr);
    Planner ret = (cPtr == global::System.IntPtr.Zero) ? null : new Planner(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__Planner_t_fompl__base__SpaceInformationPtr_const_RF_t getPlannerAllocator() {
    SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__Planner_t_fompl__base__SpaceInformationPtr_const_RF_t ret = new SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__Planner_t_fompl__base__SpaceInformationPtr_const_RF_t(ompl_geometricPINVOKE.SimpleSetup_getPlannerAllocator(swigCPtr), false);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PathSimplifier getPathSimplifier() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getPathSimplifier__SWIG_0(swigCPtr);
    PathSimplifier ret = (cPtr == global::System.IntPtr.Zero) ? null : new PathSimplifier(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OptimizationObjective getOptimizationObjective() {
    global::System.IntPtr cPtr = ompl_geometricPINVOKE.SimpleSetup_getOptimizationObjective(swigCPtr);
    OptimizationObjective ret = (cPtr == global::System.IntPtr.Zero) ? null : new OptimizationObjective(cPtr, true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool haveExactSolutionPath() {
    bool ret = ompl_geometricPINVOKE.SimpleSetup_haveExactSolutionPath(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool haveSolutionPath() {
    bool ret = ompl_geometricPINVOKE.SimpleSetup_haveSolutionPath(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string getSolutionPlannerName() {
    string ret = ompl_geometricPINVOKE.SimpleSetup_getSolutionPlannerName(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PathGeometric getSolutionPath() {
    PathGeometric ret = new PathGeometric(ompl_geometricPINVOKE.SimpleSetup_getSolutionPath(swigCPtr), true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getPlannerData(PlannerData pd) {
    ompl_geometricPINVOKE.SimpleSetup_getPlannerData(swigCPtr, PlannerData.getCPtr(pd));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t svc) {
    ompl_geometricPINVOKE.SimpleSetup_setStateValidityChecker__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t.getCPtr(svc));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_std__functionT_bool_fompl__base__State_const_pF_t svc) {
    ompl_geometricPINVOKE.SimpleSetup_setStateValidityChecker__SWIG_1(swigCPtr, SWIGTYPE_p_std__functionT_bool_fompl__base__State_const_pF_t.getCPtr(svc));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOptimizationObjective(OptimizationObjective optimizationObjective) {
    ompl_geometricPINVOKE.SimpleSetup_setOptimizationObjective(swigCPtr, OptimizationObjective.getCPtr(optimizationObjective));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t start, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal, double threshold) {
    ompl_geometricPINVOKE.SimpleSetup_setStartAndGoalStates__SWIG_0(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal), threshold);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t start, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal) {
    ompl_geometricPINVOKE.SimpleSetup_setStartAndGoalStates__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addStartState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t state) {
    ompl_geometricPINVOKE.SimpleSetup_addStartState(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(state));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearStartStates() {
    ompl_geometricPINVOKE.SimpleSetup_clearStartStates(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t state) {
    ompl_geometricPINVOKE.SimpleSetup_setStartState(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(state));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal, double threshold) {
    ompl_geometricPINVOKE.SimpleSetup_setGoalState__SWIG_0(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal), threshold);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal) {
    ompl_geometricPINVOKE.SimpleSetup_setGoalState__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoal(Goal goal) {
    ompl_geometricPINVOKE.SimpleSetup_setGoal(swigCPtr, Goal.getCPtr(goal));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPlanner(Planner planner) {
    ompl_geometricPINVOKE.SimpleSetup_setPlanner(swigCPtr, Planner.getCPtr(planner));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPlannerAllocator(SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__Planner_t_fompl__base__SpaceInformationPtr_const_RF_t pa) {
    ompl_geometricPINVOKE.SimpleSetup_setPlannerAllocator(swigCPtr, SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__Planner_t_fompl__base__SpaceInformationPtr_const_RF_t.getCPtr(pa));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual PlannerStatus solve(double time) {
    PlannerStatus ret = new PlannerStatus(ompl_geometricPINVOKE.SimpleSetup_solve__SWIG_0(swigCPtr, time), true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PlannerStatus solve() {
    PlannerStatus ret = new PlannerStatus(ompl_geometricPINVOKE.SimpleSetup_solve__SWIG_1(swigCPtr), true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual PlannerStatus solve(PlannerTerminationCondition ptc) {
    PlannerStatus ret = new PlannerStatus(ompl_geometricPINVOKE.SimpleSetup_solve__SWIG_2(swigCPtr, PlannerTerminationCondition.getCPtr(ptc)), true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public PlannerStatus getLastPlannerStatus() {
    PlannerStatus ret = new PlannerStatus(ompl_geometricPINVOKE.SimpleSetup_getLastPlannerStatus(swigCPtr), true);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getLastPlanComputationTime() {
    double ret = ompl_geometricPINVOKE.SimpleSetup_getLastPlanComputationTime(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getLastSimplificationTime() {
    double ret = ompl_geometricPINVOKE.SimpleSetup_getLastSimplificationTime(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void simplifySolution(double duration) {
    ompl_geometricPINVOKE.SimpleSetup_simplifySolution__SWIG_0(swigCPtr, duration);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void simplifySolution() {
    ompl_geometricPINVOKE.SimpleSetup_simplifySolution__SWIG_1(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public void simplifySolution(PlannerTerminationCondition ptc) {
    ompl_geometricPINVOKE.SimpleSetup_simplifySolution__SWIG_2(swigCPtr, PlannerTerminationCondition.getCPtr(ptc));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    ompl_geometricPINVOKE.SimpleSetup_clear(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _print(SWIGTYPE_p_std__ostream _out) {
    ompl_geometricPINVOKE.SimpleSetup__print__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(_out));
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void _print() {
    ompl_geometricPINVOKE.SimpleSetup__print__SWIG_1(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void setup() {
    ompl_geometricPINVOKE.SimpleSetup_setup(swigCPtr);
    if (ompl_geometricPINVOKE.SWIGPendingException.Pending) throw ompl_geometricPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

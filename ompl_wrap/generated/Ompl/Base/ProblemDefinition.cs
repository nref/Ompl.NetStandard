//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class ProblemDefinition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ProblemDefinition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ProblemDefinition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ProblemDefinition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ompl_basePINVOKE.delete_ProblemDefinition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ProblemDefinition(SpaceInformation si) : this(ompl_basePINVOKE.new_ProblemDefinition(SpaceInformation.getCPtr(si)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SpaceInformation getSpaceInformation() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_getSpaceInformation(swigCPtr);
    SpaceInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new SpaceInformation(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addStartState(State state) {
    ompl_basePINVOKE.ProblemDefinition_addStartState__SWIG_0(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addStartState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t state) {
    ompl_basePINVOKE.ProblemDefinition_addStartState__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasStartState(State state, SWIGTYPE_p_unsigned_int startIndex) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasStartState__SWIG_0(swigCPtr, State.getCPtr(state), SWIGTYPE_p_unsigned_int.getCPtr(startIndex));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasStartState(State state) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasStartState__SWIG_1(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearStartStates() {
    ompl_basePINVOKE.ProblemDefinition_clearStartStates(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getStartStateCount() {
    uint ret = ompl_basePINVOKE.ProblemDefinition_getStartStateCount(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public State getStartState(uint index) {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_getStartState__SWIG_0(swigCPtr, index);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setGoal(Goal goal) {
    ompl_basePINVOKE.ProblemDefinition_setGoal(swigCPtr, Goal.getCPtr(goal));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearGoal() {
    ompl_basePINVOKE.ProblemDefinition_clearGoal(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public Goal getGoal() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_getGoal(swigCPtr);
    Goal ret = (cPtr == global::System.IntPtr.Zero) ? null : new Goal(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void getInputStates(SWIGTYPE_p_std__vectorT_ompl__base__State_const_p_t states) {
    ompl_basePINVOKE.ProblemDefinition_getInputStates(swigCPtr, SWIGTYPE_p_std__vectorT_ompl__base__State_const_p_t.getCPtr(states));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(State start, State goal, double threshold) {
    ompl_basePINVOKE.ProblemDefinition_setStartAndGoalStates__SWIG_0(swigCPtr, State.getCPtr(start), State.getCPtr(goal), threshold);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(State start, State goal) {
    ompl_basePINVOKE.ProblemDefinition_setStartAndGoalStates__SWIG_1(swigCPtr, State.getCPtr(start), State.getCPtr(goal));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(State goal, double threshold) {
    ompl_basePINVOKE.ProblemDefinition_setGoalState__SWIG_0(swigCPtr, State.getCPtr(goal), threshold);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(State goal) {
    ompl_basePINVOKE.ProblemDefinition_setGoalState__SWIG_1(swigCPtr, State.getCPtr(goal));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t start, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal, double threshold) {
    ompl_basePINVOKE.ProblemDefinition_setStartAndGoalStates__SWIG_2(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal), threshold);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t start, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal) {
    ompl_basePINVOKE.ProblemDefinition_setStartAndGoalStates__SWIG_3(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal, double threshold) {
    ompl_basePINVOKE.ProblemDefinition_setGoalState__SWIG_2(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal), threshold);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t goal) {
    ompl_basePINVOKE.ProblemDefinition_setGoalState__SWIG_3(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_ompl__base__StateSpace_t.getCPtr(goal));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasOptimizationObjective() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasOptimizationObjective(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OptimizationObjective getOptimizationObjective() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_getOptimizationObjective(swigCPtr);
    OptimizationObjective ret = (cPtr == global::System.IntPtr.Zero) ? null : new OptimizationObjective(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setOptimizationObjective(OptimizationObjective optimizationObjective) {
    ompl_basePINVOKE.ProblemDefinition_setOptimizationObjective(swigCPtr, OptimizationObjective.getCPtr(optimizationObjective));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__functionT_void_fompl__base__Planner_const_p_std__vectorT_ompl__base__State_const_p_t_const_R_ompl__base__Cost_constF_t getIntermediateSolutionCallback() {
    SWIGTYPE_p_std__functionT_void_fompl__base__Planner_const_p_std__vectorT_ompl__base__State_const_p_t_const_R_ompl__base__Cost_constF_t ret = new SWIGTYPE_p_std__functionT_void_fompl__base__Planner_const_p_std__vectorT_ompl__base__State_const_p_t_const_R_ompl__base__Cost_constF_t(ompl_basePINVOKE.ProblemDefinition_getIntermediateSolutionCallback(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setIntermediateSolutionCallback(SWIGTYPE_p_std__functionT_void_fompl__base__Planner_const_p_std__vectorT_ompl__base__State_const_p_t_const_R_ompl__base__Cost_constF_t callback) {
    ompl_basePINVOKE.ProblemDefinition_setIntermediateSolutionCallback(swigCPtr, SWIGTYPE_p_std__functionT_void_fompl__base__Planner_const_p_std__vectorT_ompl__base__State_const_p_t_const_R_ompl__base__Cost_constF_t.getCPtr(callback));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isTrivial(SWIGTYPE_p_unsigned_int startIndex, SWIGTYPE_p_double distance) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_isTrivial__SWIG_0(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(startIndex), SWIGTYPE_p_double.getCPtr(distance));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTrivial(SWIGTYPE_p_unsigned_int startIndex) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_isTrivial__SWIG_1(swigCPtr, SWIGTYPE_p_unsigned_int.getCPtr(startIndex));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool isTrivial() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_isTrivial__SWIG_2(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Path isStraightLinePathValid() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_isStraightLinePathValid(swigCPtr);
    Path ret = (cPtr == global::System.IntPtr.Zero) ? null : new Path(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool fixInvalidInputStates(double distStart, double distGoal, uint attempts) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_fixInvalidInputStates(swigCPtr, distStart, distGoal, attempts);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSolution() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasSolution(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasExactSolution() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasExactSolution(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasApproximateSolution() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasApproximateSolution(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getSolutionDifference() {
    double ret = ompl_basePINVOKE.ProblemDefinition_getSolutionDifference(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasOptimizedSolution() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasOptimizedSolution(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Path getSolutionPath() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.ProblemDefinition_getSolutionPath(swigCPtr);
    Path ret = (cPtr == global::System.IntPtr.Zero) ? null : new Path(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool getSolution(PlannerSolution solution) {
    bool ret = ompl_basePINVOKE.ProblemDefinition_getSolution(swigCPtr, PlannerSolution.getCPtr(solution));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addSolutionPath(Path path, bool approximate, double difference, string plannerName) {
    ompl_basePINVOKE.ProblemDefinition_addSolutionPath__SWIG_0(swigCPtr, Path.getCPtr(path), approximate, difference, plannerName);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSolutionPath(Path path, bool approximate, double difference) {
    ompl_basePINVOKE.ProblemDefinition_addSolutionPath__SWIG_1(swigCPtr, Path.getCPtr(path), approximate, difference);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSolutionPath(Path path, bool approximate) {
    ompl_basePINVOKE.ProblemDefinition_addSolutionPath__SWIG_2(swigCPtr, Path.getCPtr(path), approximate);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSolutionPath(Path path) {
    ompl_basePINVOKE.ProblemDefinition_addSolutionPath__SWIG_3(swigCPtr, Path.getCPtr(path));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addSolutionPath(PlannerSolution sol) {
    ompl_basePINVOKE.ProblemDefinition_addSolutionPath__SWIG_4(swigCPtr, PlannerSolution.getCPtr(sol));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSolutionCount() {
    uint ret = ompl_basePINVOKE.ProblemDefinition_getSolutionCount(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ompl__base__PlannerSolution_t getSolutions() {
    SWIGTYPE_p_std__vectorT_ompl__base__PlannerSolution_t ret = new SWIGTYPE_p_std__vectorT_ompl__base__PlannerSolution_t(ompl_basePINVOKE.ProblemDefinition_getSolutions(swigCPtr), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearSolutionPaths() {
    ompl_basePINVOKE.ProblemDefinition_clearSolutionPaths(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool hasSolutionNonExistenceProof() {
    bool ret = ompl_basePINVOKE.ProblemDefinition_hasSolutionNonExistenceProof(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void clearSolutionNonExistenceProof() {
    ompl_basePINVOKE.ProblemDefinition_clearSolutionNonExistenceProof(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__SolutionNonExistenceProof_t getSolutionNonExistenceProof() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__SolutionNonExistenceProof_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__SolutionNonExistenceProof_t(ompl_basePINVOKE.ProblemDefinition_getSolutionNonExistenceProof(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSolutionNonExistenceProof(SWIGTYPE_p_std__shared_ptrT_ompl__base__SolutionNonExistenceProof_t nonExistenceProof) {
    ompl_basePINVOKE.ProblemDefinition_setSolutionNonExistenceProof(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__SolutionNonExistenceProof_t.getCPtr(nonExistenceProof));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _print(SWIGTYPE_p_std__ostream _out) {
    ompl_basePINVOKE.ProblemDefinition__print__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(_out));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void _print() {
    ompl_basePINVOKE.ProblemDefinition__print__SWIG_1(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

}

}

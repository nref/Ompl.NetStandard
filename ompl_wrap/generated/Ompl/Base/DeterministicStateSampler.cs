//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class DeterministicStateSampler : StateSampler {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal DeterministicStateSampler(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_basePINVOKE.DeterministicStateSampler_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeterministicStateSampler obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ompl_basePINVOKE.delete_DeterministicStateSampler(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public DeterministicStateSampler(StateSpace space, DeterministicStateSampler.DeterministicSamplerType type) : this(ompl_basePINVOKE.new_DeterministicStateSampler__SWIG_0(StateSpace.getCPtr(space), (int)type), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public DeterministicStateSampler(StateSpace space) : this(ompl_basePINVOKE.new_DeterministicStateSampler__SWIG_1(StateSpace.getCPtr(space)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public DeterministicStateSampler(StateSpace space, DeterministicSequence sequence_ptr) : this(ompl_basePINVOKE.new_DeterministicStateSampler__SWIG_2(StateSpace.getCPtr(space), DeterministicSequence.getCPtr(sequence_ptr)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void sampleUniform(State state) {
    ompl_basePINVOKE.DeterministicStateSampler_sampleUniform(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void sampleUniformNear(State arg0, State arg1, double arg2) {
    ompl_basePINVOKE.DeterministicStateSampler_sampleUniformNear(swigCPtr, State.getCPtr(arg0), State.getCPtr(arg1), arg2);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void sampleGaussian(State arg0, State arg1, double arg2) {
    ompl_basePINVOKE.DeterministicStateSampler_sampleGaussian(swigCPtr, State.getCPtr(arg0), State.getCPtr(arg1), arg2);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DeterministicSamplerType {
    HALTON
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class DiscreteMotionValidator : MotionValidator {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal DiscreteMotionValidator(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_basePINVOKE.DiscreteMotionValidator_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DiscreteMotionValidator obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ompl_basePINVOKE.delete_DiscreteMotionValidator(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public DiscreteMotionValidator(SpaceInformation si) : this(ompl_basePINVOKE.new_DiscreteMotionValidator__SWIG_0(SpaceInformation.getCPtr(si)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool checkMotion(State s1, State s2) {
    bool ret = ompl_basePINVOKE.DiscreteMotionValidator_checkMotion__SWIG_0(swigCPtr, State.getCPtr(s1), State.getCPtr(s2));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool checkMotion(State s1, State s2, SWIGTYPE_p_std__pairT_ompl__base__State_p_double_t lastValid) {
    bool ret = ompl_basePINVOKE.DiscreteMotionValidator_checkMotion__SWIG_1(swigCPtr, State.getCPtr(s1), State.getCPtr(s2), SWIGTYPE_p_std__pairT_ompl__base__State_p_double_t.getCPtr(lastValid));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

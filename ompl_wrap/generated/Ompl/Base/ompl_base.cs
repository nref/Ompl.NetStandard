//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class ompl_base {
  public static SWIGTYPE_p_double new_doubleArray(int nelements) {
    global::System.IntPtr cPtr = ompl_basePINVOKE.new_doubleArray(nelements);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public static void delete_doubleArray(SWIGTYPE_p_double ary) {
    ompl_basePINVOKE.delete_doubleArray(SWIGTYPE_p_double.getCPtr(ary));
  }

  public static double doubleArray_getitem(SWIGTYPE_p_double ary, int index) {
    double ret = ompl_basePINVOKE.doubleArray_getitem(SWIGTYPE_p_double.getCPtr(ary), index);
    return ret;
  }

  public static void doubleArray_setitem(SWIGTYPE_p_double ary, int index, double value) {
    ompl_basePINVOKE.doubleArray_setitem(SWIGTYPE_p_double.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_int new_intArray(int nelements) {
    global::System.IntPtr cPtr = ompl_basePINVOKE.new_intArray(nelements);
    SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
    return ret;
  }

  public static void delete_intArray(SWIGTYPE_p_int ary) {
    ompl_basePINVOKE.delete_intArray(SWIGTYPE_p_int.getCPtr(ary));
  }

  public static int intArray_getitem(SWIGTYPE_p_int ary, int index) {
    int ret = ompl_basePINVOKE.intArray_getitem(SWIGTYPE_p_int.getCPtr(ary), index);
    return ret;
  }

  public static void intArray_setitem(SWIGTYPE_p_int ary, int index, int value) {
    ompl_basePINVOKE.intArray_setitem(SWIGTYPE_p_int.getCPtr(ary), index, value);
  }

  public static SWIGTYPE_p_std__chrono__system_clock__time_point now() {
    SWIGTYPE_p_std__chrono__system_clock__time_point ret = new SWIGTYPE_p_std__chrono__system_clock__time_point(ompl_basePINVOKE.now(), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__chrono__system_clock__duration seconds(double sec) {
    SWIGTYPE_p_std__chrono__system_clock__duration ret = new SWIGTYPE_p_std__chrono__system_clock__duration(ompl_basePINVOKE.seconds__SWIG_0(sec), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double seconds(SWIGTYPE_p_std__chrono__system_clock__duration d) {
    double ret = ompl_basePINVOKE.seconds__SWIG_1(SWIGTYPE_p_std__chrono__system_clock__duration.getCPtr(d));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string as_string(SWIGTYPE_p_std__chrono__system_clock__time_point p) {
    string ret = ompl_basePINVOKE.as_string(SWIGTYPE_p_std__chrono__system_clock__time_point.getCPtr(p));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerNonTerminatingCondition() {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.plannerNonTerminatingCondition(), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerAlwaysTerminatingCondition() {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.plannerAlwaysTerminatingCondition(), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerOrTerminationCondition(PlannerTerminationCondition c1, PlannerTerminationCondition c2) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.plannerOrTerminationCondition(PlannerTerminationCondition.getCPtr(c1), PlannerTerminationCondition.getCPtr(c2)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerAndTerminationCondition(PlannerTerminationCondition c1, PlannerTerminationCondition c2) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.plannerAndTerminationCondition(PlannerTerminationCondition.getCPtr(c1), PlannerTerminationCondition.getCPtr(c2)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(double duration) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.timedPlannerTerminationCondition__SWIG_0(duration), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(SWIGTYPE_p_std__chrono__system_clock__duration duration) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.timedPlannerTerminationCondition__SWIG_1(SWIGTYPE_p_std__chrono__system_clock__duration.getCPtr(duration)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(double duration, double interval) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.timedPlannerTerminationCondition__SWIG_2(duration, interval), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition exactSolnPlannerTerminationCondition(ProblemDefinition pdef) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_basePINVOKE.exactSolnPlannerTerminationCondition(ProblemDefinition.getCPtr(pdef)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(StateSpace destS, State dest, StateSpace sourceS, State source) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_basePINVOKE.copyStateData__SWIG_0(StateSpace.getCPtr(destS), State.getCPtr(dest), StateSpace.getCPtr(sourceS), State.getCPtr(source));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(StateSpace destS, State dest, StateSpace sourceS, State source, SWIGTYPE_p_std__vectorT_std__string_t subspaces) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_basePINVOKE.copyStateData__SWIG_2(StateSpace.getCPtr(destS), State.getCPtr(dest), StateSpace.getCPtr(sourceS), State.getCPtr(source), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(subspaces));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Cost goalRegionCostToGo(State state, Goal goal) {
    Cost ret = new Cost(ompl_basePINVOKE.goalRegionCostToGo(State.getCPtr(state), Goal.getCPtr(goal)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

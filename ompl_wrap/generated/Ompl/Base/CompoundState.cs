//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class CompoundState : State {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CompoundState(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_basePINVOKE.CompoundState_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CompoundState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_basePINVOKE.delete_CompoundState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CompoundState() : this(ompl_basePINVOKE.new_CompoundState(), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_p_ompl__base__State components {
    set {
      ompl_basePINVOKE.CompoundState_components_set(swigCPtr, SWIGTYPE_p_p_ompl__base__State.getCPtr(value));
      if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = ompl_basePINVOKE.CompoundState_components_get(swigCPtr);
      SWIGTYPE_p_p_ompl__base__State ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_ompl__base__State(cPtr, false);
      if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}

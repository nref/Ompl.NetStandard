//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class PlannerTerminationCondition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PlannerTerminationCondition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PlannerTerminationCondition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PlannerTerminationCondition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_PlannerTerminationCondition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public PlannerTerminationCondition(SWIGTYPE_p_std__functionT_bool_fF_t fn) : this(ompl_wrapPINVOKE.new_PlannerTerminationCondition__SWIG_0(SWIGTYPE_p_std__functionT_bool_fF_t.getCPtr(fn)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public PlannerTerminationCondition(SWIGTYPE_p_std__functionT_bool_fF_t fn, double period) : this(ompl_wrapPINVOKE.new_PlannerTerminationCondition__SWIG_1(SWIGTYPE_p_std__functionT_bool_fF_t.getCPtr(fn), period), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void terminate() {
    ompl_wrapPINVOKE.PlannerTerminationCondition_terminate(swigCPtr);
  }

  public bool eval() {
    bool ret = ompl_wrapPINVOKE.PlannerTerminationCondition_eval(swigCPtr);
    return ret;
  }

}

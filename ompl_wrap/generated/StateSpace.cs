//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class StateSpace : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StateSpace(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StateSpace obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StateSpace() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_StateSpace(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public class SubstateLocation : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal SubstateLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubstateLocation obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~SubstateLocation() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ompl_wrapPINVOKE.delete_StateSpace_SubstateLocation(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public SWIGTYPE_p_std__vectorT_std__size_t_t chain {
      set {
        ompl_wrapPINVOKE.StateSpace_SubstateLocation_chain_set(swigCPtr, SWIGTYPE_p_std__vectorT_std__size_t_t.getCPtr(value));
        if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_std__vectorT_std__size_t_t ret = new SWIGTYPE_p_std__vectorT_std__size_t_t(ompl_wrapPINVOKE.StateSpace_SubstateLocation_chain_get(swigCPtr), true);
        if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public StateSpace space {
      set {
        ompl_wrapPINVOKE.StateSpace_SubstateLocation_space_set(swigCPtr, StateSpace.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_SubstateLocation_space_get(swigCPtr);
        StateSpace ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateSpace(cPtr, false);
        return ret;
      } 
    }
  
    public SubstateLocation() : this(ompl_wrapPINVOKE.new_StateSpace_SubstateLocation(), true) {
    }
  
  }

  public class ValueLocation : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ValueLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ValueLocation obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~ValueLocation() {
      Dispose(false);
    }
  
    public void Dispose() {
      Dispose(true);
      global::System.GC.SuppressFinalize(this);
    }
  
    protected virtual void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ompl_wrapPINVOKE.delete_StateSpace_ValueLocation(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
      }
    }
  
    public StateSpace.SubstateLocation stateLocation {
      set {
        ompl_wrapPINVOKE.StateSpace_ValueLocation_stateLocation_set(swigCPtr, StateSpace.SubstateLocation.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_ValueLocation_stateLocation_get(swigCPtr);
        StateSpace.SubstateLocation ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateSpace.SubstateLocation(cPtr, false);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_std__size_t index {
      set {
        ompl_wrapPINVOKE.StateSpace_ValueLocation_index_set(swigCPtr, SWIGTYPE_p_std__size_t.getCPtr(value));
        if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_std__size_t ret = new SWIGTYPE_p_std__size_t(ompl_wrapPINVOKE.StateSpace_ValueLocation_index_get(swigCPtr), true);
        if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public ValueLocation() : this(ompl_wrapPINVOKE.new_StateSpace_ValueLocation(), true) {
    }
  
  }

  public virtual bool isCompound() {
    bool ret = ompl_wrapPINVOKE.StateSpace_isCompound(swigCPtr);
    return ret;
  }

  public virtual bool isDiscrete() {
    bool ret = ompl_wrapPINVOKE.StateSpace_isDiscrete(swigCPtr);
    return ret;
  }

  public virtual bool isHybrid() {
    bool ret = ompl_wrapPINVOKE.StateSpace_isHybrid(swigCPtr);
    return ret;
  }

  public virtual bool isMetricSpace() {
    bool ret = ompl_wrapPINVOKE.StateSpace_isMetricSpace(swigCPtr);
    return ret;
  }

  public virtual bool hasSymmetricDistance() {
    bool ret = ompl_wrapPINVOKE.StateSpace_hasSymmetricDistance(swigCPtr);
    return ret;
  }

  public virtual bool hasSymmetricInterpolate() {
    bool ret = ompl_wrapPINVOKE.StateSpace_hasSymmetricInterpolate(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string getName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ompl_wrapPINVOKE.StateSpace_getName(swigCPtr), false);
    return ret;
  }

  public void setName(SWIGTYPE_p_std__string name) {
    ompl_wrapPINVOKE.StateSpace_setName(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public int getType() {
    int ret = ompl_wrapPINVOKE.StateSpace_getType(swigCPtr);
    return ret;
  }

  public bool includes(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t other) {
    bool ret = ompl_wrapPINVOKE.StateSpace_includes__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(other));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool includes(StateSpace other) {
    bool ret = ompl_wrapPINVOKE.StateSpace_includes__SWIG_1(swigCPtr, StateSpace.getCPtr(other));
    return ret;
  }

  public bool covers(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t other) {
    bool ret = ompl_wrapPINVOKE.StateSpace_covers__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(other));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool covers(StateSpace other) {
    bool ret = ompl_wrapPINVOKE.StateSpace_covers__SWIG_1(swigCPtr, StateSpace.getCPtr(other));
    return ret;
  }

  public ParamSet params_() {
    ParamSet ret = new ParamSet(ompl_wrapPINVOKE.StateSpace_params___SWIG_0(swigCPtr), false);
    return ret;
  }

  public virtual double getLongestValidSegmentFraction() {
    double ret = ompl_wrapPINVOKE.StateSpace_getLongestValidSegmentFraction(swigCPtr);
    return ret;
  }

  public virtual void setLongestValidSegmentFraction(double segmentFraction) {
    ompl_wrapPINVOKE.StateSpace_setLongestValidSegmentFraction(swigCPtr, segmentFraction);
  }

  public virtual uint validSegmentCount(State state1, State state2) {
    uint ret = ompl_wrapPINVOKE.StateSpace_validSegmentCount(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public virtual void setValidSegmentCountFactor(uint factor) {
    ompl_wrapPINVOKE.StateSpace_setValidSegmentCountFactor(swigCPtr, factor);
  }

  public virtual uint getValidSegmentCountFactor() {
    uint ret = ompl_wrapPINVOKE.StateSpace_getValidSegmentCountFactor(swigCPtr);
    return ret;
  }

  public virtual double getLongestValidSegmentLength() {
    double ret = ompl_wrapPINVOKE.StateSpace_getLongestValidSegmentLength(swigCPtr);
    return ret;
  }

  public virtual void computeSignature(SWIGTYPE_p_std__vectorT_int_t signature) {
    ompl_wrapPINVOKE.StateSpace_computeSignature(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(signature));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual uint getDimension() {
    uint ret = ompl_wrapPINVOKE.StateSpace_getDimension(swigCPtr);
    return ret;
  }

  public virtual double getMaximumExtent() {
    double ret = ompl_wrapPINVOKE.StateSpace_getMaximumExtent(swigCPtr);
    return ret;
  }

  public virtual double getMeasure() {
    double ret = ompl_wrapPINVOKE.StateSpace_getMeasure(swigCPtr);
    return ret;
  }

  public virtual void enforceBounds(State state) {
    ompl_wrapPINVOKE.StateSpace_enforceBounds(swigCPtr, State.getCPtr(state));
  }

  public virtual bool satisfiesBounds(State state) {
    bool ret = ompl_wrapPINVOKE.StateSpace_satisfiesBounds(swigCPtr, State.getCPtr(state));
    return ret;
  }

  public virtual void copyState(State destination, State source) {
    ompl_wrapPINVOKE.StateSpace_copyState(swigCPtr, State.getCPtr(destination), State.getCPtr(source));
  }

  public State cloneState(State source) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_cloneState(swigCPtr, State.getCPtr(source));
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public virtual double distance(State state1, State state2) {
    double ret = ompl_wrapPINVOKE.StateSpace_distance(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public virtual uint getSerializationLength() {
    uint ret = ompl_wrapPINVOKE.StateSpace_getSerializationLength(swigCPtr);
    return ret;
  }

  public virtual void serialize(SWIGTYPE_p_void serialization, State state) {
    ompl_wrapPINVOKE.StateSpace_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(serialization), State.getCPtr(state));
  }

  public virtual void deserialize(State state, SWIGTYPE_p_void serialization) {
    ompl_wrapPINVOKE.StateSpace_deserialize(swigCPtr, State.getCPtr(state), SWIGTYPE_p_void.getCPtr(serialization));
  }

  public virtual bool equalStates(State state1, State state2) {
    bool ret = ompl_wrapPINVOKE.StateSpace_equalStates(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public virtual void interpolate(State from, State to, double t, State state) {
    ompl_wrapPINVOKE.StateSpace_interpolate(swigCPtr, State.getCPtr(from), State.getCPtr(to), t, State.getCPtr(state));
  }

  public virtual SWIGTYPE_p_StateSamplerPtr allocDefaultStateSampler() {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.StateSpace_allocDefaultStateSampler(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_StateSamplerPtr allocStateSampler() {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.StateSpace_allocStateSampler(swigCPtr), true);
    return ret;
  }

  public void setStateSamplerAllocator(SWIGTYPE_p_StateSamplerAllocator ssa) {
    ompl_wrapPINVOKE.StateSpace_setStateSamplerAllocator(swigCPtr, SWIGTYPE_p_StateSamplerAllocator.getCPtr(ssa));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearStateSamplerAllocator() {
    ompl_wrapPINVOKE.StateSpace_clearStateSamplerAllocator(swigCPtr);
  }

  public virtual State allocState() {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_allocState(swigCPtr);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public virtual void freeState(State state) {
    ompl_wrapPINVOKE.StateSpace_freeState(swigCPtr, State.getCPtr(state));
  }

  public virtual SWIGTYPE_p_double getValueAddressAtIndex(State state, uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_getValueAddressAtIndex__SWIG_0(swigCPtr, State.getCPtr(state), index);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ompl__base__StateSpace__ValueLocation_t getValueLocations() {
    SWIGTYPE_p_std__vectorT_ompl__base__StateSpace__ValueLocation_t ret = new SWIGTYPE_p_std__vectorT_ompl__base__StateSpace__ValueLocation_t(ompl_wrapPINVOKE.StateSpace_getValueLocations(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__ValueLocation_t getValueLocationsByName() {
    SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__ValueLocation_t ret = new SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__ValueLocation_t(ompl_wrapPINVOKE.StateSpace_getValueLocationsByName(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_double getValueAddressAtLocation(State state, StateSpace.ValueLocation loc) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_getValueAddressAtLocation__SWIG_0(swigCPtr, State.getCPtr(state), StateSpace.ValueLocation.getCPtr(loc));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_double getValueAddressAtName(State state, SWIGTYPE_p_std__string name) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_getValueAddressAtName__SWIG_0(swigCPtr, State.getCPtr(state), SWIGTYPE_p_std__string.getCPtr(name));
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void copyToReals(SWIGTYPE_p_std__vectorT_double_t reals, State source) {
    ompl_wrapPINVOKE.StateSpace_copyToReals(swigCPtr, SWIGTYPE_p_std__vectorT_double_t.getCPtr(reals), State.getCPtr(source));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void copyFromReals(State destination, SWIGTYPE_p_std__vectorT_double_t reals) {
    ompl_wrapPINVOKE.StateSpace_copyFromReals(swigCPtr, State.getCPtr(destination), SWIGTYPE_p_std__vectorT_double_t.getCPtr(reals));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void registerProjection(SWIGTYPE_p_std__string name, SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t projection) {
    ompl_wrapPINVOKE.StateSpace_registerProjection(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t.getCPtr(projection));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void registerDefaultProjection(SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t projection) {
    ompl_wrapPINVOKE.StateSpace_registerDefaultProjection(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t.getCPtr(projection));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void registerProjections() {
    ompl_wrapPINVOKE.StateSpace_registerProjections(swigCPtr);
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t getProjection(SWIGTYPE_p_std__string name) {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t(ompl_wrapPINVOKE.StateSpace_getProjection(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t getDefaultProjection() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__ProjectionEvaluator_t(ompl_wrapPINVOKE.StateSpace_getDefaultProjection(swigCPtr), true);
    return ret;
  }

  public bool hasProjection(SWIGTYPE_p_std__string name) {
    bool ret = ompl_wrapPINVOKE.StateSpace_hasProjection(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasDefaultProjection() {
    bool ret = ompl_wrapPINVOKE.StateSpace_hasDefaultProjection(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_std__shared_ptrT_ompl__base__ProjectionEvaluator_t_t getRegisteredProjections() {
    SWIGTYPE_p_std__mapT_std__string_std__shared_ptrT_ompl__base__ProjectionEvaluator_t_t ret = new SWIGTYPE_p_std__mapT_std__string_std__shared_ptrT_ompl__base__ProjectionEvaluator_t_t(ompl_wrapPINVOKE.StateSpace_getRegisteredProjections(swigCPtr), false);
    return ret;
  }

  public virtual void printState(State state, SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_printState__SWIG_0(swigCPtr, State.getCPtr(state), SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printState(State state) {
    ompl_wrapPINVOKE.StateSpace_printState__SWIG_1(swigCPtr, State.getCPtr(state));
  }

  public virtual void printSettings(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_printSettings(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printProjections(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_printProjections(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void sanityChecks(double zero, double eps, uint flags) {
    ompl_wrapPINVOKE.StateSpace_sanityChecks__SWIG_0(swigCPtr, zero, eps, flags);
  }

  public virtual void sanityChecks() {
    ompl_wrapPINVOKE.StateSpace_sanityChecks__SWIG_1(swigCPtr);
  }

  public void diagram(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_diagram(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void list(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_list(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void Diagram(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_Diagram(SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void List(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.StateSpace_List(SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_StateSamplerPtr allocSubspaceStateSampler(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t subspace) {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.StateSpace_allocSubspaceStateSampler__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(subspace)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_StateSamplerPtr allocSubspaceStateSampler(StateSpace subspace) {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.StateSpace_allocSubspaceStateSampler__SWIG_1(swigCPtr, StateSpace.getCPtr(subspace)), true);
    return ret;
  }

  public State getSubstateAtLocation(State state, StateSpace.SubstateLocation loc) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.StateSpace_getSubstateAtLocation__SWIG_0(swigCPtr, State.getCPtr(state), StateSpace.SubstateLocation.getCPtr(loc));
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__SubstateLocation_t getSubstateLocationsByName() {
    SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__SubstateLocation_t ret = new SWIGTYPE_p_std__mapT_std__string_ompl__base__StateSpace__SubstateLocation_t(ompl_wrapPINVOKE.StateSpace_getSubstateLocationsByName(swigCPtr), false);
    return ret;
  }

  public void getCommonSubspaces(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t other, SWIGTYPE_p_std__vectorT_std__string_t subspaces) {
    ompl_wrapPINVOKE.StateSpace_getCommonSubspaces__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(other), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(subspaces));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void getCommonSubspaces(StateSpace other, SWIGTYPE_p_std__vectorT_std__string_t subspaces) {
    ompl_wrapPINVOKE.StateSpace_getCommonSubspaces__SWIG_1(swigCPtr, StateSpace.getCPtr(other), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(subspaces));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void computeLocations() {
    ompl_wrapPINVOKE.StateSpace_computeLocations(swigCPtr);
  }

  public virtual void setup() {
    ompl_wrapPINVOKE.StateSpace_setup(swigCPtr);
  }

  public enum SanityChecks {
    STATESPACE_DISTANCE_DIFFERENT_STATES = (1 << 1),
    STATESPACE_DISTANCE_SYMMETRIC = (1 << 2),
    STATESPACE_INTERPOLATION = (1 << 3),
    STATESPACE_TRIANGLE_INEQUALITY = (1 << 4),
    STATESPACE_DISTANCE_BOUND = (1 << 5),
    STATESPACE_RESPECT_BOUNDS = (1 << 6),
    STATESPACE_ENFORCE_BOUNDS_NO_OP = (1 << 7),
    STATESPACE_SERIALIZATION = (1 << 8)
  }

}

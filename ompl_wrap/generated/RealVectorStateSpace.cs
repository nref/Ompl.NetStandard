//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RealVectorStateSpace : StateSpace {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal RealVectorStateSpace(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_wrapPINVOKE.RealVectorStateSpace_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RealVectorStateSpace obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_RealVectorStateSpace(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public class StateType : State {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  
    internal StateType(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_wrapPINVOKE.RealVectorStateSpace_StateType_SWIGUpcast(cPtr), cMemoryOwn) {
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StateType obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    protected override void Dispose(bool disposing) {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            ompl_wrapPINVOKE.delete_RealVectorStateSpace_StateType(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        base.Dispose(disposing);
      }
    }
  
    public StateType() : this(ompl_wrapPINVOKE.new_RealVectorStateSpace_StateType(), true) {
    }
  
    public SWIGTYPE_p_double values {
      set {
        ompl_wrapPINVOKE.RealVectorStateSpace_StateType_values_set(swigCPtr, SWIGTYPE_p_double.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = ompl_wrapPINVOKE.RealVectorStateSpace_StateType_values_get(swigCPtr);
        SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
        return ret;
      } 
    }
  
  }

  public RealVectorStateSpace(uint dim) : this(ompl_wrapPINVOKE.new_RealVectorStateSpace__SWIG_0(dim), true) {
  }

  public RealVectorStateSpace() : this(ompl_wrapPINVOKE.new_RealVectorStateSpace__SWIG_1(), true) {
  }

  public void addDimension(double minBound, double maxBound) {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_0(swigCPtr, minBound, maxBound);
  }

  public void addDimension(double minBound) {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_1(swigCPtr, minBound);
  }

  public void addDimension() {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_2(swigCPtr);
  }

  public void addDimension(SWIGTYPE_p_std__string name, double minBound, double maxBound) {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_3(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), minBound, maxBound);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addDimension(SWIGTYPE_p_std__string name, double minBound) {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_4(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), minBound);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addDimension(SWIGTYPE_p_std__string name) {
    ompl_wrapPINVOKE.RealVectorStateSpace_addDimension__SWIG_5(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBounds(RealVectorBounds bounds) {
    ompl_wrapPINVOKE.RealVectorStateSpace_setBounds__SWIG_0(swigCPtr, RealVectorBounds.getCPtr(bounds));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setBounds(double low, double high) {
    ompl_wrapPINVOKE.RealVectorStateSpace_setBounds__SWIG_1(swigCPtr, low, high);
  }

  public RealVectorBounds getBounds() {
    RealVectorBounds ret = new RealVectorBounds(ompl_wrapPINVOKE.RealVectorStateSpace_getBounds(swigCPtr), false);
    return ret;
  }

  public override uint getDimension() {
    uint ret = ompl_wrapPINVOKE.RealVectorStateSpace_getDimension(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string getDimensionName(uint index) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ompl_wrapPINVOKE.RealVectorStateSpace_getDimensionName(swigCPtr, index), false);
    return ret;
  }

  public int getDimensionIndex(SWIGTYPE_p_std__string name) {
    int ret = ompl_wrapPINVOKE.RealVectorStateSpace_getDimensionIndex(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setDimensionName(uint index, SWIGTYPE_p_std__string name) {
    ompl_wrapPINVOKE.RealVectorStateSpace_setDimensionName(swigCPtr, index, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double getMaximumExtent() {
    double ret = ompl_wrapPINVOKE.RealVectorStateSpace_getMaximumExtent(swigCPtr);
    return ret;
  }

  public override double getMeasure() {
    double ret = ompl_wrapPINVOKE.RealVectorStateSpace_getMeasure(swigCPtr);
    return ret;
  }

  public override void enforceBounds(State state) {
    ompl_wrapPINVOKE.RealVectorStateSpace_enforceBounds(swigCPtr, State.getCPtr(state));
  }

  public override bool satisfiesBounds(State state) {
    bool ret = ompl_wrapPINVOKE.RealVectorStateSpace_satisfiesBounds(swigCPtr, State.getCPtr(state));
    return ret;
  }

  public override void copyState(State destination, State source) {
    ompl_wrapPINVOKE.RealVectorStateSpace_copyState(swigCPtr, State.getCPtr(destination), State.getCPtr(source));
  }

  public override uint getSerializationLength() {
    uint ret = ompl_wrapPINVOKE.RealVectorStateSpace_getSerializationLength(swigCPtr);
    return ret;
  }

  public override void serialize(SWIGTYPE_p_void serialization, State state) {
    ompl_wrapPINVOKE.RealVectorStateSpace_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(serialization), State.getCPtr(state));
  }

  public override void deserialize(State state, SWIGTYPE_p_void serialization) {
    ompl_wrapPINVOKE.RealVectorStateSpace_deserialize(swigCPtr, State.getCPtr(state), SWIGTYPE_p_void.getCPtr(serialization));
  }

  public override double distance(State state1, State state2) {
    double ret = ompl_wrapPINVOKE.RealVectorStateSpace_distance(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public override bool equalStates(State state1, State state2) {
    bool ret = ompl_wrapPINVOKE.RealVectorStateSpace_equalStates(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public override void interpolate(State from, State to, double t, State state) {
    ompl_wrapPINVOKE.RealVectorStateSpace_interpolate(swigCPtr, State.getCPtr(from), State.getCPtr(to), t, State.getCPtr(state));
  }

  public override SWIGTYPE_p_StateSamplerPtr allocDefaultStateSampler() {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.RealVectorStateSpace_allocDefaultStateSampler(swigCPtr), true);
    return ret;
  }

  public override State allocState() {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.RealVectorStateSpace_allocState(swigCPtr);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public override void freeState(State state) {
    ompl_wrapPINVOKE.RealVectorStateSpace_freeState(swigCPtr, State.getCPtr(state));
  }

  public override SWIGTYPE_p_double getValueAddressAtIndex(State state, uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.RealVectorStateSpace_getValueAddressAtIndex(swigCPtr, State.getCPtr(state), index);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public override void printState(State state, SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.RealVectorStateSpace_printState(swigCPtr, State.getCPtr(state), SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printSettings(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.RealVectorStateSpace_printSettings(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void registerProjections() {
    ompl_wrapPINVOKE.RealVectorStateSpace_registerProjections(swigCPtr);
  }

  public override void setup() {
    ompl_wrapPINVOKE.RealVectorStateSpace_setup(swigCPtr);
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class CompoundStateSpace : StateSpace {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CompoundStateSpace(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_wrapPINVOKE.CompoundStateSpace_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CompoundStateSpace obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_CompoundStateSpace(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public CompoundStateSpace() : this(ompl_wrapPINVOKE.new_CompoundStateSpace__SWIG_0(), true) {
  }

  public CompoundStateSpace(SWIGTYPE_p_std__vectorT_std__shared_ptrT_ompl__base__StateSpace_t_t components, SWIGTYPE_p_std__vectorT_double_t weights) : this(ompl_wrapPINVOKE.new_CompoundStateSpace__SWIG_1(SWIGTYPE_p_std__vectorT_std__shared_ptrT_ompl__base__StateSpace_t_t.getCPtr(components), SWIGTYPE_p_std__vectorT_double_t.getCPtr(weights)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool isCompound() {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_isCompound(swigCPtr);
    return ret;
  }

  public override bool isHybrid() {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_isHybrid(swigCPtr);
    return ret;
  }

  public void addSubspace(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t component, double weight) {
    ompl_wrapPINVOKE.CompoundStateSpace_addSubspace(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(component), weight);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getSubspaceCount() {
    uint ret = ompl_wrapPINVOKE.CompoundStateSpace_getSubspaceCount(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t getSubspace(uint index) {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t(ompl_wrapPINVOKE.CompoundStateSpace_getSubspace__SWIG_0(swigCPtr, index), false);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t getSubspace(SWIGTYPE_p_std__string name) {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t(ompl_wrapPINVOKE.CompoundStateSpace_getSubspace__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name)), false);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getSubspaceIndex(SWIGTYPE_p_std__string name) {
    uint ret = ompl_wrapPINVOKE.CompoundStateSpace_getSubspaceIndex(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool hasSubspace(SWIGTYPE_p_std__string name) {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_hasSubspace(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getSubspaceWeight(uint index) {
    double ret = ompl_wrapPINVOKE.CompoundStateSpace_getSubspaceWeight__SWIG_0(swigCPtr, index);
    return ret;
  }

  public double getSubspaceWeight(SWIGTYPE_p_std__string name) {
    double ret = ompl_wrapPINVOKE.CompoundStateSpace_getSubspaceWeight__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setSubspaceWeight(uint index, double weight) {
    ompl_wrapPINVOKE.CompoundStateSpace_setSubspaceWeight__SWIG_0(swigCPtr, index, weight);
  }

  public void setSubspaceWeight(SWIGTYPE_p_std__string name, double weight) {
    ompl_wrapPINVOKE.CompoundStateSpace_setSubspaceWeight__SWIG_1(swigCPtr, SWIGTYPE_p_std__string.getCPtr(name), weight);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ompl__base__StateSpace_t_t getSubspaces() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ompl__base__StateSpace_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ompl__base__StateSpace_t_t(ompl_wrapPINVOKE.CompoundStateSpace_getSubspaces(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_double_t getSubspaceWeights() {
    SWIGTYPE_p_std__vectorT_double_t ret = new SWIGTYPE_p_std__vectorT_double_t(ompl_wrapPINVOKE.CompoundStateSpace_getSubspaceWeights(swigCPtr), false);
    return ret;
  }

  public bool isLocked() {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_isLocked(swigCPtr);
    return ret;
  }

  public void lock_() {
    ompl_wrapPINVOKE.CompoundStateSpace_lock_(swigCPtr);
  }

  public override SWIGTYPE_p_StateSamplerPtr allocSubspaceStateSampler(StateSpace subspace) {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.CompoundStateSpace_allocSubspaceStateSampler(swigCPtr, StateSpace.getCPtr(subspace)), true);
    return ret;
  }

  public override uint getDimension() {
    uint ret = ompl_wrapPINVOKE.CompoundStateSpace_getDimension(swigCPtr);
    return ret;
  }

  public override double getMaximumExtent() {
    double ret = ompl_wrapPINVOKE.CompoundStateSpace_getMaximumExtent(swigCPtr);
    return ret;
  }

  public override double getMeasure() {
    double ret = ompl_wrapPINVOKE.CompoundStateSpace_getMeasure(swigCPtr);
    return ret;
  }

  public override void enforceBounds(State state) {
    ompl_wrapPINVOKE.CompoundStateSpace_enforceBounds(swigCPtr, State.getCPtr(state));
  }

  public override bool satisfiesBounds(State state) {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_satisfiesBounds(swigCPtr, State.getCPtr(state));
    return ret;
  }

  public override void copyState(State destination, State source) {
    ompl_wrapPINVOKE.CompoundStateSpace_copyState(swigCPtr, State.getCPtr(destination), State.getCPtr(source));
  }

  public override uint getSerializationLength() {
    uint ret = ompl_wrapPINVOKE.CompoundStateSpace_getSerializationLength(swigCPtr);
    return ret;
  }

  public override void serialize(SWIGTYPE_p_void serialization, State state) {
    ompl_wrapPINVOKE.CompoundStateSpace_serialize(swigCPtr, SWIGTYPE_p_void.getCPtr(serialization), State.getCPtr(state));
  }

  public override void deserialize(State state, SWIGTYPE_p_void serialization) {
    ompl_wrapPINVOKE.CompoundStateSpace_deserialize(swigCPtr, State.getCPtr(state), SWIGTYPE_p_void.getCPtr(serialization));
  }

  public override double distance(State state1, State state2) {
    double ret = ompl_wrapPINVOKE.CompoundStateSpace_distance(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public override void setLongestValidSegmentFraction(double segmentFraction) {
    ompl_wrapPINVOKE.CompoundStateSpace_setLongestValidSegmentFraction(swigCPtr, segmentFraction);
  }

  public override uint validSegmentCount(State state1, State state2) {
    uint ret = ompl_wrapPINVOKE.CompoundStateSpace_validSegmentCount(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public override bool equalStates(State state1, State state2) {
    bool ret = ompl_wrapPINVOKE.CompoundStateSpace_equalStates(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    return ret;
  }

  public override void interpolate(State from, State to, double t, State state) {
    ompl_wrapPINVOKE.CompoundStateSpace_interpolate(swigCPtr, State.getCPtr(from), State.getCPtr(to), t, State.getCPtr(state));
  }

  public override SWIGTYPE_p_StateSamplerPtr allocDefaultStateSampler() {
    SWIGTYPE_p_StateSamplerPtr ret = new SWIGTYPE_p_StateSamplerPtr(ompl_wrapPINVOKE.CompoundStateSpace_allocDefaultStateSampler(swigCPtr), true);
    return ret;
  }

  public override State allocState() {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.CompoundStateSpace_allocState(swigCPtr);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    return ret;
  }

  public override void freeState(State state) {
    ompl_wrapPINVOKE.CompoundStateSpace_freeState(swigCPtr, State.getCPtr(state));
  }

  public override SWIGTYPE_p_double getValueAddressAtIndex(State state, uint index) {
    global::System.IntPtr cPtr = ompl_wrapPINVOKE.CompoundStateSpace_getValueAddressAtIndex(swigCPtr, State.getCPtr(state), index);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public override void printState(State state, SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.CompoundStateSpace_printState(swigCPtr, State.getCPtr(state), SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void printSettings(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.CompoundStateSpace_printSettings(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void computeLocations() {
    ompl_wrapPINVOKE.CompoundStateSpace_computeLocations(swigCPtr);
  }

  public override void setup() {
    ompl_wrapPINVOKE.CompoundStateSpace_setup(swigCPtr);
  }

}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ompl_geometric(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ompl_geometric(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ompl_geometric(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}



#include "ompl/util/Time.h"
#include "ompl/util/ProlateHyperspheroid.h"
#include "ompl/util/RandomNumbers.h"

#include "ompl/datastructures/BinaryHeap.h"
#include "ompl/datastructures/Grid.h"
#include "ompl/datastructures/GridN.h"
#include "ompl/datastructures/GridB.h"

// Disable null dereference warnings
#pragma warning(push)
#pragma warning(disable : 6011)



static double *new_doubleArray(int nelements) { 
  return new double[nelements](); 
}

static void delete_doubleArray(double *ary) { 
  delete [] ary; 
}

static double doubleArray_getitem(double *ary, int index) {
    return ary[index];
}
static void doubleArray_setitem(double *ary, int index, double value) {
    ary[index] = value;
}


static int *new_intArray(int nelements) { 
  return new int[nelements](); 
}

static void delete_intArray(int *ary) { 
  delete [] ary; 
}

static int intArray_getitem(int *ary, int index) {
    return ary[index];
}
static void intArray_setitem(int *ary, int index, int value) {
    ary[index] = value;
}


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>



#include "ompl/geometric/PathGeometric.h"
#include "ompl/geometric/PathSimplifier.h"
#include "ompl/geometric/SimpleSetup.h"
#include "ompl/geometric/planners/kpiece/KPIECE1.h"



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ompl_geometric_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_doubleArray___(int jarg1) {
  void * jresult ;
  int arg1 ;
  double *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (double *)new_doubleArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_doubleArray___(void * jarg1) {
  double *arg1 = (double *) 0 ;
  
  arg1 = (double *)jarg1; 
  delete_doubleArray(arg1);
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_doubleArray_getitem___(void * jarg1, int jarg2) {
  double jresult ;
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (double *)jarg1; 
  arg2 = (int)jarg2; 
  result = (double)doubleArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleArray_setitem___(void * jarg1, int jarg2, double jarg3) {
  double *arg1 = (double *) 0 ;
  int arg2 ;
  double arg3 ;
  
  arg1 = (double *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  doubleArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_intArray___(int jarg1) {
  void * jresult ;
  int arg1 ;
  int *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (int *)new_intArray(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_intArray___(void * jarg1) {
  int *arg1 = (int *) 0 ;
  
  arg1 = (int *)jarg1; 
  delete_intArray(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_intArray_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)intArray_getitem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intArray_setitem___(void * jarg1, int jarg2, int jarg3) {
  int *arg1 = (int *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  intArray_setitem(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Clear___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Add___(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((double const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_doubleVector__SWIG_0___() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_doubleVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_doubleVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_getitemcopy___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_getitem___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_setitem___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Insert___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Repeat___(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Contains___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_IndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_LastIndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_doubleVector_Remove___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_doubleVector___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_Clear___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_Add___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OmplfGeometric_intVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OmplfGeometric_intVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_intVector__SWIG_0___() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_intVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_intVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_intVector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_intVector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_intVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_intVector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  } catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_intVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_intVector_Contains___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_intVector_IndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_intVector_LastIndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_intVector_Remove___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_intVector___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_now___() {
  void * jresult ;
  ompl::time::point result;
  
  {
    try {
      result = ompl::time::now();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::time::point((const ompl::time::point &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_seconds__SWIG_0___(double jarg1) {
  void * jresult ;
  double arg1 ;
  ompl::time::duration result;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = ompl::time::seconds(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::time::duration((const ompl::time::duration &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_seconds__SWIG_1___(void * jarg1) {
  double jresult ;
  ompl::time::duration *arg1 = 0 ;
  double result;
  
  arg1 = (ompl::time::duration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::duration const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)ompl::time::seconds((std::chrono::system_clock::duration const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OmplfGeometric_as_string___(void * jarg1) {
  char * jresult ;
  ompl::time::point *arg1 = 0 ;
  std::string result;
  
  arg1 = (ompl::time::point *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::point const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = ompl::time::as_string((std::chrono::system_clock::time_point const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_ProgressDisplay__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::ostream *arg1 = 0 ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_ProgressDisplay__SWIG_1___() {
  void * jresult ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  {
    try {
      result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_ProgressDisplay_count___(void * jarg1) {
  unsigned int jresult ;
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::time::ProgressDisplay const *)arg1)->count();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_ProgressDisplay___(void * jarg1) {
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_ProlateHyperspheroid___(unsigned int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double *arg2 ;
  double *arg3 ;
  ompl::ProlateHyperspheroid *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      result = (ompl::ProlateHyperspheroid *)new ompl::ProlateHyperspheroid(arg1,(double const (*))arg2,(double const (*))arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_setTransverseDiameter___(void * jarg1, double jarg2) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTransverseDiameter(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_transform___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 ;
  double *arg3 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((ompl::ProlateHyperspheroid const *)arg1)->transform((double const (*))arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_isInPhs___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 ;
  bool result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (bool)((ompl::ProlateHyperspheroid const *)arg1)->isInPhs((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_isOnPhs___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 ;
  bool result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (bool)((ompl::ProlateHyperspheroid const *)arg1)->isOnPhs((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getPhsDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::ProlateHyperspheroid const *)arg1)->getPhsDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getPhsMeasure__SWIG_0___(void * jarg1) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPhsMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getPhsMeasure__SWIG_1___(void * jarg1, double jarg2) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPhsMeasure(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getMinTransverseDiameter___(void * jarg1) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getMinTransverseDiameter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getPathLength___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPathLength((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_ProlateHyperspheroid_getDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::ProlateHyperspheroid const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_ProlateHyperspheroid___(void * jarg1) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_RNG__SWIG_0___() {
  void * jresult ;
  ompl::RNG *result = 0 ;
  
  {
    try {
      result = (ompl::RNG *)new ompl::RNG();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_RNG__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::uint_fast32_t arg1 ;
  std::uint_fast32_t *argp1 ;
  ompl::RNG *result = 0 ;
  
  argp1 = (std::uint_fast32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (ompl::RNG *)new ompl::RNG(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniform01___(void * jarg1) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (double)(arg1)->uniform01();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformReal___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->uniformReal(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformInt___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->uniformInt(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformBool___(void * jarg1) {
  unsigned int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  bool result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (bool)(arg1)->uniformBool();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_gaussian01___(void * jarg1) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (double)(arg1)->gaussian01();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_gaussian___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->gaussian(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_halfNormalReal__SWIG_0___(void * jarg1, double jarg2, double jarg3, double jarg4) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->halfNormalReal(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_RNG_halfNormalReal__SWIG_1___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->halfNormalReal(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_RNG_halfNormalInt__SWIG_0___(void * jarg1, int jarg2, int jarg3, double jarg4) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (int)(arg1)->halfNormalInt(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_RNG_halfNormalInt__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->halfNormalInt(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_quaternion___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double *arg2 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->quaternion(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_eulerRPY___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double *arg2 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->eulerRPY(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_setSeed___(void * jarg1) {
  std::uint_fast32_t arg1 ;
  std::uint_fast32_t *argp1 ;
  
  argp1 = (std::uint_fast32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return ;
  }
  arg1 = *argp1; 
  {
    try {
      ompl::RNG::setSeed(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_RNG_getSeed___() {
  void * jresult ;
  std::uint_fast32_t result;
  
  {
    try {
      result = ompl::RNG::getSeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::uint_fast32_t((const std::uint_fast32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_setLocalSeed___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::uint_fast32_t arg2 ;
  std::uint_fast32_t *argp2 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  argp2 = (std::uint_fast32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setLocalSeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_RNG_getLocalSeed___(void * jarg1) {
  void * jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::uint_fast32_t result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = ((ompl::RNG const *)arg1)->getLocalSeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::uint_fast32_t((const std::uint_fast32_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformNormalVector___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->uniformNormalVector(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformInBall___(void * jarg1, double jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->uniformInBall(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformProlateHyperspheroidSurface___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::shared_ptr< ompl::ProlateHyperspheroid const > *arg2 = 0 ;
  double *arg3 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::shared_ptr< ompl::ProlateHyperspheroid const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ompl::ProlateHyperspheroid const > const & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->uniformProlateHyperspheroidSurface((std::shared_ptr< ompl::ProlateHyperspheroid const > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_RNG_uniformProlateHyperspheroid___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::shared_ptr< ompl::ProlateHyperspheroid const > *arg2 = 0 ;
  double *arg3 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::shared_ptr< ompl::ProlateHyperspheroid const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ompl::ProlateHyperspheroid const > const & type is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->uniformProlateHyperspheroid((std::shared_ptr< ompl::ProlateHyperspheroid const > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_RNG___(void * jarg1) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathGeometric__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathGeometric >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathGeometric__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  
  arg1 = (ompl::geometric::PathGeometric *)(((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1) ? ((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::geometric::PathGeometric const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathGeometric >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathGeometric__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1,(ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathGeometric >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathGeometric__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1,(ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathGeometric >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_PathGeometric___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_cost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  {
    try {
      result = ((ompl::geometric::PathGeometric const *)arg1)->cost((ompl::base::OptimizationObjectivePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost((const ompl::base::Cost &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_length___(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::PathGeometric const *)arg1)->length();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_check___(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::geometric::PathGeometric const *)arg1)->check();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_smoothness___(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::PathGeometric const *)arg1)->smoothness();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_clearance___(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::PathGeometric const *)arg1)->clearance();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_printAsMatrix___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::geometric::PathGeometric const *)arg1)->printAsMatrix(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_interpolate__SWIG_0___(void * jarg1, unsigned int jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->interpolate(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_interpolate__SWIG_1___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->interpolate();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_subdivide___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->subdivide();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_reverse___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->reverse();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_checkAndRepair___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  std::pair< bool,bool > result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (arg1)->checkAndRepair(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::pair< bool,bool >((const std::pair< bool,bool > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_overlay__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & reference is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      (arg1)->overlay((ompl::geometric::PathGeometric const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_overlay__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->overlay((ompl::geometric::PathGeometric const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_append__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->append((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_append__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->append((ompl::geometric::PathGeometric const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_prepend___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->prepend((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_keepAfter___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->keepAfter((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_keepBefore___(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->keepBefore((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_random___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->random();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_randomValid___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)(arg1)->randomValid(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_getClosestIndex___(void * jarg1, void * jarg2) {
  int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (int)((ompl::geometric::PathGeometric const *)arg1)->getClosestIndex((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_getStates___(void * jarg1) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  std::vector< ompl::base::State * > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< ompl::base::State * > *) &(arg1)->getStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_getState__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::State *)(arg1)->getState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_getStateCount___(void * jarg1) {
  unsigned long jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric const > *smartarg1 = 0 ;
  std::size_t result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::geometric::PathGeometric const *)arg1)->getStateCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_clear___(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::shared_ptr< ompl::geometric::PathGeometric > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg1;
  arg1 = (ompl::geometric::PathGeometric *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathSimplifier__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  ompl::base::OptimizationObjectivePtr *arg3 = 0 ;
  ompl::base::GoalPtr tempnull2 ;
  ompl::base::OptimizationObjectivePtr tempnull3 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  arg2 = jarg2 ? (ompl::base::GoalPtr *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? (ompl::base::OptimizationObjectivePtr *)jarg3 : &tempnull3; 
  {
    try {
      result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1,(ompl::base::GoalPtr const &)*arg2,(ompl::base::OptimizationObjectivePtr const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathSimplifier >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathSimplifier__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  ompl::base::GoalPtr tempnull2 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  arg2 = jarg2 ? (ompl::base::GoalPtr *)jarg2 : &tempnull2; 
  {
    try {
      result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1,(ompl::base::GoalPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathSimplifier >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_PathSimplifier__SWIG_2___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  {
    try {
      result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::PathSimplifier >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_PathSimplifier___(void * jarg1) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_reduceVertices__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (bool)(arg1)->reduceVertices(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_reduceVertices__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->reduceVertices(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_reduceVertices__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)(arg1)->reduceVertices(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_reduceVertices__SWIG_3___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->reduceVertices(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_shortcutPath__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_shortcutPath__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_shortcutPath__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_shortcutPath__SWIG_3___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)(arg1)->shortcutPath(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_shortcutPath__SWIG_4___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->shortcutPath(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_perturbPath__SWIG_0___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_perturbPath__SWIG_1___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_perturbPath__SWIG_2___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_perturbPath__SWIG_3___(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (bool)(arg1)->perturbPath(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_collapseCloseVertices__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->collapseCloseVertices(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_collapseCloseVertices__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)(arg1)->collapseCloseVertices(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_collapseCloseVertices__SWIG_2___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->collapseCloseVertices(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_smoothBSpline__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, double jarg4) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  double arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->smoothBSpline(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_smoothBSpline__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      (arg1)->smoothBSpline(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_smoothBSpline__SWIG_2___(void * jarg1, void * jarg2) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->smoothBSpline(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_simplifyMax___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->simplifyMax(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_simplify__SWIG_0___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)(arg1)->simplify(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_simplify__SWIG_1___(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (bool)(arg1)->simplify(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_simplify__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  bool arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (bool)(arg1)->simplify(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_simplify__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->simplify(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_0___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_1___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_2___(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_3___(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_4___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4,arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_5___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  double arg5 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_6___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_findBetterGoal__SWIG_7___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::geometric::PathGeometric *)(((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2) ? ((std::shared_ptr<  ompl::geometric::PathGeometric > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & reference is null", 0);
    return 0;
  } 
  
  arg3 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_freeStates__SWIG_0___(void * jarg1, unsigned int jarg2) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  bool arg2 ;
  std::shared_ptr< ompl::geometric::PathSimplifier > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->freeStates(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_PathSimplifier_freeStates__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  std::shared_ptr< ompl::geometric::PathSimplifier const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::PathSimplifier > *)jarg1;
  arg1 = (ompl::geometric::PathSimplifier *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::geometric::PathSimplifier const *)arg1)->freeStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_KPIECE1___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::geometric::KPIECE1 *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::geometric::KPIECE1 *)new ompl::geometric::KPIECE1((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::KPIECE1 >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_KPIECE1___(void * jarg1) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_solve___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->solve((ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus((ompl::base::PlannerStatus &)result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_clear___(void * jarg1) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setGoalBias___(void * jarg1, double jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setGoalBias(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getGoalBias___(void * jarg1) {
  double jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::KPIECE1 const *)arg1)->getGoalBias();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setRange___(void * jarg1, double jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setRange(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getRange___(void * jarg1) {
  double jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::KPIECE1 const *)arg1)->getRange();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setBorderFraction___(void * jarg1, double jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setBorderFraction(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getBorderFraction___(void * jarg1) {
  double jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::KPIECE1 const *)arg1)->getBorderFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setMinValidPathFraction___(void * jarg1, double jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setMinValidPathFraction(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getMinValidPathFraction___(void * jarg1) {
  double jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::KPIECE1 const *)arg1)->getMinValidPathFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setFailedExpansionCellScoreFactor___(void * jarg1, double jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setFailedExpansionCellScoreFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getFailedExpansionCellScoreFactor___(void * jarg1) {
  double jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::KPIECE1 const *)arg1)->getFailedExpansionCellScoreFactor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setProjectionEvaluator__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  ompl::base::ProjectionEvaluatorPtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ProjectionEvaluatorPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProjectionEvaluatorPtr const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setProjectionEvaluator((ompl::base::ProjectionEvaluatorPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setProjectionEvaluator__SWIG_1___(void * jarg1, char * jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setProjectionEvaluator((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getProjectionEvaluator___(void * jarg1) {
  void * jresult ;
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  ompl::base::ProjectionEvaluatorPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ProjectionEvaluatorPtr *) &((ompl::geometric::KPIECE1 const *)arg1)->getProjectionEvaluator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_setup___(void * jarg1) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_getPlannerData___(void * jarg1, void * jarg2) {
  ompl::geometric::KPIECE1 *arg1 = (ompl::geometric::KPIECE1 *) 0 ;
  ompl::base::PlannerData *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::KPIECE1 const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::KPIECE1 > *)jarg1;
  arg1 = (ompl::geometric::KPIECE1 *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerData *)(((std::shared_ptr<  ompl::base::PlannerData > *)jarg2) ? ((std::shared_ptr<  ompl::base::PlannerData > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & reference is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::geometric::KPIECE1 const *)arg1)->getPlannerData(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_SimpleSetup__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::geometric::SimpleSetup *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::geometric::SimpleSetup *)new ompl::geometric::SimpleSetup((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::SimpleSetup >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_new_SimpleSetup__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::base::StateSpacePtr tempnull1 ;
  ompl::geometric::SimpleSetup *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::StateSpacePtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::geometric::SimpleSetup *)new ompl::geometric::SimpleSetup((ompl::base::StateSpacePtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::geometric::SimpleSetup >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_delete_SimpleSetup___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getProblemDefinition__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ProblemDefinitionPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getProblemDefinition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::ProblemDefinitionPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getStateSpace___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getStateSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getStateValidityChecker___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::StateValidityCheckerPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateValidityCheckerPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getStateValidityChecker();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateValidityCheckerPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getGoal___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::GoalPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::GoalPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getGoal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::GoalPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getPlanner___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::PlannerPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::PlannerPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getPlanner();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::PlannerPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getPlannerAllocator___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::PlannerAllocator *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::PlannerAllocator *) &((ompl::geometric::SimpleSetup const *)arg1)->getPlannerAllocator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getPathSimplifier__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::geometric::PathSimplifierPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::geometric::PathSimplifierPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getPathSimplifier();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::geometric::PathSimplifierPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::OptimizationObjectivePtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getOptimizationObjective();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::OptimizationObjectivePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_haveExactSolutionPath___(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::geometric::SimpleSetup const *)arg1)->haveExactSolutionPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_haveSolutionPath___(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::geometric::SimpleSetup const *)arg1)->haveSolutionPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getSolutionPlannerName___(void * jarg1) {
  char * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::geometric::SimpleSetup const *)arg1)->getSolutionPlannerName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getSolutionPath___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::geometric::PathGeometric *) &((ompl::geometric::SimpleSetup const *)arg1)->getSolutionPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::geometric::PathGeometric >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getPlannerData___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerData *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerData *)(((std::shared_ptr<  ompl::base::PlannerData > *)jarg2) ? ((std::shared_ptr<  ompl::base::PlannerData > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & reference is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::geometric::SimpleSetup const *)arg1)->getPlannerData(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setStateValidityChecker__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateValidityCheckerPtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::StateValidityCheckerPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateValidityCheckerPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setStateValidityChecker__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateValidityCheckerFn *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::StateValidityCheckerFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityCheckerFn const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerFn const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setOptimizationObjective___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setOptimizationObjective((ompl::base::OptimizationObjectivePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setStartAndGoalStates__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2,(ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setStartAndGoalStates__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg3 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2,(ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_addStartState___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addStartState((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_clearStartStates___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearStartStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setStartState___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStartState((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setGoalState__SWIG_0___(void * jarg1, void * jarg2, double jarg3) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setGoalState((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setGoalState__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGoalState((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setGoal___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::GoalPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::GoalPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setGoal((ompl::base::GoalPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setPlanner___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerPtr *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::PlannerPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::PlannerPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setPlanner((ompl::base::PlannerPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setPlannerAllocator___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerAllocator *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerAllocator const & type is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setPlannerAllocator((ompl::base::PlannerAllocator const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_solve__SWIG_0___(void * jarg1, double jarg2) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (arg1)->solve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus((ompl::base::PlannerStatus &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_solve__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->solve();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus((ompl::base::PlannerStatus &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_solve__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->solve((ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus((ompl::base::PlannerStatus &)result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getLastPlannerStatus___(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::geometric::SimpleSetup const *)arg1)->getLastPlannerStatus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus((ompl::base::PlannerStatus &)result)); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getLastPlanComputationTime___(void * jarg1) {
  double jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::SimpleSetup const *)arg1)->getLastPlanComputationTime();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_getLastSimplificationTime___(void * jarg1) {
  double jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::geometric::SimpleSetup const *)arg1)->getLastSimplificationTime();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_simplifySolution__SWIG_0___(void * jarg1, double jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->simplifySolution(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_simplifySolution__SWIG_1___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->simplifySolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_simplifySolution__SWIG_2___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->simplifySolution((ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_clear___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup__print__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::geometric::SimpleSetup const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup__print__SWIG_1___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::geometric::SimpleSetup const *)arg1)->print();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfGeometric_SimpleSetup_setup___(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::shared_ptr< ompl::geometric::SimpleSetup > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::geometric::SimpleSetup > *)jarg1;
  arg1 = (ompl::geometric::SimpleSetup *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT std::shared_ptr< ompl::base::Path > * SWIGSTDCALL CSharp_OmplfGeometric_PathGeometric_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::geometric::PathGeometric > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::Path >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::Planner > * SWIGSTDCALL CSharp_OmplfGeometric_KPIECE1_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::geometric::KPIECE1 > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::Planner >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif


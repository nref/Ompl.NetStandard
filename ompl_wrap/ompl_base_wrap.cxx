/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040200
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 


/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ompl_base(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ompl_base(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ompl_base(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


  #include <functional>
  #include <iostream>

  #ifndef SWIG_DIRECTORS
  #error "std_function.i: Directors must be enabled"
  #endif



#include "ompl/util/Time.h"
#include "ompl/util/ProlateHyperspheroid.h"
#include "ompl/util/RandomNumbers.h"

#include "ompl/datastructures/BinaryHeap.h"
#include "ompl/datastructures/Grid.h"
#include "ompl/datastructures/GridN.h"
#include "ompl/datastructures/GridB.h"

// Disable null dereference warnings
#pragma warning(push)
#pragma warning(disable : 6011)



SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


typedef double doubleArray;

SWIGINTERN doubleArray *new_doubleArray(size_t nelements){
  return new double[nelements]();
}
SWIGINTERN void delete_doubleArray(doubleArray *self){
  delete [] self;
}
SWIGINTERN double doubleArray_getitem(doubleArray *self,size_t index){
  return self[index];
}
SWIGINTERN void doubleArray_setitem(doubleArray *self,size_t index,double value){
  self[index] = value;
}
SWIGINTERN double *doubleArray_cast(doubleArray *self){
  return self;
}
SWIGINTERN doubleArray *doubleArray_frompointer(double *t){
  return (doubleArray *) t;
}

typedef int intArray;

SWIGINTERN intArray *new_intArray(size_t nelements){
  return new int[nelements]();
}
SWIGINTERN void delete_intArray(intArray *self){
  delete [] self;
}
SWIGINTERN int intArray_getitem(intArray *self,size_t index){
  return self[index];
}
SWIGINTERN void intArray_setitem(intArray *self,size_t index,int value){
  self[index] = value;
}
SWIGINTERN int *intArray_cast(intArray *self){
  return self;
}
SWIGINTERN intArray *intArray_frompointer(int *t){
  return (intArray *) t;
}

typedef double DoublePointer;

SWIGINTERN DoublePointer *new_DoublePointer(){
  return new double();
}
SWIGINTERN void delete_DoublePointer(DoublePointer *self){
  delete self;
}
SWIGINTERN void DoublePointer_assign(DoublePointer *self,double value){
  *self = value;
}
SWIGINTERN double DoublePointer_value(DoublePointer *self){
  return *self;
}
SWIGINTERN double *DoublePointer_cast(DoublePointer *self){
  return self;
}
SWIGINTERN DoublePointer *DoublePointer_frompointer(double *t){
  return (DoublePointer *) t;
}

#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< double > *new_std_vector_Sl_double_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_double_Sg__getitemcopy(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg__getitem(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__setitem(std::vector< double > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__AddRange(std::vector< double > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__GetRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Insert(std::vector< double > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__InsertRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveAt(std::vector< double > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_double_Sg__RemoveRange(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_double_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_0(std::vector< double > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_double_Sg__Reverse__SWIG_1(std::vector< double > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_double_Sg__SetRange(std::vector< double > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Contains(std::vector< double > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_double_Sg__IndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_double_Sg__LastIndexOf(std::vector< double > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_double_Sg__Remove(std::vector< double > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< int >::value_type const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }


#include "ompl/base/Cost.h"
#include "ompl/base/GenericParam.h"
#include "ompl/base/GoalTypes.h"
#include "ompl/base/Path.h"
#include "ompl/base/State.h"
#include "ompl/base/StateValidityChecker.h"
#include "ompl/base/ValidStateSampler.h"
#include "ompl/base/samplers/UniformValidStateSampler.h"
#include "ompl/base/samplers/GaussianValidStateSampler.h"
#include "ompl/base/samplers/ObstacleBasedValidStateSampler.h"
#include "ompl/base/samplers/MaximizeClearanceValidStateSampler.h"
#include "ompl/base/MotionValidator.h"
#include "ompl/base/DiscreteMotionValidator.h"
#include "ompl/base/PlannerData.h"
#include "ompl/base/PlannerTerminationCondition.h"
#include "ompl/base/PlannerStatus.h"
#include "ompl/base/Goal.h"
#include "ompl/base/ScopedState.h"
#include "ompl/base/SolutionNonExistenceProof.h"
#include "ompl/base/ProblemDefinition.h"
#include "ompl/base/Planner.h"
#include "ompl/base/ProjectionEvaluator.h"
#include "ompl/base/StateSampler.h"
#include "ompl/base/samplers/deterministic/DeterministicSequence.h"
#include "ompl/base/samplers/deterministic/HaltonSequence.h"
#include "ompl/base/samplers/deterministic/PrecomputedSequence.h"
#include "ompl/base/samplers/DeterministicStateSampler.h"
#include "ompl/base/samplers/InformedStateSampler.h"
#include "ompl/base/StateSpace.h"
#include "ompl/base/spaces/RealVectorBounds.h"
#include "ompl/base/spaces/RealVectorStateSpace.h"
#include "ompl/base/SpaceInformation.h"
#include "ompl/base/OptimizationObjective.h"
#include "ompl/base/objectives/StateCostIntegralObjective.h"
#include "ompl/base/objectives/MaximizeMinClearanceObjective.h"
#include "ompl/base/objectives/PathLengthOptimizationObjective.h"
#include "Determinism.h"



struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


      struct ValidStateSamplerAllocatorDirector {
        virtual ~ValidStateSamplerAllocatorDirector() {}
        virtual ompl::base::ValidStateSamplerPtr Invoke(const ompl::base::SpaceInformation *) = 0;
      };
    
SWIGINTERN std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *new_std_function_Sl_ompl_base_ValidStateSamplerPtr_Sp_ompl_base_SpaceInformation_SS_const_Sm__SP__Sg___SWIG_2(ValidStateSamplerAllocatorDirector *in){
            return new std::function<ompl::base::ValidStateSamplerPtr(const ompl::base::SpaceInformation *)>([=](/*@SWIG:std_function.i,26,FOR_EACH@*/ 
  const ompl::base::SpaceInformation *&& arg0
/*@SWIG@*/){
                  return in->Invoke(/*@SWIG:std_function.i,26,FOR_EACH@*/ 
  std::forward<const ompl::base::SpaceInformation *>(arg0)
/*@SWIG@*/);
            });
          }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ompl_base_wrap.h"

SwigDirector_StateValidityChecker::SwigDirector_StateValidityChecker(ompl::base::SpaceInformation *si) : ompl::base::StateValidityChecker(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_StateValidityChecker::SwigDirector_StateValidityChecker(ompl::base::SpaceInformationPtr const &si) : ompl::base::StateValidityChecker(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_StateValidityChecker::~SwigDirector_StateValidityChecker() {
  
}


bool SwigDirector_StateValidityChecker::isValid(ompl::base::State const *state) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jstate = 0 ;
  
  if (!swig_callbackisValid__SWIG_0) {
    Swig::DirectorPureVirtualException::raise("ompl::base::StateValidityChecker::isValid");
    return c_result;
  } else {
    jstate = (void *) state; 
    jresult = (unsigned int) swig_callbackisValid__SWIG_0(jstate);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_StateValidityChecker::isValid(ompl::base::State const *state,double &dist) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jstate = 0 ;
  void * jdist = 0 ;
  
  if (!swig_callbackisValid__SWIG_1) {
    return ompl::base::StateValidityChecker::isValid(state,dist);
  } else {
    jstate = (void *) state; 
    jdist = (double *) &dist; 
    jresult = (unsigned int) swig_callbackisValid__SWIG_1(jstate, jdist);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_StateValidityChecker::isValid(ompl::base::State const *state,double &dist,ompl::base::State *validState,bool &validStateAvailable) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jstate = 0 ;
  void * jdist = 0 ;
  void * jvalidState = 0 ;
  void * jvalidStateAvailable = 0 ;
  
  if (!swig_callbackisValid__SWIG_2) {
    return ompl::base::StateValidityChecker::isValid(state,dist,validState,validStateAvailable);
  } else {
    jstate = (void *) state; 
    jdist = (double *) &dist; 
    jvalidState = (void *) validState; 
    jvalidStateAvailable = (bool *) &validStateAvailable; 
    jresult = (unsigned int) swig_callbackisValid__SWIG_2(jstate, jdist, jvalidState, jvalidStateAvailable);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

double SwigDirector_StateValidityChecker::clearance(ompl::base::State const *arg0) const {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackclearance__SWIG_0) {
    return ompl::base::StateValidityChecker::clearance(arg0);
  } else {
    jarg0 = (void *) arg0; 
    jresult = (double) swig_callbackclearance__SWIG_0(jarg0);
    c_result = (double)jresult; 
  }
  return c_result;
}

double SwigDirector_StateValidityChecker::clearance(ompl::base::State const *state,ompl::base::State *arg1,bool &validStateAvailable) const {
  double c_result = SwigValueInit< double >() ;
  double jresult = 0 ;
  void * jstate = 0 ;
  void * jarg1 = 0 ;
  void * jvalidStateAvailable = 0 ;
  
  if (!swig_callbackclearance__SWIG_1) {
    return ompl::base::StateValidityChecker::clearance(state,arg1,validStateAvailable);
  } else {
    jstate = (void *) state; 
    jarg1 = (void *) arg1; 
    jvalidStateAvailable = (bool *) &validStateAvailable; 
    jresult = (double) swig_callbackclearance__SWIG_1(jstate, jarg1, jvalidStateAvailable);
    c_result = (double)jresult; 
  }
  return c_result;
}

bool SwigDirector_StateValidityChecker::operator ==(ompl::base::StateValidityChecker const &arg0) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackequal_to) {
    return ompl::base::StateValidityChecker::operator ==(arg0);
  } else {
    jarg0 = new std::shared_ptr< const ompl::base::StateValidityChecker > (&arg0 SWIG_NO_NULL_DELETER_0); 
    jresult = (unsigned int) swig_callbackequal_to(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_StateValidityChecker::swig_connect_director(SWIG_Callback0_t callbackisValid__SWIG_0, SWIG_Callback1_t callbackisValid__SWIG_1, SWIG_Callback2_t callbackisValid__SWIG_2, SWIG_Callback3_t callbackclearance__SWIG_0, SWIG_Callback4_t callbackclearance__SWIG_1, SWIG_Callback5_t callbackequal_to) {
  swig_callbackisValid__SWIG_0 = callbackisValid__SWIG_0;
  swig_callbackisValid__SWIG_1 = callbackisValid__SWIG_1;
  swig_callbackisValid__SWIG_2 = callbackisValid__SWIG_2;
  swig_callbackclearance__SWIG_0 = callbackclearance__SWIG_0;
  swig_callbackclearance__SWIG_1 = callbackclearance__SWIG_1;
  swig_callbackequal_to = callbackequal_to;
}

void SwigDirector_StateValidityChecker::swig_init_callbacks() {
  swig_callbackisValid__SWIG_0 = 0;
  swig_callbackisValid__SWIG_1 = 0;
  swig_callbackisValid__SWIG_2 = 0;
  swig_callbackclearance__SWIG_0 = 0;
  swig_callbackclearance__SWIG_1 = 0;
  swig_callbackequal_to = 0;
}

SwigDirector_ValidStateSampler::SwigDirector_ValidStateSampler(ompl::base::SpaceInformation const *si) : ompl::base::ValidStateSampler(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ValidStateSampler::~SwigDirector_ValidStateSampler() {
  
}


bool SwigDirector_ValidStateSampler::sample(ompl::base::State *state) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jstate = 0 ;
  
  if (!swig_callbacksample) {
    Swig::DirectorPureVirtualException::raise("ompl::base::ValidStateSampler::sample");
    return c_result;
  } else {
    jstate = (void *) state; 
    jresult = (unsigned int) swig_callbacksample(jstate);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_ValidStateSampler::sampleNear(ompl::base::State *state,ompl::base::State const *near,double distance) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jstate = 0 ;
  void * jnear = 0 ;
  double jdistance  ;
  
  if (!swig_callbacksampleNear) {
    Swig::DirectorPureVirtualException::raise("ompl::base::ValidStateSampler::sampleNear");
    return c_result;
  } else {
    jstate = (void *) state; 
    jnear = (void *) near; 
    jdistance = distance;
    jresult = (unsigned int) swig_callbacksampleNear(jstate, jnear, jdistance);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_ValidStateSampler::swig_connect_director(SWIG_Callback0_t callbacksample, SWIG_Callback1_t callbacksampleNear) {
  swig_callbacksample = callbacksample;
  swig_callbacksampleNear = callbacksampleNear;
}

void SwigDirector_ValidStateSampler::swig_init_callbacks() {
  swig_callbacksample = 0;
  swig_callbacksampleNear = 0;
}

SwigDirector_MotionValidator::SwigDirector_MotionValidator(ompl::base::SpaceInformation *si) : ompl::base::MotionValidator(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MotionValidator::SwigDirector_MotionValidator(ompl::base::SpaceInformationPtr const &si) : ompl::base::MotionValidator(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_MotionValidator::~SwigDirector_MotionValidator() {
  
}


bool SwigDirector_MotionValidator::checkMotion(ompl::base::State const *s1,ompl::base::State const *s2) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  
  if (!swig_callbackcheckMotion__SWIG_0) {
    Swig::DirectorPureVirtualException::raise("ompl::base::MotionValidator::checkMotion");
    return c_result;
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jresult = (unsigned int) swig_callbackcheckMotion__SWIG_0(js1, js2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_MotionValidator::checkMotion(ompl::base::State const *s1,ompl::base::State const *s2,std::pair< ompl::base::State *,double > &lastValid) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  void * jlastValid = 0 ;
  
  if (!swig_callbackcheckMotion__SWIG_1) {
    Swig::DirectorPureVirtualException::raise("ompl::base::MotionValidator::checkMotion");
    return c_result;
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jlastValid = (std::pair< ompl::base::State *,double > *) &lastValid; 
    jresult = (unsigned int) swig_callbackcheckMotion__SWIG_1(js1, js2, jlastValid);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_MotionValidator::swig_connect_director(SWIG_Callback0_t callbackcheckMotion__SWIG_0, SWIG_Callback1_t callbackcheckMotion__SWIG_1) {
  swig_callbackcheckMotion__SWIG_0 = callbackcheckMotion__SWIG_0;
  swig_callbackcheckMotion__SWIG_1 = callbackcheckMotion__SWIG_1;
}

void SwigDirector_MotionValidator::swig_init_callbacks() {
  swig_callbackcheckMotion__SWIG_0 = 0;
  swig_callbackcheckMotion__SWIG_1 = 0;
}

SwigDirector_OptimizationObjective::SwigDirector_OptimizationObjective(ompl::base::SpaceInformationPtr si) : ompl::base::OptimizationObjective(si), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OptimizationObjective::~SwigDirector_OptimizationObjective() {
  
}


bool SwigDirector_OptimizationObjective::isSatisfied(ompl::base::Cost c) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc  ;
  
  if (!swig_callbackisSatisfied) {
    return ompl::base::OptimizationObjective::isSatisfied(c);
  } else {
    jc = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c)); 
    jresult = (unsigned int) swig_callbackisSatisfied(jc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_OptimizationObjective::isCostBetterThan(ompl::base::Cost c1,ompl::base::Cost c2) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackisCostBetterThan) {
    return ompl::base::OptimizationObjective::isCostBetterThan(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (unsigned int) swig_callbackisCostBetterThan(jc1, jc2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_OptimizationObjective::isCostEquivalentTo(ompl::base::Cost c1,ompl::base::Cost c2) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackisCostEquivalentTo) {
    return ompl::base::OptimizationObjective::isCostEquivalentTo(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (unsigned int) swig_callbackisCostEquivalentTo(jc1, jc2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_OptimizationObjective::isFinite(ompl::base::Cost cost) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jcost  ;
  
  if (!swig_callbackisFinite) {
    return ompl::base::OptimizationObjective::isFinite(cost);
  } else {
    jcost = (void *)new ompl::base::Cost(SWIG_STD_MOVE(cost)); 
    jresult = (unsigned int) swig_callbackisFinite(jcost);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::betterCost(ompl::base::Cost c1,ompl::base::Cost c2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackbetterCost) {
    return ompl::base::OptimizationObjective::betterCost(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (void *) swig_callbackbetterCost(jc1, jc2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::stateCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackstateCost) {
    Swig::DirectorPureVirtualException::raise("ompl::base::OptimizationObjective::stateCost");
    return c_result;
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackstateCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::motionCost(ompl::base::State const *s1,ompl::base::State const *s2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  
  if (!swig_callbackmotionCost) {
    Swig::DirectorPureVirtualException::raise("ompl::base::OptimizationObjective::motionCost");
    return c_result;
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jresult = (void *) swig_callbackmotionCost(js1, js2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::combineCosts(ompl::base::Cost c1,ompl::base::Cost c2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackcombineCosts) {
    return ompl::base::OptimizationObjective::combineCosts(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (void *) swig_callbackcombineCosts(jc1, jc2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::identityCost() const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackidentityCost) {
    return ompl::base::OptimizationObjective::identityCost();
  } else {
    jresult = (void *) swig_callbackidentityCost();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::infiniteCost() const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackinfiniteCost) {
    return ompl::base::OptimizationObjective::infiniteCost();
  } else {
    jresult = (void *) swig_callbackinfiniteCost();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::initialCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackinitialCost) {
    return ompl::base::OptimizationObjective::initialCost(s);
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackinitialCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::terminalCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackterminalCost) {
    return ompl::base::OptimizationObjective::terminalCost(s);
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackterminalCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

bool SwigDirector_OptimizationObjective::isSymmetric() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisSymmetric) {
    return ompl::base::OptimizationObjective::isSymmetric();
  } else {
    jresult = (unsigned int) swig_callbackisSymmetric();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::averageStateCost(unsigned int numStates) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  unsigned int jnumStates  ;
  
  if (!swig_callbackaverageStateCost) {
    return ompl::base::OptimizationObjective::averageStateCost(numStates);
  } else {
    jnumStates = (unsigned int)numStates;
    jresult = (void *) swig_callbackaverageStateCost(jnumStates);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_OptimizationObjective::motionCostHeuristic(ompl::base::State const *s1,ompl::base::State const *s2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  
  if (!swig_callbackmotionCostHeuristic) {
    return ompl::base::OptimizationObjective::motionCostHeuristic(s1,s2);
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jresult = (void *) swig_callbackmotionCostHeuristic(js1, js2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::InformedSamplerPtr SwigDirector_OptimizationObjective::allocInformedStateSampler(ompl::base::ProblemDefinitionPtr const &probDefn,unsigned int maxNumberCalls) const {
  SwigValueWrapper< std::shared_ptr< ompl::base::InformedSampler > > c_result ;
  void * jresult = 0 ;
  void * jprobDefn = 0 ;
  unsigned int jmaxNumberCalls  ;
  
  if (!swig_callbackallocInformedStateSampler) {
    return ompl::base::OptimizationObjective::allocInformedStateSampler(probDefn,maxNumberCalls);
  } else {
    jprobDefn = probDefn ? new std::shared_ptr<  ompl::base::ProblemDefinition >(probDefn) : 0; 
    jmaxNumberCalls = (unsigned int)maxNumberCalls;
    jresult = (void *) swig_callbackallocInformedStateSampler(jprobDefn, jmaxNumberCalls);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::InformedSamplerPtr", 0);
      return c_result;
    }
    c_result = *(ompl::base::InformedSamplerPtr *)jresult; 
  }
  return c_result;
}

void SwigDirector_OptimizationObjective::print(std::ostream &out) const {
  void * j_out = 0 ;
  
  if (!swig_callback_print) {
    ompl::base::OptimizationObjective::print(out);
    return;
  } else {
    j_out = (std::ostream *) &out; 
    swig_callback_print(j_out);
  }
}

void SwigDirector_OptimizationObjective::swig_connect_director(SWIG_Callback0_t callbackisSatisfied, SWIG_Callback1_t callbackisCostBetterThan, SWIG_Callback2_t callbackisCostEquivalentTo, SWIG_Callback3_t callbackisFinite, SWIG_Callback4_t callbackbetterCost, SWIG_Callback5_t callbackstateCost, SWIG_Callback6_t callbackmotionCost, SWIG_Callback7_t callbackcombineCosts, SWIG_Callback8_t callbackidentityCost, SWIG_Callback9_t callbackinfiniteCost, SWIG_Callback10_t callbackinitialCost, SWIG_Callback11_t callbackterminalCost, SWIG_Callback12_t callbackisSymmetric, SWIG_Callback13_t callbackaverageStateCost, SWIG_Callback14_t callbackmotionCostHeuristic, SWIG_Callback15_t callbackallocInformedStateSampler, SWIG_Callback16_t callback_print) {
  swig_callbackisSatisfied = callbackisSatisfied;
  swig_callbackisCostBetterThan = callbackisCostBetterThan;
  swig_callbackisCostEquivalentTo = callbackisCostEquivalentTo;
  swig_callbackisFinite = callbackisFinite;
  swig_callbackbetterCost = callbackbetterCost;
  swig_callbackstateCost = callbackstateCost;
  swig_callbackmotionCost = callbackmotionCost;
  swig_callbackcombineCosts = callbackcombineCosts;
  swig_callbackidentityCost = callbackidentityCost;
  swig_callbackinfiniteCost = callbackinfiniteCost;
  swig_callbackinitialCost = callbackinitialCost;
  swig_callbackterminalCost = callbackterminalCost;
  swig_callbackisSymmetric = callbackisSymmetric;
  swig_callbackaverageStateCost = callbackaverageStateCost;
  swig_callbackmotionCostHeuristic = callbackmotionCostHeuristic;
  swig_callbackallocInformedStateSampler = callbackallocInformedStateSampler;
  swig_callback_print = callback_print;
}

void SwigDirector_OptimizationObjective::swig_init_callbacks() {
  swig_callbackisSatisfied = 0;
  swig_callbackisCostBetterThan = 0;
  swig_callbackisCostEquivalentTo = 0;
  swig_callbackisFinite = 0;
  swig_callbackbetterCost = 0;
  swig_callbackstateCost = 0;
  swig_callbackmotionCost = 0;
  swig_callbackcombineCosts = 0;
  swig_callbackidentityCost = 0;
  swig_callbackinfiniteCost = 0;
  swig_callbackinitialCost = 0;
  swig_callbackterminalCost = 0;
  swig_callbackisSymmetric = 0;
  swig_callbackaverageStateCost = 0;
  swig_callbackmotionCostHeuristic = 0;
  swig_callbackallocInformedStateSampler = 0;
  swig_callback_print = 0;
}

SwigDirector_StateCostIntegralObjective::SwigDirector_StateCostIntegralObjective(ompl::base::SpaceInformationPtr const &si,bool enableMotionCostInterpolation) : ompl::base::StateCostIntegralObjective(si, enableMotionCostInterpolation), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_StateCostIntegralObjective::~SwigDirector_StateCostIntegralObjective() {
  
}


bool SwigDirector_StateCostIntegralObjective::isSatisfied(ompl::base::Cost c) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc  ;
  
  if (!swig_callbackisSatisfied) {
    return ompl::base::OptimizationObjective::isSatisfied(c);
  } else {
    jc = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c)); 
    jresult = (unsigned int) swig_callbackisSatisfied(jc);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_StateCostIntegralObjective::isCostBetterThan(ompl::base::Cost c1,ompl::base::Cost c2) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackisCostBetterThan) {
    return ompl::base::OptimizationObjective::isCostBetterThan(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (unsigned int) swig_callbackisCostBetterThan(jc1, jc2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_StateCostIntegralObjective::isCostEquivalentTo(ompl::base::Cost c1,ompl::base::Cost c2) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackisCostEquivalentTo) {
    return ompl::base::OptimizationObjective::isCostEquivalentTo(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (unsigned int) swig_callbackisCostEquivalentTo(jc1, jc2);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_StateCostIntegralObjective::isFinite(ompl::base::Cost cost) const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jcost  ;
  
  if (!swig_callbackisFinite) {
    return ompl::base::OptimizationObjective::isFinite(cost);
  } else {
    jcost = (void *)new ompl::base::Cost(SWIG_STD_MOVE(cost)); 
    jresult = (unsigned int) swig_callbackisFinite(jcost);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::betterCost(ompl::base::Cost c1,ompl::base::Cost c2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackbetterCost) {
    return ompl::base::OptimizationObjective::betterCost(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (void *) swig_callbackbetterCost(jc1, jc2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::stateCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackstateCost) {
    return ompl::base::StateCostIntegralObjective::stateCost(s);
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackstateCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::motionCost(ompl::base::State const *s1,ompl::base::State const *s2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  
  if (!swig_callbackmotionCost) {
    return ompl::base::StateCostIntegralObjective::motionCost(s1,s2);
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jresult = (void *) swig_callbackmotionCost(js1, js2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::combineCosts(ompl::base::Cost c1,ompl::base::Cost c2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * jc1  ;
  void * jc2  ;
  
  if (!swig_callbackcombineCosts) {
    return ompl::base::OptimizationObjective::combineCosts(c1,c2);
  } else {
    jc1 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c1)); 
    jc2 = (void *)new ompl::base::Cost(SWIG_STD_MOVE(c2)); 
    jresult = (void *) swig_callbackcombineCosts(jc1, jc2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::identityCost() const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackidentityCost) {
    return ompl::base::OptimizationObjective::identityCost();
  } else {
    jresult = (void *) swig_callbackidentityCost();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::infiniteCost() const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackinfiniteCost) {
    return ompl::base::OptimizationObjective::infiniteCost();
  } else {
    jresult = (void *) swig_callbackinfiniteCost();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::initialCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackinitialCost) {
    return ompl::base::OptimizationObjective::initialCost(s);
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackinitialCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::terminalCost(ompl::base::State const *s) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js = 0 ;
  
  if (!swig_callbackterminalCost) {
    return ompl::base::OptimizationObjective::terminalCost(s);
  } else {
    js = (void *) s; 
    jresult = (void *) swig_callbackterminalCost(js);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

bool SwigDirector_StateCostIntegralObjective::isSymmetric() const {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackisSymmetric) {
    return ompl::base::OptimizationObjective::isSymmetric();
  } else {
    jresult = (unsigned int) swig_callbackisSymmetric();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::averageStateCost(unsigned int numStates) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  unsigned int jnumStates  ;
  
  if (!swig_callbackaverageStateCost) {
    return ompl::base::OptimizationObjective::averageStateCost(numStates);
  } else {
    jnumStates = (unsigned int)numStates;
    jresult = (void *) swig_callbackaverageStateCost(jnumStates);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::Cost SwigDirector_StateCostIntegralObjective::motionCostHeuristic(ompl::base::State const *s1,ompl::base::State const *s2) const {
  ompl::base::Cost c_result ;
  void * jresult = 0 ;
  void * js1 = 0 ;
  void * js2 = 0 ;
  
  if (!swig_callbackmotionCostHeuristic) {
    return ompl::base::OptimizationObjective::motionCostHeuristic(s1,s2);
  } else {
    js1 = (void *) s1; 
    js2 = (void *) s2; 
    jresult = (void *) swig_callbackmotionCostHeuristic(js1, js2);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::Cost", 0);
      return c_result;
    }
    c_result = *(ompl::base::Cost *)jresult; 
  }
  return c_result;
}

ompl::base::InformedSamplerPtr SwigDirector_StateCostIntegralObjective::allocInformedStateSampler(ompl::base::ProblemDefinitionPtr const &probDefn,unsigned int maxNumberCalls) const {
  SwigValueWrapper< std::shared_ptr< ompl::base::InformedSampler > > c_result ;
  void * jresult = 0 ;
  void * jprobDefn = 0 ;
  unsigned int jmaxNumberCalls  ;
  
  if (!swig_callbackallocInformedStateSampler) {
    return ompl::base::OptimizationObjective::allocInformedStateSampler(probDefn,maxNumberCalls);
  } else {
    jprobDefn = probDefn ? new std::shared_ptr<  ompl::base::ProblemDefinition >(probDefn) : 0; 
    jmaxNumberCalls = (unsigned int)maxNumberCalls;
    jresult = (void *) swig_callbackallocInformedStateSampler(jprobDefn, jmaxNumberCalls);
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type ompl::base::InformedSamplerPtr", 0);
      return c_result;
    }
    c_result = *(ompl::base::InformedSamplerPtr *)jresult; 
  }
  return c_result;
}

void SwigDirector_StateCostIntegralObjective::print(std::ostream &out) const {
  void * j_out = 0 ;
  
  if (!swig_callback_print) {
    ompl::base::OptimizationObjective::print(out);
    return;
  } else {
    j_out = (std::ostream *) &out; 
    swig_callback_print(j_out);
  }
}

void SwigDirector_StateCostIntegralObjective::swig_connect_director(SWIG_Callback0_t callbackisSatisfied, SWIG_Callback1_t callbackisCostBetterThan, SWIG_Callback2_t callbackisCostEquivalentTo, SWIG_Callback3_t callbackisFinite, SWIG_Callback4_t callbackbetterCost, SWIG_Callback5_t callbackstateCost, SWIG_Callback6_t callbackmotionCost, SWIG_Callback7_t callbackcombineCosts, SWIG_Callback8_t callbackidentityCost, SWIG_Callback9_t callbackinfiniteCost, SWIG_Callback10_t callbackinitialCost, SWIG_Callback11_t callbackterminalCost, SWIG_Callback12_t callbackisSymmetric, SWIG_Callback13_t callbackaverageStateCost, SWIG_Callback14_t callbackmotionCostHeuristic, SWIG_Callback15_t callbackallocInformedStateSampler, SWIG_Callback16_t callback_print) {
  swig_callbackisSatisfied = callbackisSatisfied;
  swig_callbackisCostBetterThan = callbackisCostBetterThan;
  swig_callbackisCostEquivalentTo = callbackisCostEquivalentTo;
  swig_callbackisFinite = callbackisFinite;
  swig_callbackbetterCost = callbackbetterCost;
  swig_callbackstateCost = callbackstateCost;
  swig_callbackmotionCost = callbackmotionCost;
  swig_callbackcombineCosts = callbackcombineCosts;
  swig_callbackidentityCost = callbackidentityCost;
  swig_callbackinfiniteCost = callbackinfiniteCost;
  swig_callbackinitialCost = callbackinitialCost;
  swig_callbackterminalCost = callbackterminalCost;
  swig_callbackisSymmetric = callbackisSymmetric;
  swig_callbackaverageStateCost = callbackaverageStateCost;
  swig_callbackmotionCostHeuristic = callbackmotionCostHeuristic;
  swig_callbackallocInformedStateSampler = callbackallocInformedStateSampler;
  swig_callback_print = callback_print;
}

void SwigDirector_StateCostIntegralObjective::swig_init_callbacks() {
  swig_callbackisSatisfied = 0;
  swig_callbackisCostBetterThan = 0;
  swig_callbackisCostEquivalentTo = 0;
  swig_callbackisFinite = 0;
  swig_callbackbetterCost = 0;
  swig_callbackstateCost = 0;
  swig_callbackmotionCost = 0;
  swig_callbackcombineCosts = 0;
  swig_callbackidentityCost = 0;
  swig_callbackinfiniteCost = 0;
  swig_callbackinitialCost = 0;
  swig_callbackterminalCost = 0;
  swig_callbackisSymmetric = 0;
  swig_callbackaverageStateCost = 0;
  swig_callbackmotionCostHeuristic = 0;
  swig_callbackallocInformedStateSampler = 0;
  swig_callback_print = 0;
}

SwigDirector_ValidStateSamplerAllocatorDirector::SwigDirector_ValidStateSamplerAllocatorDirector() : ValidStateSamplerAllocatorDirector(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ValidStateSamplerAllocatorDirector::~SwigDirector_ValidStateSamplerAllocatorDirector() {
  
}


ompl::base::ValidStateSamplerPtr SwigDirector_ValidStateSamplerAllocatorDirector::Invoke(ompl::base::SpaceInformation const *arg0) {
  ompl::base::ValidStateSamplerPtr c_result ;
  void * jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackInvoke) {
    Swig::DirectorPureVirtualException::raise("ValidStateSamplerAllocatorDirector::Invoke");
    return c_result;
  } else {
    jarg0 = arg0 ? new std::shared_ptr< const ompl::base::SpaceInformation >(arg0 SWIG_NO_NULL_DELETER_0) : 0; 
    jresult = (void *) swig_callbackInvoke(jarg0);
    if (jresult) {
      std::shared_ptr<  ompl::base::ValidStateSampler > *smartarg = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jresult;
      c_result = *smartarg;
    }
    
  }
  return c_result;
}

void SwigDirector_ValidStateSamplerAllocatorDirector::swig_connect_director(SWIG_Callback0_t callbackInvoke) {
  swig_callbackInvoke = callbackInvoke;
}

void SwigDirector_ValidStateSamplerAllocatorDirector::swig_init_callbacks() {
  swig_callbackInvoke = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_now___() {
  void * jresult ;
  ompl::time::point result;
  
  {
    try {
      result = ompl::time::now();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::time::point(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_seconds__SWIG_0___(double jarg1) {
  void * jresult ;
  double arg1 ;
  ompl::time::duration result;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = ompl::time::seconds(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::time::duration(result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_seconds__SWIG_1___(void * jarg1) {
  double jresult ;
  ompl::time::duration *arg1 = 0 ;
  double result;
  
  arg1 = (ompl::time::duration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::duration const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)ompl::time::seconds((std::chrono::system_clock::duration const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_as_string___(void * jarg1) {
  void * jresult ;
  ompl::time::point *arg1 = 0 ;
  std::string result;
  
  arg1 = (ompl::time::point *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::point const & is null", 0);
    return 0;
  } 
  {
    try {
      result = ompl::time::as_string((std::chrono::system_clock::time_point const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::string(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ProgressDisplay__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::ostream *arg1 = 0 ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ProgressDisplay__SWIG_1___() {
  void * jresult ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  {
    try {
      result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProgressDisplay_count___(void * jarg1) {
  unsigned int jresult ;
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::time::ProgressDisplay const *)arg1)->count();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ProgressDisplay___(void * jarg1) {
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ProlateHyperspheroid___(unsigned int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  unsigned int arg1 ;
  double *arg2 = (double *) (double *)0 ;
  double *arg3 = (double *) (double *)0 ;
  ompl::ProlateHyperspheroid *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      result = (ompl::ProlateHyperspheroid *)new ompl::ProlateHyperspheroid(arg1,(double const (*))arg2,(double const (*))arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_setTransverseDiameter___(void * jarg1, double jarg2) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setTransverseDiameter(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_transform___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  double *arg3 = (double *) (double *)0 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      ((ompl::ProlateHyperspheroid const *)arg1)->transform((double const (*))arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_isInPhs___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  bool result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (bool)((ompl::ProlateHyperspheroid const *)arg1)->isInPhs((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_isOnPhs___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  bool result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (bool)((ompl::ProlateHyperspheroid const *)arg1)->isOnPhs((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getPhsDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::ProlateHyperspheroid const *)arg1)->getPhsDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getPhsMeasure__SWIG_0___(void * jarg1) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPhsMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getPhsMeasure__SWIG_1___(void * jarg1, double jarg2) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPhsMeasure(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getMinTransverseDiameter___(void * jarg1) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getMinTransverseDiameter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getPathLength___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  double result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      result = (double)((ompl::ProlateHyperspheroid const *)arg1)->getPathLength((double const (*))arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProlateHyperspheroid_getDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::ProlateHyperspheroid const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ProlateHyperspheroid___(void * jarg1) {
  ompl::ProlateHyperspheroid *arg1 = (ompl::ProlateHyperspheroid *) 0 ;
  
  arg1 = (ompl::ProlateHyperspheroid *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RNG__SWIG_0___() {
  void * jresult ;
  ompl::RNG *result = 0 ;
  
  {
    try {
      result = (ompl::RNG *)new ompl::RNG();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RNG__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::uint_fast32_t arg1 ;
  std::uint_fast32_t *argp1 ;
  ompl::RNG *result = 0 ;
  
  argp1 = (std::uint_fast32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = (ompl::RNG *)new ompl::RNG(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_uniform01___(void * jarg1) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (double)(arg1)->uniform01();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_uniformReal___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->uniformReal(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_RNG_uniformInt___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->uniformInt(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_RNG_uniformBool___(void * jarg1) {
  unsigned int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  bool result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (bool)(arg1)->uniformBool();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_gaussian01___(void * jarg1) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = (double)(arg1)->gaussian01();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_gaussian___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->gaussian(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_halfNormalReal__SWIG_0___(void * jarg1, double jarg2, double jarg3, double jarg4) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (double)(arg1)->halfNormalReal(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RNG_halfNormalReal__SWIG_1___(void * jarg1, double jarg2, double jarg3) {
  double jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      result = (double)(arg1)->halfNormalReal(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_RNG_halfNormalInt__SWIG_0___(void * jarg1, int jarg2, int jarg3, double jarg4) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (int)(arg1)->halfNormalInt(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_RNG_halfNormalInt__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (int)(arg1)->halfNormalInt(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_quaternion___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->quaternion(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_eulerRPY___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      (arg1)->eulerRPY(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_setSeed___(void * jarg1) {
  std::uint_fast32_t arg1 ;
  std::uint_fast32_t *argp1 ;
  
  argp1 = (std::uint_fast32_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return ;
  }
  arg1 = *argp1; 
  {
    try {
      ompl::RNG::setSeed(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RNG_getSeed___() {
  void * jresult ;
  std::uint_fast32_t result;
  
  {
    try {
      result = ompl::RNG::getSeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::uint_fast32_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_setLocalSeed___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::uint_fast32_t arg2 ;
  std::uint_fast32_t *argp2 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  argp2 = (std::uint_fast32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::uint_fast32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setLocalSeed(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RNG_getLocalSeed___(void * jarg1) {
  void * jresult ;
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::uint_fast32_t result;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      result = ((ompl::RNG const *)arg1)->getLocalSeed();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::uint_fast32_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_uniformNormalVector___(void * jarg1, void * jarg2) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->uniformNormalVector(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_uniformInBall___(void * jarg1, double jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  double arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->uniformInBall(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_uniformProlateHyperspheroidSurface___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::shared_ptr< ompl::ProlateHyperspheroid const > *arg2 = 0 ;
  double *arg3 = (double *) (double *)0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::shared_ptr< ompl::ProlateHyperspheroid const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ompl::ProlateHyperspheroid const > const & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->uniformProlateHyperspheroidSurface((std::shared_ptr< ompl::ProlateHyperspheroid const > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RNG_uniformProlateHyperspheroid___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  std::shared_ptr< ompl::ProlateHyperspheroid const > *arg2 = 0 ;
  double *arg3 = (double *) (double *)0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  arg2 = (std::shared_ptr< ompl::ProlateHyperspheroid const > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< ompl::ProlateHyperspheroid const > const & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3; 
  {
    try {
      (arg1)->uniformProlateHyperspheroid((std::shared_ptr< ompl::ProlateHyperspheroid const > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RNG___(void * jarg1) {
  ompl::RNG *arg1 = (ompl::RNG *) 0 ;
  
  arg1 = (ompl::RNG *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_doubleArray___(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  doubleArray *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (doubleArray *)new_doubleArray(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_doubleArray___(void * jarg1) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  
  arg1 = (doubleArray *)jarg1; 
  {
    try {
      delete_doubleArray(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_doubleArray_getitem___(void * jarg1, unsigned int jarg2) {
  double jresult ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  size_t arg2 ;
  double result;
  
  arg1 = (doubleArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (double)doubleArray_getitem(arg1,SWIG_STD_MOVE(arg2));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleArray_setitem___(void * jarg1, unsigned int jarg2, double jarg3) {
  doubleArray *arg1 = (doubleArray *) 0 ;
  size_t arg2 ;
  double arg3 ;
  
  arg1 = (doubleArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      doubleArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_doubleArray__cast___(void * jarg1) {
  void * jresult ;
  doubleArray *arg1 = (doubleArray *) 0 ;
  double *result = 0 ;
  
  arg1 = (doubleArray *)jarg1; 
  {
    try {
      result = (double *)doubleArray_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_doubleArray_frompointer___(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  doubleArray *result = 0 ;
  
  arg1 = (double *)jarg1; 
  {
    try {
      result = (doubleArray *)doubleArray_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_intArray___(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  intArray *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (intArray *)new_intArray(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_intArray___(void * jarg1) {
  intArray *arg1 = (intArray *) 0 ;
  
  arg1 = (intArray *)jarg1; 
  {
    try {
      delete_intArray(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_intArray_getitem___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  intArray *arg1 = (intArray *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (intArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (int)intArray_getitem(arg1,SWIG_STD_MOVE(arg2));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intArray_setitem___(void * jarg1, unsigned int jarg2, int jarg3) {
  intArray *arg1 = (intArray *) 0 ;
  size_t arg2 ;
  int arg3 ;
  
  arg1 = (intArray *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      intArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_intArray__cast___(void * jarg1) {
  void * jresult ;
  intArray *arg1 = (intArray *) 0 ;
  int *result = 0 ;
  
  arg1 = (intArray *)jarg1; 
  {
    try {
      result = (int *)intArray_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_intArray_frompointer___(void * jarg1) {
  void * jresult ;
  int *arg1 = (int *) 0 ;
  intArray *result = 0 ;
  
  arg1 = (int *)jarg1; 
  {
    try {
      result = (intArray *)intArray_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_DoublePointer___() {
  void * jresult ;
  DoublePointer *result = 0 ;
  
  {
    try {
      result = (DoublePointer *)new_DoublePointer();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_DoublePointer___(void * jarg1) {
  DoublePointer *arg1 = (DoublePointer *) 0 ;
  
  arg1 = (DoublePointer *)jarg1; 
  {
    try {
      delete_DoublePointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_DoublePointer_assign___(void * jarg1, double jarg2) {
  DoublePointer *arg1 = (DoublePointer *) 0 ;
  double arg2 ;
  
  arg1 = (DoublePointer *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      DoublePointer_assign(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_DoublePointer_value___(void * jarg1) {
  double jresult ;
  DoublePointer *arg1 = (DoublePointer *) 0 ;
  double result;
  
  arg1 = (DoublePointer *)jarg1; 
  {
    try {
      result = (double)DoublePointer_value(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_DoublePointer__cast___(void * jarg1) {
  void * jresult ;
  DoublePointer *arg1 = (DoublePointer *) 0 ;
  double *result = 0 ;
  
  arg1 = (DoublePointer *)jarg1; 
  {
    try {
      result = (double *)DoublePointer_cast(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_DoublePointer_frompointer___(void * jarg1) {
  void * jresult ;
  double *arg1 = (double *) 0 ;
  DoublePointer *result = 0 ;
  
  arg1 = (double *)jarg1; 
  {
    try {
      result = (DoublePointer *)DoublePointer_frompointer(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_doubleVector__SWIG_0___() {
  void * jresult ;
  std::vector< double > *result = 0 ;
  
  {
    try {
      result = (std::vector< double > *)new std::vector< double >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_doubleVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< double > *arg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_Clear___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_Add___(void * jarg1, double jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_doubleVector_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_doubleVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      result = (bool)((std::vector< double > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_doubleVector_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      result = ((std::vector< double > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_doubleVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< double > *)new_std_vector_Sl_double_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_doubleVector_getitemcopy___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (double)std_vector_Sl_double_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_doubleVector_getitem___(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_setitem___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__setitem(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_double_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_doubleVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_double_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_Insert___(void * jarg1, int jarg2, double jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__Insert(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_double_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_doubleVector_Repeat___(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_double_Sg__Repeat((double const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      std_vector_Sl_double_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_double_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_doubleVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_double_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_doubleVector_Contains___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_double_Sg__Contains(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_doubleVector_IndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_double_Sg__IndexOf(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_doubleVector_LastIndexOf___(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_double_Sg__LastIndexOf(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_doubleVector_Remove___(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< double > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_double_Sg__Remove(arg1,(double const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_doubleVector___(void * jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = (std::vector< double > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_intVector__SWIG_0___() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  {
    try {
      result = (std::vector< int > *)new std::vector< int >();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_intVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_Clear___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_Add___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_intVector_size___(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_intVector_empty___(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      result = (bool)((std::vector< int > const *)arg1)->empty();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_intVector_capacity___(void * jarg1) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      result = ((std::vector< int > const *)arg1)->capacity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_reserve___(void * jarg1, unsigned int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_intVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_intVector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_intVector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_intVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_intVector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_intVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_intVector_Contains___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_intVector_IndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_intVector_LastIndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_intVector_Remove___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_intVector___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_Cost__SWIG_0___(double jarg1) {
  void * jresult ;
  double arg1 ;
  ompl::base::Cost *result = 0 ;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = (ompl::base::Cost *)new ompl::base::Cost(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_Cost__SWIG_1___() {
  void * jresult ;
  ompl::base::Cost *result = 0 ;
  
  {
    try {
      result = (ompl::base::Cost *)new ompl::base::Cost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_Cost_value___(void * jarg1) {
  double jresult ;
  ompl::base::Cost *arg1 = (ompl::base::Cost *) 0 ;
  double result;
  
  arg1 = (ompl::base::Cost *)jarg1; 
  {
    try {
      result = (double)((ompl::base::Cost const *)arg1)->value();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_Cost___(void * jarg1) {
  ompl::base::Cost *arg1 = (ompl::base::Cost *) 0 ;
  
  arg1 = (ompl::base::Cost *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_GenericParam___(void * jarg1) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_GenericParam_getName___(void * jarg1) {
  const char * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  {
    try {
      result = (std::string *) &((ompl::base::GenericParam const *)arg1)->getName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_GenericParam_setName___(void * jarg1, const char * jarg2) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_GenericParam_setValue___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)(arg1)->setValue((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_GenericParam_getValue___(void * jarg1) {
  const char * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string result;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  {
    try {
      result = ((ompl::base::GenericParam const *)arg1)->getValue();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_GenericParam_setRangeSuggestion___(void * jarg1, const char * jarg2) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setRangeSuggestion((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_GenericParam_getRangeSuggestion___(void * jarg1) {
  const char * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  {
    try {
      result = (std::string *) &((ompl::base::GenericParam const *)arg1)->getRangeSuggestion();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_add___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::GenericParamPtr *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::GenericParamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::GenericParamPtr const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->add((ompl::base::GenericParamPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_remove___(void * jarg1, const char * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->remove((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_include__SWIG_0___(void * jarg1, void * jarg2, const char * jarg3) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::ParamSet *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::ParamSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ParamSet const & is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->include((ompl::base::ParamSet const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_include__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::ParamSet *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::ParamSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ParamSet const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->include((ompl::base::ParamSet const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_setParam___(void * jarg1, const char * jarg2, const char * jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (bool)(arg1)->setParam((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParam__SWIG_0___(void * jarg1, const char * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::ParamSet const *)arg1)->getParam((std::string const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_setParams__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (bool)(arg1)->setParams((std::map< std::string,std::string > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_setParams__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->setParams((std::map< std::string,std::string > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParams__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ParamSet const *)arg1)->getParams(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParamNames___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ParamSet const *)arg1)->getParamNames(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParamValues___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ParamSet const *)arg1)->getParamValues(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParams__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,ompl::base::GenericParamPtr > *result = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  {
    try {
      result = (std::map< std::string,ompl::base::GenericParamPtr > *) &((ompl::base::ParamSet const *)arg1)->getParams();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ParamSet_getParam__SWIG_1___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  ompl::base::GenericParamPtr *result = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (ompl::base::GenericParamPtr *) &((ompl::base::ParamSet const *)arg1)->getParam((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_hasParam___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((ompl::base::ParamSet const *)arg1)->hasParam((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ParamSet_size___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  {
    try {
      result = ((ompl::base::ParamSet const *)arg1)->size();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet_clear___(void * jarg1) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ParamSet__print___(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ParamSet const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ParamSet___() {
  void * jresult ;
  ompl::base::ParamSet *result = 0 ;
  
  {
    try {
      result = (ompl::base::ParamSet *)new ompl::base::ParamSet();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ParamSet___(void * jarg1) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_Path___(void * jarg1) {
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::shared_ptr< ompl::base::Path > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Path_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::shared_ptr< ompl::base::Path const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::Path const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_Path_length___(void * jarg1) {
  double jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::shared_ptr< ompl::base::Path const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::Path const *)arg1)->length();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Path_cost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::Path const > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  {
    try {
      result = ((ompl::base::Path const *)arg1)->cost((ompl::base::OptimizationObjectivePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Path_check___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::shared_ptr< ompl::base::Path const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::Path const *)arg1)->check();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Path__print___(void * jarg1, void * jarg2) {
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::Path const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Path > *)jarg1;
  arg1 = (ompl::base::Path *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::Path const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_CompoundState___() {
  void * jresult ;
  ompl::base::CompoundState *result = 0 ;
  
  {
    try {
      result = (ompl::base::CompoundState *)new ompl::base::CompoundState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_CompoundState___(void * jarg1) {
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundState_components_set___(void * jarg1, void * jarg2) {
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  ompl::base::State **arg2 = (ompl::base::State **) 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  arg2 = (ompl::base::State **)jarg2; 
  {
    try {
      if (arg1) (arg1)->components = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundState_components_get___(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  ompl::base::State **result = 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  {
    try {
      result = (ompl::base::State **) ((arg1)->components);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateValidityCheckerSpecs___() {
  void * jresult ;
  ompl::base::StateValidityCheckerSpecs *result = 0 ;
  
  {
    try {
      result = (ompl::base::StateValidityCheckerSpecs *)new ompl::base::StateValidityCheckerSpecs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateValidityCheckerSpecs_clearanceComputationType_set___(void * jarg1, int jarg2) {
  ompl::base::StateValidityCheckerSpecs *arg1 = (ompl::base::StateValidityCheckerSpecs *) 0 ;
  ompl::base::StateValidityCheckerSpecs::ClearanceComputationType arg2 ;
  
  arg1 = (ompl::base::StateValidityCheckerSpecs *)jarg1; 
  arg2 = (ompl::base::StateValidityCheckerSpecs::ClearanceComputationType)jarg2; 
  {
    try {
      if (arg1) (arg1)->clearanceComputationType = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_StateValidityCheckerSpecs_clearanceComputationType_get___(void * jarg1) {
  int jresult ;
  ompl::base::StateValidityCheckerSpecs *arg1 = (ompl::base::StateValidityCheckerSpecs *) 0 ;
  ompl::base::StateValidityCheckerSpecs::ClearanceComputationType result;
  
  arg1 = (ompl::base::StateValidityCheckerSpecs *)jarg1; 
  {
    try {
      result = (ompl::base::StateValidityCheckerSpecs::ClearanceComputationType) ((arg1)->clearanceComputationType);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateValidityCheckerSpecs_hasValidDirectionComputation_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::StateValidityCheckerSpecs *arg1 = (ompl::base::StateValidityCheckerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::StateValidityCheckerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->hasValidDirectionComputation = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityCheckerSpecs_hasValidDirectionComputation_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateValidityCheckerSpecs *arg1 = (ompl::base::StateValidityCheckerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateValidityCheckerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->hasValidDirectionComputation);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateValidityCheckerSpecs___(void * jarg1) {
  ompl::base::StateValidityCheckerSpecs *arg1 = (ompl::base::StateValidityCheckerSpecs *) 0 ;
  
  arg1 = (ompl::base::StateValidityCheckerSpecs *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateValidityChecker__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::StateValidityChecker *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateValidityChecker *)new SwigDirector_StateValidityChecker(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::StateValidityChecker >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateValidityChecker___(void * jarg1) {
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_isValid__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->isValid((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_isValid__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->isValid((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_isValidSwigExplicitStateValidityChecker__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->ompl::base::StateValidityChecker::isValid((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_isValid__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  bool *arg5 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (bool *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->isValid((ompl::base::State const *)arg2,*arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_isValidSwigExplicitStateValidityChecker__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  bool *arg5 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (bool *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->ompl::base::StateValidityChecker::isValid((ompl::base::State const *)arg2,*arg3,arg4,*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_clearance__SWIG_0___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (double)((ompl::base::StateValidityChecker const *)arg1)->clearance((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_clearanceSwigExplicitStateValidityChecker__SWIG_0___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (double)((ompl::base::StateValidityChecker const *)arg1)->ompl::base::StateValidityChecker::clearance((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_clearance__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  double jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  bool *arg4 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (bool *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((ompl::base::StateValidityChecker const *)arg1)->clearance((ompl::base::State const *)arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_clearanceSwigExplicitStateValidityChecker__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  double jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  bool *arg4 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (bool *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((ompl::base::StateValidityChecker const *)arg1)->ompl::base::StateValidityChecker::clearance((ompl::base::State const *)arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_getSpecs___(void * jarg1) {
  void * jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  ompl::base::StateValidityCheckerSpecs *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateValidityCheckerSpecs *) &((ompl::base::StateValidityChecker const *)arg1)->getSpecs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_equal_to___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::StateValidityChecker *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::StateValidityChecker *)(((std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg2) ? ((std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityChecker const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->operator ==((ompl::base::StateValidityChecker const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_equal_toSwigExplicitStateValidityChecker___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateValidityChecker *arg1 = (ompl::base::StateValidityChecker *) 0 ;
  ompl::base::StateValidityChecker *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg1;
  arg1 = (ompl::base::StateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::StateValidityChecker *)(((std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg2) ? ((std::shared_ptr< const ompl::base::StateValidityChecker > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityChecker const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::StateValidityChecker const *)arg1)->ompl::base::StateValidityChecker::operator ==((ompl::base::StateValidityChecker const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateValidityChecker_director_connect___(void *objarg, SwigDirector_StateValidityChecker::SWIG_Callback0_t callback0, SwigDirector_StateValidityChecker::SWIG_Callback1_t callback1, SwigDirector_StateValidityChecker::SWIG_Callback2_t callback2, SwigDirector_StateValidityChecker::SWIG_Callback3_t callback3, SwigDirector_StateValidityChecker::SWIG_Callback4_t callback4, SwigDirector_StateValidityChecker::SWIG_Callback5_t callback5) {
  std::shared_ptr< ompl::base::StateValidityChecker > *obj = (std::shared_ptr< ompl::base::StateValidityChecker > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StateValidityChecker *director = static_cast<SwigDirector_StateValidityChecker *>(obj->operator->());
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_AllValidStateValidityChecker__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::AllValidStateValidityChecker *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::AllValidStateValidityChecker *)new ompl::base::AllValidStateValidityChecker(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::AllValidStateValidityChecker >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_AllValidStateValidityChecker_isValid___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::AllValidStateValidityChecker *arg1 = (ompl::base::AllValidStateValidityChecker *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::AllValidStateValidityChecker const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::AllValidStateValidityChecker > *)jarg1;
  arg1 = (ompl::base::AllValidStateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::AllValidStateValidityChecker const *)arg1)->isValid((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_AllValidStateValidityChecker___(void * jarg1) {
  ompl::base::AllValidStateValidityChecker *arg1 = (ompl::base::AllValidStateValidityChecker *) 0 ;
  std::shared_ptr< ompl::base::AllValidStateValidityChecker > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::AllValidStateValidityChecker > *)jarg1;
  arg1 = (ompl::base::AllValidStateValidityChecker *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::ValidStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ValidStateSampler *)new SwigDirector_ValidStateSampler((ompl::base::SpaceInformation const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::ValidStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ValidStateSampler___(void * jarg1) {
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_getName___(void * jarg1) {
  const char * jresult ;
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((ompl::base::ValidStateSampler const *)arg1)->getName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_setName___(void * jarg1, const char * jarg2) {
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_sample___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->sample(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_sampleNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (bool)(arg1)->sampleNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_setNrAttempts___(void * jarg1, unsigned int jarg2) {
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setNrAttempts(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_getNrAttempts___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::ValidStateSampler const *)arg1)->getNrAttempts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_params___SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ValidStateSampler *arg1 = (ompl::base::ValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::ValidStateSampler > *smartarg1 = 0 ;
  ompl::base::ParamSet *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ParamSet *) &(arg1)->params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ValidStateSampler_director_connect___(void *objarg, SwigDirector_ValidStateSampler::SWIG_Callback0_t callback0, SwigDirector_ValidStateSampler::SWIG_Callback1_t callback1) {
  std::shared_ptr< ompl::base::ValidStateSampler > *obj = (std::shared_ptr< ompl::base::ValidStateSampler > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ValidStateSampler *director = static_cast<SwigDirector_ValidStateSampler *>(obj->operator->());
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_UniformValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::UniformValidStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::UniformValidStateSampler *)new ompl::base::UniformValidStateSampler((ompl::base::SpaceInformation const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::UniformValidStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_UniformValidStateSampler___(void * jarg1) {
  ompl::base::UniformValidStateSampler *arg1 = (ompl::base::UniformValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::UniformValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::UniformValidStateSampler > *)jarg1;
  arg1 = (ompl::base::UniformValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_UniformValidStateSampler_sample___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::UniformValidStateSampler *arg1 = (ompl::base::UniformValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::UniformValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::UniformValidStateSampler > *)jarg1;
  arg1 = (ompl::base::UniformValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->sample(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_UniformValidStateSampler_sampleNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  ompl::base::UniformValidStateSampler *arg1 = (ompl::base::UniformValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::UniformValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::UniformValidStateSampler > *)jarg1;
  arg1 = (ompl::base::UniformValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (bool)(arg1)->sampleNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_GaussianValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::GaussianValidStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::GaussianValidStateSampler *)new ompl::base::GaussianValidStateSampler((ompl::base::SpaceInformation const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::GaussianValidStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_GaussianValidStateSampler___(void * jarg1) {
  ompl::base::GaussianValidStateSampler *arg1 = (ompl::base::GaussianValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::GaussianValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::GaussianValidStateSampler > *)jarg1;
  arg1 = (ompl::base::GaussianValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_GaussianValidStateSampler_sample___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::GaussianValidStateSampler *arg1 = (ompl::base::GaussianValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::GaussianValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::GaussianValidStateSampler > *)jarg1;
  arg1 = (ompl::base::GaussianValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->sample(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_GaussianValidStateSampler_sampleNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  ompl::base::GaussianValidStateSampler *arg1 = (ompl::base::GaussianValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::GaussianValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::GaussianValidStateSampler > *)jarg1;
  arg1 = (ompl::base::GaussianValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (bool)(arg1)->sampleNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_GaussianValidStateSampler_getStdDev___(void * jarg1) {
  double jresult ;
  ompl::base::GaussianValidStateSampler *arg1 = (ompl::base::GaussianValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::GaussianValidStateSampler const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::GaussianValidStateSampler > *)jarg1;
  arg1 = (ompl::base::GaussianValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::GaussianValidStateSampler const *)arg1)->getStdDev();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_GaussianValidStateSampler_setStdDev___(void * jarg1, double jarg2) {
  ompl::base::GaussianValidStateSampler *arg1 = (ompl::base::GaussianValidStateSampler *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::GaussianValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::GaussianValidStateSampler > *)jarg1;
  arg1 = (ompl::base::GaussianValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStdDev(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ObstacleBasedValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::ObstacleBasedValidStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ObstacleBasedValidStateSampler *)new ompl::base::ObstacleBasedValidStateSampler((ompl::base::SpaceInformation const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::ObstacleBasedValidStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ObstacleBasedValidStateSampler___(void * jarg1) {
  ompl::base::ObstacleBasedValidStateSampler *arg1 = (ompl::base::ObstacleBasedValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::ObstacleBasedValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ObstacleBasedValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ObstacleBasedValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ObstacleBasedValidStateSampler_sample___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ObstacleBasedValidStateSampler *arg1 = (ompl::base::ObstacleBasedValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ObstacleBasedValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ObstacleBasedValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ObstacleBasedValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->sample(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ObstacleBasedValidStateSampler_sampleNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  ompl::base::ObstacleBasedValidStateSampler *arg1 = (ompl::base::ObstacleBasedValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::ObstacleBasedValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ObstacleBasedValidStateSampler > *)jarg1;
  arg1 = (ompl::base::ObstacleBasedValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (bool)(arg1)->sampleNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_MaximizeClearanceValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::MaximizeClearanceValidStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::MaximizeClearanceValidStateSampler *)new ompl::base::MaximizeClearanceValidStateSampler((ompl::base::SpaceInformation const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::MaximizeClearanceValidStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_MaximizeClearanceValidStateSampler___(void * jarg1) {
  ompl::base::MaximizeClearanceValidStateSampler *arg1 = (ompl::base::MaximizeClearanceValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MaximizeClearanceValidStateSampler > *)jarg1;
  arg1 = (ompl::base::MaximizeClearanceValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MaximizeClearanceValidStateSampler_sample___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::MaximizeClearanceValidStateSampler *arg1 = (ompl::base::MaximizeClearanceValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MaximizeClearanceValidStateSampler > *)jarg1;
  arg1 = (ompl::base::MaximizeClearanceValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->sample(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MaximizeClearanceValidStateSampler_sampleNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  unsigned int jresult ;
  ompl::base::MaximizeClearanceValidStateSampler *arg1 = (ompl::base::MaximizeClearanceValidStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MaximizeClearanceValidStateSampler > *)jarg1;
  arg1 = (ompl::base::MaximizeClearanceValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (bool)(arg1)->sampleNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MaximizeClearanceValidStateSampler_setNrImproveAttempts___(void * jarg1, unsigned int jarg2) {
  ompl::base::MaximizeClearanceValidStateSampler *arg1 = (ompl::base::MaximizeClearanceValidStateSampler *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MaximizeClearanceValidStateSampler > *)jarg1;
  arg1 = (ompl::base::MaximizeClearanceValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setNrImproveAttempts(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MaximizeClearanceValidStateSampler_getNrImproveAttempts___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MaximizeClearanceValidStateSampler *arg1 = (ompl::base::MaximizeClearanceValidStateSampler *) 0 ;
  std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MaximizeClearanceValidStateSampler > *)jarg1;
  arg1 = (ompl::base::MaximizeClearanceValidStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::MaximizeClearanceValidStateSampler const *)arg1)->getNrImproveAttempts();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_MotionValidator__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::MotionValidator *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::MotionValidator *)new SwigDirector_MotionValidator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::MotionValidator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_MotionValidator___(void * jarg1) {
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MotionValidator_checkMotion__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::MotionValidator const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MotionValidator_checkMotion__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::pair< ompl::base::State *,double > *arg4 = 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (std::pair< ompl::base::State *,double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< ompl::base::State *,double > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::MotionValidator const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MotionValidator_getValidMotionCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::MotionValidator const *)arg1)->getValidMotionCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MotionValidator_getInvalidMotionCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::MotionValidator const *)arg1)->getInvalidMotionCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MotionValidator_getCheckedMotionCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::MotionValidator const *)arg1)->getCheckedMotionCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_MotionValidator_getValidMotionFraction___(void * jarg1) {
  double jresult ;
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::MotionValidator const *)arg1)->getValidMotionFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MotionValidator_resetMotionCounter___(void * jarg1) {
  ompl::base::MotionValidator *arg1 = (ompl::base::MotionValidator *) 0 ;
  std::shared_ptr< ompl::base::MotionValidator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MotionValidator > *)jarg1;
  arg1 = (ompl::base::MotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->resetMotionCounter();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MotionValidator_director_connect___(void *objarg, SwigDirector_MotionValidator::SWIG_Callback0_t callback0, SwigDirector_MotionValidator::SWIG_Callback1_t callback1) {
  std::shared_ptr< ompl::base::MotionValidator > *obj = (std::shared_ptr< ompl::base::MotionValidator > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_MotionValidator *director = static_cast<SwigDirector_MotionValidator *>(obj->operator->());
  director->swig_connect_director(callback0, callback1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_DiscreteMotionValidator__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::DiscreteMotionValidator *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::DiscreteMotionValidator *)new ompl::base::DiscreteMotionValidator(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::DiscreteMotionValidator >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_DiscreteMotionValidator___(void * jarg1) {
  ompl::base::DiscreteMotionValidator *arg1 = (ompl::base::DiscreteMotionValidator *) 0 ;
  std::shared_ptr< ompl::base::DiscreteMotionValidator > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DiscreteMotionValidator > *)jarg1;
  arg1 = (ompl::base::DiscreteMotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_DiscreteMotionValidator_checkMotion__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::DiscreteMotionValidator *arg1 = (ompl::base::DiscreteMotionValidator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::DiscreteMotionValidator const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::DiscreteMotionValidator > *)jarg1;
  arg1 = (ompl::base::DiscreteMotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::DiscreteMotionValidator const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_DiscreteMotionValidator_checkMotion__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::DiscreteMotionValidator *arg1 = (ompl::base::DiscreteMotionValidator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::pair< ompl::base::State *,double > *arg4 = 0 ;
  std::shared_ptr< ompl::base::DiscreteMotionValidator const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::DiscreteMotionValidator > *)jarg1;
  arg1 = (ompl::base::DiscreteMotionValidator *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (std::pair< ompl::base::State *,double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< ompl::base::State *,double > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::DiscreteMotionValidator const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerDataVertex__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  ompl::base::State *arg1 = (ompl::base::State *) 0 ;
  int arg2 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  arg1 = (ompl::base::State *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *)new ompl::base::PlannerDataVertex((ompl::base::State const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerDataVertex__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::State *arg1 = (ompl::base::State *) 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  arg1 = (ompl::base::State *)jarg1; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *)new ompl::base::PlannerDataVertex((ompl::base::State const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerDataVertex__SWIG_2___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerDataVertex *arg1 = 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::PlannerDataVertex *)new ompl::base::PlannerDataVertex((ompl::base::PlannerDataVertex const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerDataVertex___(void * jarg1) {
  ompl::base::PlannerDataVertex *arg1 = (ompl::base::PlannerDataVertex *) 0 ;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_PlannerDataVertex_getTag___(void * jarg1) {
  int jresult ;
  ompl::base::PlannerDataVertex *arg1 = (ompl::base::PlannerDataVertex *) 0 ;
  int result;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1; 
  {
    try {
      result = (int)((ompl::base::PlannerDataVertex const *)arg1)->getTag();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerDataVertex_setTag___(void * jarg1, int jarg2) {
  ompl::base::PlannerDataVertex *arg1 = (ompl::base::PlannerDataVertex *) 0 ;
  int arg2 ;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      (arg1)->setTag(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerDataVertex_getState___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerDataVertex *arg1 = (ompl::base::PlannerDataVertex *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1; 
  {
    try {
      result = (ompl::base::State *)((ompl::base::PlannerDataVertex const *)arg1)->getState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerDataVertex_c_clone___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerDataVertex *arg1 = (ompl::base::PlannerDataVertex *) 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  arg1 = (ompl::base::PlannerDataVertex *)jarg1; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *)((ompl::base::PlannerDataVertex const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerDataEdge___() {
  void * jresult ;
  ompl::base::PlannerDataEdge *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerDataEdge *)new ompl::base::PlannerDataEdge();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerDataEdge___(void * jarg1) {
  ompl::base::PlannerDataEdge *arg1 = (ompl::base::PlannerDataEdge *) 0 ;
  
  arg1 = (ompl::base::PlannerDataEdge *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerDataEdge_c_clone___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerDataEdge *arg1 = (ompl::base::PlannerDataEdge *) 0 ;
  ompl::base::PlannerDataEdge *result = 0 ;
  
  arg1 = (ompl::base::PlannerDataEdge *)jarg1; 
  {
    try {
      result = (ompl::base::PlannerDataEdge *)((ompl::base::PlannerDataEdge const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_NO_EDGE_get___() {
  void * jresult ;
  ompl::base::PlannerDataEdge *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerDataEdge *)&ompl::base::PlannerData::NO_EDGE;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_NO_VERTEX_get___() {
  void * jresult ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerDataVertex *)&ompl::base::PlannerData::NO_VERTEX;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_INVALID_INDEX_get___() {
  unsigned int jresult ;
  unsigned int result;
  
  {
    try {
      result = (unsigned int)(unsigned int)ompl::base::PlannerData::INVALID_INDEX;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerData___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::PlannerData *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  {
    try {
      result = (ompl::base::PlannerData *)new ompl::base::PlannerData(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerData >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerData___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addVertex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)(arg1)->addVertex((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addStartVertex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)(arg1)->addStartVertex((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addGoalVertex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)(arg1)->addGoalVertex((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_markStartState___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->markStartState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_markGoalState___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)(arg1)->markGoalState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_tagState___(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  int arg3 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      result = (bool)(arg1)->tagState((ompl::base::State const *)arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_removeVertex__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->removeVertex((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_removeVertex__SWIG_1___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)(arg1)->removeVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  ompl::base::PlannerDataEdge *arg4 = 0 ;
  ompl::base::Cost arg5 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  ompl::base::Cost *argp5 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (ompl::base::PlannerDataEdge *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataEdge const & is null", 0);
    return 0;
  } 
  argp5 = (ompl::base::Cost *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (bool)(arg1)->addEdge(arg2,arg3,(ompl::base::PlannerDataEdge const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_1___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  ompl::base::PlannerDataEdge *arg4 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (ompl::base::PlannerDataEdge *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataEdge const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addEdge(arg2,arg3,(ompl::base::PlannerDataEdge const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_2___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)(arg1)->addEdge(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_3___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  ompl::base::PlannerDataVertex *arg3 = 0 ;
  ompl::base::PlannerDataEdge *arg4 = 0 ;
  ompl::base::Cost arg5 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  ompl::base::Cost *argp5 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerDataVertex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::PlannerDataEdge *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataEdge const & is null", 0);
    return 0;
  } 
  argp5 = (ompl::base::Cost *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (bool)(arg1)->addEdge((ompl::base::PlannerDataVertex const &)*arg2,(ompl::base::PlannerDataVertex const &)*arg3,(ompl::base::PlannerDataEdge const &)*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_4___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  ompl::base::PlannerDataVertex *arg3 = 0 ;
  ompl::base::PlannerDataEdge *arg4 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerDataVertex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::PlannerDataEdge *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataEdge const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addEdge((ompl::base::PlannerDataVertex const &)*arg2,(ompl::base::PlannerDataVertex const &)*arg3,(ompl::base::PlannerDataEdge const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_addEdge__SWIG_5___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  ompl::base::PlannerDataVertex *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerDataVertex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->addEdge((ompl::base::PlannerDataVertex const &)*arg2,(ompl::base::PlannerDataVertex const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_removeEdge__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)(arg1)->removeEdge(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_removeEdge__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  ompl::base::PlannerDataVertex *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerDataVertex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->removeEdge((ompl::base::PlannerDataVertex const &)*arg2,(ompl::base::PlannerDataVertex const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_clear___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_decoupleFromPlanner___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->decoupleFromPlanner();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_numEdges___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->numEdges();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_numVertices___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->numVertices();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_numStartVertices___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->numStartVertices();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_numGoalVertices___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->numGoalVertices();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_vertexExists___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->vertexExists((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_getVertex__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *) &((ompl::base::PlannerData const *)arg1)->getVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_getStartVertex__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *) &((ompl::base::PlannerData const *)arg1)->getStartVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_getGoalVertex__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  ompl::base::PlannerDataVertex *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::PlannerDataVertex *) &((ompl::base::PlannerData const *)arg1)->getGoalVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getStartIndex___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getStartIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getGoalIndex___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getGoalIndex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_isStartVertex___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->isStartVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_isGoalVertex___(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->isGoalVertex(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_vertexIndex___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::PlannerDataVertex *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerDataVertex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerDataVertex const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->vertexIndex((ompl::base::PlannerDataVertex const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_edgeExists___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->edgeExists(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_getEdge__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  ompl::base::PlannerDataEdge *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (ompl::base::PlannerDataEdge *) &((ompl::base::PlannerData const *)arg1)->getEdge(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getEdges__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getEdges(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getEdges__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::map< unsigned int,ompl::base::PlannerDataEdge const * > *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::map< unsigned int,ompl::base::PlannerDataEdge const * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned int,ompl::base::PlannerDataEdge const * > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getEdges(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getIncomingEdges__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::vector< unsigned int > *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::vector< unsigned int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned int > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getIncomingEdges(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getIncomingEdges__SWIG_1___(void * jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  std::map< unsigned int,ompl::base::PlannerDataEdge const * > *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::map< unsigned int,ompl::base::PlannerDataEdge const * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< unsigned int,ompl::base::PlannerDataEdge const * > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerData const *)arg1)->getIncomingEdges(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_getEdgeWeight___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  ompl::base::Cost *arg4 = (ompl::base::Cost *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (ompl::base::Cost *)jarg4; 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->getEdgeWeight(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_setEdgeWeight___(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  ompl::base::Cost arg4 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  ompl::base::Cost *argp4 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  argp4 = (ompl::base::Cost *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg4 = *argp4; 
  {
    try {
      result = (bool)(arg1)->setEdgeWeight(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_computeEdgeWeights__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  ompl::base::OptimizationObjective *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::OptimizationObjective *)(((std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg2) ? ((std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjective const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->computeEdgeWeights((ompl::base::OptimizationObjective const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_computeEdgeWeights__SWIG_1___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->computeEdgeWeights();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printGraphviz__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printGraphviz(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printGraphviz__SWIG_1___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printGraphviz();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printGraphML__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printGraphML(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printGraphML__SWIG_1___(void * jarg1) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printGraphML();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printPLY__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::ostream *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printPLY(*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_printPLY__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->printPLY(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_extractMinimumSpanningTree___(void * jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  ompl::base::OptimizationObjective *arg3 = 0 ;
  ompl::base::PlannerData *arg4 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  
  arg3 = (ompl::base::OptimizationObjective *)(((std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg3) ? ((std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjective const & reference is null", 0);
    return ;
  } 
  
  arg4 = (ompl::base::PlannerData *)(((std::shared_ptr<  ompl::base::PlannerData > *)jarg4) ? ((std::shared_ptr<  ompl::base::PlannerData > *)jarg4)->get() : 0);
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & reference is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->extractMinimumSpanningTree(arg2,(ompl::base::OptimizationObjective const &)*arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_extractReachable___(void * jarg1, unsigned int jarg2, void * jarg3) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  unsigned int arg2 ;
  ompl::base::PlannerData *arg3 = 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  
  arg3 = (ompl::base::PlannerData *)(((std::shared_ptr<  ompl::base::PlannerData > *)jarg3) ? ((std::shared_ptr<  ompl::base::PlannerData > *)jarg3)->get() : 0);
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & reference is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::PlannerData const *)arg1)->extractReachable(arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_extractStateStorage___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::StateStorage > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::PlannerData const *)arg1)->extractStateStorage();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::StateStoragePtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_toBoostGraph__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  ompl::base::PlannerData::Graph *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::PlannerData::Graph *) &(arg1)->toBoostGraph();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::PlannerData const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerData_hasControls___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::PlannerData const *)arg1)->hasControls();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerData_properties_set___(void * jarg1, void * jarg2) {
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::map< std::string,std::string > *)jarg2; 
  {
    try {
      if (arg1) (arg1)->properties = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerData_properties_get___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerData *arg1 = (ompl::base::PlannerData *) 0 ;
  std::shared_ptr< ompl::base::PlannerData > *smartarg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerData > *)jarg1;
  arg1 = (ompl::base::PlannerData *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::map< std::string,std::string > *)& ((arg1)->properties);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerTerminationCondition__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerTerminationConditionFn *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *result = 0 ;
  
  arg1 = (ompl::base::PlannerTerminationConditionFn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationConditionFn const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::PlannerTerminationCondition *)new ompl::base::PlannerTerminationCondition((ompl::base::PlannerTerminationConditionFn const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerTerminationCondition__SWIG_1___(void * jarg1, double jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationConditionFn *arg1 = 0 ;
  double arg2 ;
  ompl::base::PlannerTerminationCondition *result = 0 ;
  
  arg1 = (ompl::base::PlannerTerminationConditionFn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationConditionFn const & is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  {
    try {
      result = (ompl::base::PlannerTerminationCondition *)new ompl::base::PlannerTerminationCondition((ompl::base::PlannerTerminationConditionFn const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerTerminationCondition___(void * jarg1) {
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  std::shared_ptr< ompl::base::PlannerTerminationCondition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerTerminationCondition > *)jarg1;
  arg1 = (ompl::base::PlannerTerminationCondition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerTerminationCondition_terminate___(void * jarg1) {
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  std::shared_ptr< ompl::base::PlannerTerminationCondition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1;
  arg1 = (ompl::base::PlannerTerminationCondition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::PlannerTerminationCondition const *)arg1)->terminate();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerTerminationCondition_eval___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  std::shared_ptr< ompl::base::PlannerTerminationCondition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1;
  arg1 = (ompl::base::PlannerTerminationCondition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::PlannerTerminationCondition const *)arg1)->eval();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_plannerNonTerminatingCondition___() {
  void * jresult ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  {
    try {
      result = ompl::base::plannerNonTerminatingCondition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_plannerAlwaysTerminatingCondition___() {
  void * jresult ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  {
    try {
      result = ompl::base::plannerAlwaysTerminatingCondition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_plannerOrTerminationCondition___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  
  arg1 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = ompl::base::plannerOrTerminationCondition((ompl::base::PlannerTerminationCondition const &)*arg1,(ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_plannerAndTerminationCondition___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  
  arg1 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg1)->get() : 0);
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = ompl::base::plannerAndTerminationCondition((ompl::base::PlannerTerminationCondition const &)*arg1,(ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_timedPlannerTerminationCondition__SWIG_0___(double jarg1) {
  void * jresult ;
  double arg1 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (double)jarg1; 
  {
    try {
      result = ompl::base::timedPlannerTerminationCondition(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_timedPlannerTerminationCondition__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::time::duration arg1 ;
  ompl::time::duration *argp1 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  argp1 = (ompl::time::duration *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::time::duration", 0);
    return 0;
  }
  arg1 = *argp1; 
  {
    try {
      result = ompl::base::timedPlannerTerminationCondition(SWIG_STD_MOVE(arg1));
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_timedPlannerTerminationCondition__SWIG_2___(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      result = ompl::base::timedPlannerTerminationCondition(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_exactSolnPlannerTerminationCondition___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinitionPtr *arg1 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull1 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = jarg1 ? (ompl::base::ProblemDefinitionPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = ompl::base::exactSolnPlannerTerminationCondition((std::shared_ptr< ompl::base::ProblemDefinition > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerTerminationCondition >(new ompl::base::PlannerTerminationCondition(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerStatus__SWIG_0___(int jarg1) {
  void * jresult ;
  ompl::base::PlannerStatus::StatusType arg1 ;
  ompl::base::PlannerStatus *result = 0 ;
  
  arg1 = (ompl::base::PlannerStatus::StatusType)jarg1; 
  {
    try {
      result = (ompl::base::PlannerStatus *)new ompl::base::PlannerStatus(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerStatus >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerStatus__SWIG_1___() {
  void * jresult ;
  ompl::base::PlannerStatus *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerStatus *)new ompl::base::PlannerStatus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerStatus >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerStatus__SWIG_2___(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  bool arg1 ;
  bool arg2 ;
  ompl::base::PlannerStatus *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (ompl::base::PlannerStatus *)new ompl::base::PlannerStatus(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PlannerStatus >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_PlannerStatus_asString___(void * jarg1) {
  const char * jresult ;
  ompl::base::PlannerStatus *arg1 = (ompl::base::PlannerStatus *) 0 ;
  std::shared_ptr< ompl::base::PlannerStatus const > *smartarg1 = 0 ;
  std::string result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PlannerStatus > *)jarg1;
  arg1 = (ompl::base::PlannerStatus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::PlannerStatus const *)arg1)->asString();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerStatus___(void * jarg1) {
  ompl::base::PlannerStatus *arg1 = (ompl::base::PlannerStatus *) 0 ;
  std::shared_ptr< ompl::base::PlannerStatus > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PlannerStatus > *)jarg1;
  arg1 = (ompl::base::PlannerStatus *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_Goal___(void * jarg1) {
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::Goal > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_Goal_getType___(void * jarg1) {
  int jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  ompl::base::GoalType result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::GoalType)((ompl::base::Goal const *)arg1)->getType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Goal_hasType___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  ompl::base::GoalType arg2 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::GoalType)jarg2; 
  {
    try {
      result = (bool)((ompl::base::Goal const *)arg1)->hasType(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Goal_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::Goal const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Goal_isSatisfied__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::Goal const *)arg1)->isSatisfied((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Goal_isSatisfied__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double *arg3 = (double *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::Goal const *)arg1)->isSatisfied((ompl::base::State const *)arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Goal_isStartGoalPairValid___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::Goal const *)arg1)->isStartGoalPairValid((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Goal__print__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::Goal const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Goal__print__SWIG_1___(void * jarg1) {
  ompl::base::Goal *arg1 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Goal > *)jarg1;
  arg1 = (ompl::base::Goal *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::Goal const *)arg1)->print();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SolutionNonExistenceProof___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::SolutionNonExistenceProof *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  {
    try {
      result = (ompl::base::SolutionNonExistenceProof *)new ompl::base::SolutionNonExistenceProof(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_SolutionNonExistenceProof___(void * jarg1) {
  ompl::base::SolutionNonExistenceProof *arg1 = (ompl::base::SolutionNonExistenceProof *) 0 ;
  
  arg1 = (ompl::base::SolutionNonExistenceProof *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerSolution___(void * jarg1) {
  void * jresult ;
  ompl::base::PathPtr *arg1 = 0 ;
  ompl::base::PathPtr tempnull1 ;
  ompl::base::PlannerSolution *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::PathPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::PlannerSolution *)new ompl::base::PlannerSolution((ompl::base::PathPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_setApproximate___(void * jarg1, double jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setApproximate(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_setOptimized___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  ompl::base::Cost arg3 ;
  bool arg4 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  ompl::base::Cost *argp3 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->setOptimized((ompl::base::OptimizationObjectivePtr const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_setPlannerName___(void * jarg1, const char * jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setPlannerName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_index__set___(void * jarg1, int jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  int arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      if (arg1) (arg1)->index_ = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_index__get___(void * jarg1) {
  int jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  int result;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (int) ((arg1)->index_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_path__set___(void * jarg1, void * jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::PathPtr *arg2 = 0 ;
  ompl::base::PathPtr tempnull2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = jarg2 ? (ompl::base::PathPtr *)jarg2 : &tempnull2; 
  {
    try {
      if (arg1) (arg1)->path_ = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_path__get___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::PathPtr *result = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (ompl::base::PathPtr *) & ((arg1)->path_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::PathPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_length__set___(void * jarg1, double jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      if (arg1) (arg1)->length_ = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_length__get___(void * jarg1) {
  double jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  double result;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (double) ((arg1)->length_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_approximate__set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->approximate_ = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_approximate__get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->approximate_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_difference__set___(void * jarg1, double jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = (double)jarg2; 
  {
    try {
      if (arg1) (arg1)->difference_ = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_difference__get___(void * jarg1) {
  double jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  double result;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (double) ((arg1)->difference_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_optimized__set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->optimized_ = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_optimized__get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->optimized_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_opt__set___(void * jarg1, void * jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  {
    try {
      if (arg1) (arg1)->opt_ = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_opt__get___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::OptimizationObjectivePtr *result = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (ompl::base::OptimizationObjectivePtr *) & ((arg1)->opt_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::OptimizationObjectivePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_cost__set___(void * jarg1, void * jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::Cost *arg2 = (ompl::base::Cost *) 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  arg2 = (ompl::base::Cost *)jarg2; 
  {
    try {
      if (arg1) (arg1)->cost_ = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_cost__get___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  ompl::base::Cost *result = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (ompl::base::Cost *)& ((arg1)->cost_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_plannerName__set___(void * jarg1, const char * jarg2) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      if (arg1) (arg1)->plannerName_ = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_PlannerSolution_plannerName__get___(void * jarg1) {
  const char * jresult ;
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      result = (std::string *) & ((arg1)->plannerName_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerSolution___(void * jarg1) {
  ompl::base::PlannerSolution *arg1 = (ompl::base::PlannerSolution *) 0 ;
  
  arg1 = (ompl::base::PlannerSolution *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ProblemDefinition___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::ProblemDefinition *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  {
    try {
      result = (ompl::base::ProblemDefinition *)new ompl::base::ProblemDefinition(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::ProblemDefinition >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_c_clone___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::ProblemDefinition const *)arg1)->clone();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::ProblemDefinitionPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ProblemDefinition___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::ProblemDefinition const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addStartState__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->addStartState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addStartState__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->addStartState((ompl::base::ScopedState< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasStartState__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasStartState((ompl::base::State const *)arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasStartState__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasStartState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_clearStartStates___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearStartStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getStartStateCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::ProblemDefinition const *)arg1)->getStartStateCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getStartState__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::State *)((ompl::base::ProblemDefinition const *)arg1)->getStartState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setGoal___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  ompl::base::GoalPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::GoalPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setGoal((ompl::base::GoalPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_clearGoal___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearGoal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getGoal___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::GoalPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::GoalPtr *) &((ompl::base::ProblemDefinition const *)arg1)->getGoal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::GoalPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getInputStates___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::vector< ompl::base::State const * > *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ompl::base::State const * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State const * > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->getInputStates(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setStartAndGoalStates__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setStartAndGoalStates__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setGoalState__SWIG_0___(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setGoalState((ompl::base::State const *)arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setGoalState__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->setGoalState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setStartAndGoalStates__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  ompl::base::ScopedState< > *arg3 = 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::ScopedState< > const &)*arg2,(ompl::base::ScopedState< > const &)*arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setStartAndGoalStates__SWIG_3___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  ompl::base::ScopedState< > *arg3 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStartAndGoalStates((ompl::base::ScopedState< > const &)*arg2,(ompl::base::ScopedState< > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setGoalState__SWIG_2___(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setGoalState((ompl::base::ScopedState< > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setGoalState__SWIG_3___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setGoalState((ompl::base::ScopedState< > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasOptimizationObjective___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasOptimizationObjective();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::OptimizationObjectivePtr *) &((ompl::base::ProblemDefinition const *)arg1)->getOptimizationObjective();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::OptimizationObjectivePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setOptimizationObjective___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setOptimizationObjective((ompl::base::OptimizationObjectivePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getIntermediateSolutionCallback___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::ReportIntermediateSolutionFn *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ReportIntermediateSolutionFn *) &((ompl::base::ProblemDefinition const *)arg1)->getIntermediateSolutionCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setIntermediateSolutionCallback___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::ReportIntermediateSolutionFn *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ReportIntermediateSolutionFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ReportIntermediateSolutionFn const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setIntermediateSolutionCallback((ompl::base::ReportIntermediateSolutionFn const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_isTrivial__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  double *arg3 = (double *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (double *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->isTrivial(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_isTrivial__SWIG_1___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->isTrivial(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_isTrivial__SWIG_2___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->isTrivial();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_isStraightLinePathValid___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::ProblemDefinition const *)arg1)->isStraightLinePathValid();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::PathPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_fixInvalidInputStates___(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      result = (bool)(arg1)->fixInvalidInputStates(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasSolution___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasSolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasExactSolution___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasExactSolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasApproximateSolution___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasApproximateSolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolutionDifference___(void * jarg1) {
  double jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::ProblemDefinition const *)arg1)->getSolutionDifference();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasOptimizedSolution___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasOptimizedSolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolutionPath___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::ProblemDefinition const *)arg1)->getSolutionPath();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::PathPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolution___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PlannerSolution *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerSolution *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerSolution & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->getSolution(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addSolutionPath__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3, double jarg4, const char * jarg5) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PathPtr *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  std::string *arg5 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::PathPtr *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->addSolutionPath((ompl::base::PathPtr const &)*arg2,arg3,arg4,(std::string const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addSolutionPath__SWIG_1___(void * jarg1, void * jarg2, unsigned int jarg3, double jarg4) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PathPtr *arg2 = 0 ;
  bool arg3 ;
  double arg4 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::PathPtr *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (double)jarg4; 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->addSolutionPath((ompl::base::PathPtr const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addSolutionPath__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PathPtr *arg2 = 0 ;
  bool arg3 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::PathPtr *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->addSolutionPath((ompl::base::PathPtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addSolutionPath__SWIG_3___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PathPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::PathPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::PathPtr *)jarg2 : &tempnull2; 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->addSolutionPath((ompl::base::PathPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_addSolutionPath__SWIG_4___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::PlannerSolution *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerSolution *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerSolution const & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->addSolutionPath((ompl::base::PlannerSolution const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolutionCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  std::size_t result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::ProblemDefinition const *)arg1)->getSolutionCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolutions___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  SwigValueWrapper< std::vector< ompl::base::PlannerSolution > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::ProblemDefinition const *)arg1)->getSolutions();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< ompl::base::PlannerSolution >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_clearSolutionPaths___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->clearSolutionPaths();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_hasSolutionNonExistenceProof___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::ProblemDefinition const *)arg1)->hasSolutionNonExistenceProof();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_clearSolutionNonExistenceProof___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearSolutionNonExistenceProof();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_getSolutionNonExistenceProof___(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  ompl::base::SolutionNonExistenceProofPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SolutionNonExistenceProofPtr *) &((ompl::base::ProblemDefinition const *)arg1)->getSolutionNonExistenceProof();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition_setSolutionNonExistenceProof___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  ompl::base::SolutionNonExistenceProofPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::SolutionNonExistenceProofPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SolutionNonExistenceProofPtr const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setSolutionNonExistenceProof((ompl::base::SolutionNonExistenceProofPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition__print__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ProblemDefinition__print__SWIG_1___(void * jarg1) {
  ompl::base::ProblemDefinition *arg1 = (ompl::base::ProblemDefinition *) 0 ;
  std::shared_ptr< ompl::base::ProblemDefinition const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::ProblemDefinition > *)jarg1;
  arg1 = (ompl::base::ProblemDefinition *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::ProblemDefinition const *)arg1)->print();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerInputStates__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerPtr *arg1 = 0 ;
  ompl::base::PlannerPtr tempnull1 ;
  ompl::base::PlannerInputStates *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::PlannerPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::PlannerInputStates *)new ompl::base::PlannerInputStates((ompl::base::PlannerPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerInputStates__SWIG_2___() {
  void * jresult ;
  ompl::base::PlannerInputStates *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerInputStates *)new ompl::base::PlannerInputStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerInputStates___(void * jarg1) {
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_clear___(void * jarg1) {
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_restart___(void * jarg1) {
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      (arg1)->restart();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_update___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (bool)(arg1)->update();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_use___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  ompl::base::ProblemDefinitionPtr *arg2 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull2 ;
  bool result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  arg2 = jarg2 ? (ompl::base::ProblemDefinitionPtr *)jarg2 : &tempnull2; 
  {
    try {
      result = (bool)(arg1)->use((ompl::base::ProblemDefinitionPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_checkValidity___(void * jarg1) {
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      ((ompl::base::PlannerInputStates const *)arg1)->checkValidity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_nextStart___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (ompl::base::State *)(arg1)->nextStart();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_nextGoal__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::State *)(arg1)->nextGoal((ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_nextGoal__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (ompl::base::State *)(arg1)->nextGoal();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_haveMoreStartStates___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (bool)((ompl::base::PlannerInputStates const *)arg1)->haveMoreStartStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_haveMoreGoalStates___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (bool)((ompl::base::PlannerInputStates const *)arg1)->haveMoreGoalStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_getSeenStartStatesCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerInputStates const *)arg1)->getSeenStartStatesCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerInputStates_getSampledGoalsCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerInputStates *arg1 = (ompl::base::PlannerInputStates *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::PlannerInputStates *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::base::PlannerInputStates const *)arg1)->getSampledGoalsCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PlannerSpecs___() {
  void * jresult ;
  ompl::base::PlannerSpecs *result = 0 ;
  
  {
    try {
      result = (ompl::base::PlannerSpecs *)new ompl::base::PlannerSpecs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_recognizedGoal_set___(void * jarg1, int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  ompl::base::GoalType arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = (ompl::base::GoalType)jarg2; 
  {
    try {
      if (arg1) (arg1)->recognizedGoal = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_recognizedGoal_get___(void * jarg1) {
  int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  ompl::base::GoalType result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (ompl::base::GoalType) ((arg1)->recognizedGoal);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_multithreaded_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->multithreaded = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_multithreaded_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->multithreaded);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_approximateSolutions_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->approximateSolutions = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_approximateSolutions_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->approximateSolutions);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_optimizingPaths_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->optimizingPaths = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_optimizingPaths_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->optimizingPaths);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_directed_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->directed = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_directed_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->directed);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_provingSolutionNonExistence_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->provingSolutionNonExistence = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_provingSolutionNonExistence_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->provingSolutionNonExistence);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_canReportIntermediateSolutions_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      if (arg1) (arg1)->canReportIntermediateSolutions = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_PlannerSpecs_canReportIntermediateSolutions_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      result = (bool) ((arg1)->canReportIntermediateSolutions);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PlannerSpecs___(void * jarg1) {
  ompl::base::PlannerSpecs *arg1 = (ompl::base::PlannerSpecs *) 0 ;
  
  arg1 = (ompl::base::PlannerSpecs *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_Planner___(void * jarg1) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::Planner const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_getProblemDefinition__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ProblemDefinitionPtr *) &((ompl::base::Planner const *)arg1)->getProblemDefinition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::ProblemDefinitionPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_getPlannerInputStates___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  ompl::base::PlannerInputStates *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::PlannerInputStates *) &((ompl::base::Planner const *)arg1)->getPlannerInputStates();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_setProblemDefinition___(void * jarg1, void * jarg2) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  ompl::base::ProblemDefinitionPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::ProblemDefinitionPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setProblemDefinition((ompl::base::ProblemDefinitionPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_solve__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerTerminationCondition *)(((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2) ? ((std::shared_ptr< const ompl::base::PlannerTerminationCondition > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & reference is null", 0);
    return 0;
  } 
  {
    try {
      result = (arg1)->solve((ompl::base::PlannerTerminationCondition const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_solve__SWIG_1___(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  ompl::base::PlannerTerminationConditionFn *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::PlannerTerminationConditionFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationConditionFn const & is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  {
    try {
      result = (arg1)->solve((ompl::base::PlannerTerminationConditionFn const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus(result)); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_solve__SWIG_2___(void * jarg1, double jarg2) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  ompl::base::PlannerStatus result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      result = (arg1)->solve(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr<  ompl::base::PlannerStatus >(new ompl::base::PlannerStatus(result)); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_clear___(void * jarg1) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clear();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_clearQuery___(void * jarg1) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearQuery();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_getPlannerData___(void * jarg1, void * jarg2) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  ompl::base::PlannerData *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::PlannerData *)(((std::shared_ptr<  ompl::base::PlannerData > *)jarg2) ? ((std::shared_ptr<  ompl::base::PlannerData > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & reference is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::Planner const *)arg1)->getPlannerData(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_Planner_getName___(void * jarg1) {
  const char * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((ompl::base::Planner const *)arg1)->getName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_setName___(void * jarg1, const char * jarg2) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_getSpecs___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  ompl::base::PlannerSpecs *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::PlannerSpecs *) &((ompl::base::Planner const *)arg1)->getSpecs();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_setup___(void * jarg1) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_checkValidity___(void * jarg1) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->checkValidity();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_Planner_isSetup___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::Planner const *)arg1)->isSetup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_params___SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner > *smartarg1 = 0 ;
  ompl::base::ParamSet *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ParamSet *) &(arg1)->params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Planner_getPlannerProgressProperties___(void * jarg1) {
  void * jresult ;
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  ompl::base::Planner::PlannerProgressProperties *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::Planner::PlannerProgressProperties *) &((ompl::base::Planner const *)arg1)->getPlannerProgressProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_printProperties___(void * jarg1, void * jarg2) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::Planner const *)arg1)->printProperties(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Planner_printSettings___(void * jarg1, void * jarg2) {
  ompl::base::Planner *arg1 = (ompl::base::Planner *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::Planner const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::Planner > *)jarg1;
  arg1 = (ompl::base::Planner *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::Planner const *)arg1)->printSettings(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateSampler___(void * jarg1) {
  ompl::base::StateSampler *arg1 = (ompl::base::StateSampler *) 0 ;
  std::shared_ptr< ompl::base::StateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSampler > *)jarg1;
  arg1 = (ompl::base::StateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::StateSampler *arg1 = (ompl::base::StateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSampler > *)jarg1;
  arg1 = (ompl::base::StateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::StateSampler *arg1 = (ompl::base::StateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::StateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSampler > *)jarg1;
  arg1 = (ompl::base::StateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::StateSampler *arg1 = (ompl::base::StateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::StateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSampler > *)jarg1;
  arg1 = (ompl::base::StateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_CompoundStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::CompoundStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::CompoundStateSampler *)new ompl::base::CompoundStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::CompoundStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_CompoundStateSampler___(void * jarg1) {
  ompl::base::CompoundStateSampler *arg1 = (ompl::base::CompoundStateSampler *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSampler > *)jarg1;
  arg1 = (ompl::base::CompoundStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSampler_addSampler___(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::CompoundStateSampler *arg1 = (ompl::base::CompoundStateSampler *) 0 ;
  ompl::base::StateSamplerPtr *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::CompoundStateSampler > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSampler > *)jarg1;
  arg1 = (ompl::base::CompoundStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSamplerPtr *)jarg2 : &tempnull2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->addSampler((ompl::base::StateSamplerPtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSampler *arg1 = (ompl::base::CompoundStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSampler > *)jarg1;
  arg1 = (ompl::base::CompoundStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::CompoundStateSampler *arg1 = (ompl::base::CompoundStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::CompoundStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSampler > *)jarg1;
  arg1 = (ompl::base::CompoundStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::CompoundStateSampler *arg1 = (ompl::base::CompoundStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::CompoundStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSampler > *)jarg1;
  arg1 = (ompl::base::CompoundStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SubspaceStateSampler___(void * jarg1, void * jarg2, double jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg2 = 0 ;
  ompl::base::SubspaceStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  
  smartarg2 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg2;
  arg2 = (ompl::base::StateSpace *)(smartarg2 ? smartarg2->get() : 0); 
  arg3 = (double)jarg3; 
  {
    try {
      result = (ompl::base::SubspaceStateSampler *)new ompl::base::SubspaceStateSampler((ompl::base::StateSpace const *)arg1,(ompl::base::StateSpace const *)arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SubspaceStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_SubspaceStateSampler___(void * jarg1) {
  ompl::base::SubspaceStateSampler *arg1 = (ompl::base::SubspaceStateSampler *) 0 ;
  std::shared_ptr< ompl::base::SubspaceStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SubspaceStateSampler > *)jarg1;
  arg1 = (ompl::base::SubspaceStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SubspaceStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::SubspaceStateSampler *arg1 = (ompl::base::SubspaceStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SubspaceStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SubspaceStateSampler > *)jarg1;
  arg1 = (ompl::base::SubspaceStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SubspaceStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SubspaceStateSampler *arg1 = (ompl::base::SubspaceStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SubspaceStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SubspaceStateSampler > *)jarg1;
  arg1 = (ompl::base::SubspaceStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SubspaceStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SubspaceStateSampler *arg1 = (ompl::base::SubspaceStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SubspaceStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SubspaceStateSampler > *)jarg1;
  arg1 = (ompl::base::SubspaceStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_DeterministicSequence___(void * jarg1) {
  ompl::base::DeterministicSequence *arg1 = (ompl::base::DeterministicSequence *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicSequence > *)jarg1;
  arg1 = (ompl::base::DeterministicSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_DeterministicSequence_sample___(void * jarg1) {
  void * jresult ;
  ompl::base::DeterministicSequence *arg1 = (ompl::base::DeterministicSequence *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > *smartarg1 = 0 ;
  std::vector< double > result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicSequence > *)jarg1;
  arg1 = (ompl::base::DeterministicSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->sample();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_DeterministicSequence_dimensions__get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::DeterministicSequence *arg1 = (ompl::base::DeterministicSequence *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicSequence > *)jarg1;
  arg1 = (ompl::base::DeterministicSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)(unsigned int) ((arg1)->dimensions_);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_HaltonSequence1D__SWIG_0___() {
  void * jresult ;
  ompl::base::HaltonSequence1D *result = 0 ;
  
  {
    try {
      result = (ompl::base::HaltonSequence1D *)new ompl::base::HaltonSequence1D();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_HaltonSequence1D__SWIG_1___(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::HaltonSequence1D *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (ompl::base::HaltonSequence1D *)new ompl::base::HaltonSequence1D(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_HaltonSequence1D_setBase___(void * jarg1, unsigned int jarg2) {
  ompl::base::HaltonSequence1D *arg1 = (ompl::base::HaltonSequence1D *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ompl::base::HaltonSequence1D *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setBase(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_HaltonSequence1D_sample___(void * jarg1) {
  double jresult ;
  ompl::base::HaltonSequence1D *arg1 = (ompl::base::HaltonSequence1D *) 0 ;
  double result;
  
  arg1 = (ompl::base::HaltonSequence1D *)jarg1; 
  {
    try {
      result = (double)(arg1)->sample();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_HaltonSequence1D___(void * jarg1) {
  ompl::base::HaltonSequence1D *arg1 = (ompl::base::HaltonSequence1D *) 0 ;
  
  arg1 = (ompl::base::HaltonSequence1D *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_HaltonSequence__SWIG_0___(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::HaltonSequence *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (ompl::base::HaltonSequence *)new ompl::base::HaltonSequence(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::HaltonSequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_HaltonSequence__SWIG_1___(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  unsigned int arg1 ;
  std::vector< unsigned int > arg2 ;
  std::vector< unsigned int > *argp2 ;
  ompl::base::HaltonSequence *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  argp2 = (std::vector< unsigned int > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< unsigned int >", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (ompl::base::HaltonSequence *)new ompl::base::HaltonSequence(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::HaltonSequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_HaltonSequence_sample___(void * jarg1) {
  void * jresult ;
  ompl::base::HaltonSequence *arg1 = (ompl::base::HaltonSequence *) 0 ;
  std::shared_ptr< ompl::base::HaltonSequence > *smartarg1 = 0 ;
  std::vector< double > result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::HaltonSequence > *)jarg1;
  arg1 = (ompl::base::HaltonSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->sample();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_HaltonSequence___(void * jarg1) {
  ompl::base::HaltonSequence *arg1 = (ompl::base::HaltonSequence *) 0 ;
  std::shared_ptr< ompl::base::HaltonSequence > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::HaltonSequence > *)jarg1;
  arg1 = (ompl::base::HaltonSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PrecomputedSequence__SWIG_0___(const char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  std::string arg1 ;
  unsigned int arg2 ;
  bool arg3 ;
  size_t arg4 ;
  ompl::base::PrecomputedSequence *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (size_t)jarg4; 
  {
    try {
      result = (ompl::base::PrecomputedSequence *)new ompl::base::PrecomputedSequence(arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PrecomputedSequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PrecomputedSequence__SWIG_1___(const char * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  std::string arg1 ;
  unsigned int arg2 ;
  bool arg3 ;
  ompl::base::PrecomputedSequence *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (ompl::base::PrecomputedSequence *)new ompl::base::PrecomputedSequence(arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PrecomputedSequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PrecomputedSequence__SWIG_2___(const char * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string arg1 ;
  unsigned int arg2 ;
  ompl::base::PrecomputedSequence *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::PrecomputedSequence *)new ompl::base::PrecomputedSequence(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PrecomputedSequence >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PrecomputedSequence_sample___(void * jarg1) {
  void * jresult ;
  ompl::base::PrecomputedSequence *arg1 = (ompl::base::PrecomputedSequence *) 0 ;
  std::shared_ptr< ompl::base::PrecomputedSequence > *smartarg1 = 0 ;
  std::vector< double > result;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PrecomputedSequence > *)jarg1;
  arg1 = (ompl::base::PrecomputedSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (arg1)->sample();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PrecomputedSequence___(void * jarg1) {
  ompl::base::PrecomputedSequence *arg1 = (ompl::base::PrecomputedSequence *) 0 ;
  std::shared_ptr< ompl::base::PrecomputedSequence > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PrecomputedSequence > *)jarg1;
  arg1 = (ompl::base::PrecomputedSequence *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_DeterministicStateSampler__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::DeterministicStateSampler::DeterministicSamplerType arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::DeterministicStateSampler::DeterministicSamplerType)jarg2; 
  {
    try {
      result = (ompl::base::DeterministicStateSampler *)new ompl::base::DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_DeterministicStateSampler__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::DeterministicStateSampler *)new ompl::base::DeterministicStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_DeterministicStateSampler__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  {
    try {
      result = (ompl::base::DeterministicStateSampler *)new ompl::base::DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_DeterministicStateSampler___(void * jarg1) {
  ompl::base::DeterministicStateSampler *arg1 = (ompl::base::DeterministicStateSampler *) 0 ;
  std::shared_ptr< ompl::base::DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_DeterministicStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::DeterministicStateSampler *arg1 = (ompl::base::DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_DeterministicStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::DeterministicStateSampler *arg1 = (ompl::base::DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_DeterministicStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::DeterministicStateSampler *arg1 = (ompl::base::DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SO2DeterministicStateSampler__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::DeterministicStateSampler::DeterministicSamplerType arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SO2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::DeterministicStateSampler::DeterministicSamplerType)jarg2; 
  {
    try {
      result = (ompl::base::SO2DeterministicStateSampler *)new ompl::base::SO2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SO2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SO2DeterministicStateSampler__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SO2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SO2DeterministicStateSampler *)new ompl::base::SO2DeterministicStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SO2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SO2DeterministicStateSampler__SWIG_2___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SO2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  {
    try {
      result = (ompl::base::SO2DeterministicStateSampler *)new ompl::base::SO2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SO2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SO2DeterministicStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::SO2DeterministicStateSampler *arg1 = (ompl::base::SO2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SO2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SO2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SO2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SO2DeterministicStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SO2DeterministicStateSampler *arg1 = (ompl::base::SO2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SO2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SO2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SO2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SO2DeterministicStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SO2DeterministicStateSampler *arg1 = (ompl::base::SO2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SO2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SO2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SO2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_SO2DeterministicStateSampler___(void * jarg1) {
  ompl::base::SO2DeterministicStateSampler *arg1 = (ompl::base::SO2DeterministicStateSampler *) 0 ;
  std::shared_ptr< ompl::base::SO2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SO2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SO2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorDeterministicStateSampler__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::DeterministicStateSampler::DeterministicSamplerType arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorDeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::DeterministicStateSampler::DeterministicSamplerType)jarg2; 
  {
    try {
      result = (ompl::base::RealVectorDeterministicStateSampler *)new ompl::base::RealVectorDeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorDeterministicStateSampler__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorDeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::RealVectorDeterministicStateSampler *)new ompl::base::RealVectorDeterministicStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorDeterministicStateSampler__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  bool arg3 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorDeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (ompl::base::RealVectorDeterministicStateSampler *)new ompl::base::RealVectorDeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorDeterministicStateSampler__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorDeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  {
    try {
      result = (ompl::base::RealVectorDeterministicStateSampler *)new ompl::base::RealVectorDeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorDeterministicStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorDeterministicStateSampler *arg1 = (ompl::base::RealVectorDeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorDeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorDeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorDeterministicStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorDeterministicStateSampler *arg1 = (ompl::base::RealVectorDeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::RealVectorDeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorDeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorDeterministicStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorDeterministicStateSampler *arg1 = (ompl::base::RealVectorDeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::RealVectorDeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorDeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RealVectorDeterministicStateSampler___(void * jarg1) {
  ompl::base::RealVectorDeterministicStateSampler *arg1 = (ompl::base::RealVectorDeterministicStateSampler *) 0 ;
  std::shared_ptr< ompl::base::RealVectorDeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorDeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorDeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SE2DeterministicStateSampler__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::DeterministicStateSampler::DeterministicSamplerType arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SE2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::DeterministicStateSampler::DeterministicSamplerType)jarg2; 
  {
    try {
      result = (ompl::base::SE2DeterministicStateSampler *)new ompl::base::SE2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SE2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SE2DeterministicStateSampler__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SE2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SE2DeterministicStateSampler *)new ompl::base::SE2DeterministicStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SE2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SE2DeterministicStateSampler__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SE2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (ompl::base::SE2DeterministicStateSampler *)new ompl::base::SE2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SE2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SE2DeterministicStateSampler__SWIG_3___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  bool arg3 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SE2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (ompl::base::SE2DeterministicStateSampler *)new ompl::base::SE2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SE2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SE2DeterministicStateSampler__SWIG_4___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::DeterministicSequence > arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::SE2DeterministicStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< ompl::base::DeterministicSequence > *)jarg2; 
  {
    try {
      result = (ompl::base::SE2DeterministicStateSampler *)new ompl::base::SE2DeterministicStateSampler((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SE2DeterministicStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SE2DeterministicStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::SE2DeterministicStateSampler *arg1 = (ompl::base::SE2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SE2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SE2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SE2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SE2DeterministicStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SE2DeterministicStateSampler *arg1 = (ompl::base::SE2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SE2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SE2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SE2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SE2DeterministicStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::SE2DeterministicStateSampler *arg1 = (ompl::base::SE2DeterministicStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::SE2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SE2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SE2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_SE2DeterministicStateSampler___(void * jarg1) {
  ompl::base::SE2DeterministicStateSampler *arg1 = (ompl::base::SE2DeterministicStateSampler *) 0 ;
  std::shared_ptr< ompl::base::SE2DeterministicStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SE2DeterministicStateSampler > *)jarg1;
  arg1 = (ompl::base::SE2DeterministicStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_InformedSampler___(void * jarg1) {
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_InformedSampler_sampleUniform__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::Cost *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::Cost *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->sampleUniform(arg2,(ompl::base::Cost const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_InformedSampler_sampleUniform__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::Cost *arg3 = 0 ;
  ompl::base::Cost *arg4 = 0 ;
  bool result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::Cost *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::Cost *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->sampleUniform(arg2,(ompl::base::Cost const &)*arg3,(ompl::base::Cost const &)*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_InformedSampler_hasInformedMeasure___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  bool result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  {
    try {
      result = (bool)((ompl::base::InformedSampler const *)arg1)->hasInformedMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_InformedSampler_getInformedMeasure__SWIG_0___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::Cost *arg2 = 0 ;
  double result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  arg2 = (ompl::base::Cost *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((ompl::base::InformedSampler const *)arg1)->getInformedMeasure((ompl::base::Cost const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_InformedSampler_getInformedMeasure__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::Cost *arg2 = 0 ;
  ompl::base::Cost *arg3 = 0 ;
  double result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  arg2 = (ompl::base::Cost *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::Cost *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::Cost const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double)((ompl::base::InformedSampler const *)arg1)->getInformedMeasure((ompl::base::Cost const &)*arg2,(ompl::base::Cost const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_InformedSampler_heuristicSolnCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::Cost result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::InformedSampler const *)arg1)->heuristicSolnCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_InformedSampler_getProblemDefn___(void * jarg1) {
  void * jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  ompl::base::ProblemDefinitionPtr result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  {
    try {
      result = ((ompl::base::InformedSampler const *)arg1)->getProblemDefn();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::ProblemDefinitionPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_InformedSampler_getMaxNumberOfIters___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::InformedSampler *arg1 = (ompl::base::InformedSampler *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::InformedSampler *)jarg1; 
  {
    try {
      result = (unsigned int)((ompl::base::InformedSampler const *)arg1)->getMaxNumberOfIters();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_InformedStateSampler__SWIG_0___(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::ProblemDefinitionPtr *arg1 = 0 ;
  unsigned int arg2 ;
  ompl::base::InformedStateSampler::GetCurrentCostFunc *arg3 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull1 ;
  ompl::base::InformedStateSampler *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::ProblemDefinitionPtr *)jarg1 : &tempnull1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (ompl::base::InformedStateSampler::GetCurrentCostFunc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::InformedStateSampler::GetCurrentCostFunc const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::InformedStateSampler *)new ompl::base::InformedStateSampler((ompl::base::ProblemDefinitionPtr const &)*arg1,arg2,(ompl::base::InformedStateSampler::GetCurrentCostFunc const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::InformedStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_InformedStateSampler__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::ProblemDefinitionPtr *arg1 = 0 ;
  ompl::base::InformedStateSampler::GetCurrentCostFunc *arg2 = 0 ;
  ompl::base::InformedSamplerPtr *arg3 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull1 ;
  ompl::base::InformedStateSampler *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::ProblemDefinitionPtr *)jarg1 : &tempnull1; 
  arg2 = (ompl::base::InformedStateSampler::GetCurrentCostFunc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::InformedStateSampler::GetCurrentCostFunc const & is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::InformedSamplerPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::InformedSamplerPtr const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::InformedStateSampler *)new ompl::base::InformedStateSampler((ompl::base::ProblemDefinitionPtr const &)*arg1,(ompl::base::InformedStateSampler::GetCurrentCostFunc const &)*arg2,(ompl::base::InformedSamplerPtr const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::InformedStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_InformedStateSampler___(void * jarg1) {
  ompl::base::InformedStateSampler *arg1 = (ompl::base::InformedStateSampler *) 0 ;
  std::shared_ptr< ompl::base::InformedStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::InformedStateSampler > *)jarg1;
  arg1 = (ompl::base::InformedStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_InformedStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::InformedStateSampler *arg1 = (ompl::base::InformedStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::InformedStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::InformedStateSampler > *)jarg1;
  arg1 = (ompl::base::InformedStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_InformedStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::InformedStateSampler *arg1 = (ompl::base::InformedStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::InformedStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::InformedStateSampler > *)jarg1;
  arg1 = (ompl::base::InformedStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_InformedStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::InformedStateSampler *arg1 = (ompl::base::InformedStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::InformedStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::InformedStateSampler > *)jarg1;
  arg1 = (ompl::base::InformedStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateSpace___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_SubstateLocation_chain_set___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  std::vector< std::size_t > *arg2 = (std::vector< std::size_t > *) 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  arg2 = (std::vector< std::size_t > *)jarg2; 
  {
    try {
      if (arg1) (arg1)->chain = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_SubstateLocation_chain_get___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  std::vector< std::size_t > *result = 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  {
    try {
      result = (std::vector< std::size_t > *)& ((arg1)->chain);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_SubstateLocation_space_set___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  
  smartarg2 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg2;
  arg2 = (ompl::base::StateSpace *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      if (arg1) (arg1)->space = (ompl::base::StateSpace const *)arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_SubstateLocation_space_get___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  ompl::base::StateSpace *result = 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  {
    try {
      result = (ompl::base::StateSpace *) ((arg1)->space);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr< const ompl::base::StateSpace >(result SWIG_NO_NULL_DELETER_0) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateSpace_SubstateLocation___() {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *result = 0 ;
  
  {
    try {
      result = (ompl::base::StateSpace::SubstateLocation *)new ompl::base::StateSpace::SubstateLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateSpace_SubstateLocation___(void * jarg1) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_ValueLocation_stateLocation_set___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  ompl::base::StateSpace::SubstateLocation *arg2 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  arg2 = (ompl::base::StateSpace::SubstateLocation *)jarg2; 
  {
    try {
      if (arg1) (arg1)->stateLocation = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_ValueLocation_stateLocation_get___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  ompl::base::StateSpace::SubstateLocation *result = 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  {
    try {
      result = (ompl::base::StateSpace::SubstateLocation *)& ((arg1)->stateLocation);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_ValueLocation_index_set___(void * jarg1, unsigned int jarg2) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  std::size_t arg2 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      if (arg1) (arg1)->index = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_ValueLocation_index_get___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  {
    try {
      result =  ((arg1)->index);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateSpace_ValueLocation___() {
  void * jresult ;
  ompl::base::StateSpace::ValueLocation *result = 0 ;
  
  {
    try {
      result = (ompl::base::StateSpace::ValueLocation *)new ompl::base::StateSpace::ValueLocation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateSpace_ValueLocation___(void * jarg1) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_isCompound___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->isCompound();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_isDiscrete___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->isDiscrete();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_isHybrid___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->isHybrid();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_isMetricSpace___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->isMetricSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_hasSymmetricDistance___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->hasSymmetricDistance();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_hasSymmetricInterpolate___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->hasSymmetricInterpolate();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getName___(void * jarg1) {
  const char * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((ompl::base::StateSpace const *)arg1)->getName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_setName___(void * jarg1, const char * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->setName((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_StateSpace_getType___(void * jarg1) {
  int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (int)((ompl::base::StateSpace const *)arg1)->getType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_includes__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr tempnull2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSpacePtr *)jarg2 : &tempnull2; 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->includes((ompl::base::StateSpacePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_covers__SWIG_0___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr tempnull2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSpacePtr *)jarg2 : &tempnull2; 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->covers((ompl::base::StateSpacePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_params___SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  ompl::base::ParamSet *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ParamSet *) &(arg1)->params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateSpace_getLongestValidSegmentFraction___(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::StateSpace const *)arg1)->getLongestValidSegmentFraction();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_setLongestValidSegmentFraction___(void * jarg1, double jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLongestValidSegmentFraction(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_validSegmentCount___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (unsigned int)((ompl::base::StateSpace const *)arg1)->validSegmentCount((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_setValidSegmentCountFactor___(void * jarg1, unsigned int jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setValidSegmentCountFactor(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValidSegmentCountFactor___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getValidSegmentCountFactor();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateSpace_getLongestValidSegmentLength___(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::StateSpace const *)arg1)->getLongestValidSegmentLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_computeSignature___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->computeSignature(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_getDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateSpace_getMaximumExtent___(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::StateSpace const *)arg1)->getMaximumExtent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateSpace_getMeasure___(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::StateSpace const *)arg1)->getMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_enforceBounds___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->enforceBounds(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_satisfiesBounds___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_copyState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_cloneState___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->cloneState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_StateSpace_distance___(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (double)((ompl::base::StateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_getSerializationLength___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getSerializationLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_serialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_deserialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_equalStates___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_interpolate___(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_allocDefaultStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::StateSpace const *)arg1)->allocDefaultStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_allocStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::StateSpace const *)arg1)->allocStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_setStateSamplerAllocator___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSamplerAllocator *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::StateSamplerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSamplerAllocator const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStateSamplerAllocator((ompl::base::StateSamplerAllocator const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_clearStateSamplerAllocator___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearStateSamplerAllocator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_allocState___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->allocState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_freeState___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->freeState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValueAddressAtIndex__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValueLocations___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::vector< ompl::base::StateSpace::ValueLocation > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< ompl::base::StateSpace::ValueLocation > *) &((ompl::base::StateSpace const *)arg1)->getValueLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValueLocationsByName___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::map< std::string,ompl::base::StateSpace::ValueLocation > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::map< std::string,ompl::base::StateSpace::ValueLocation > *) &((ompl::base::StateSpace const *)arg1)->getValueLocationsByName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValueAddressAtLocation__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace::ValueLocation *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace::ValueLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpace::ValueLocation const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtLocation(arg2,(ompl::base::StateSpace::ValueLocation const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getValueAddressAtName__SWIG_0___(void * jarg1, void * jarg2, const char * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtName(arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_copyToReals___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::vector< double > *arg2 = 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & is null", 0);
    return ;
  } 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->copyToReals(*arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_copyFromReals___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::vector< double > *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->copyFromReals(arg2,(std::vector< double > const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_registerProjection___(void * jarg1, const char * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  ompl::base::ProjectionEvaluatorPtr *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (ompl::base::ProjectionEvaluatorPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProjectionEvaluatorPtr const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->registerProjection((std::string const &)*arg2,(ompl::base::ProjectionEvaluatorPtr const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_registerDefaultProjection___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::ProjectionEvaluatorPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ProjectionEvaluatorPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProjectionEvaluatorPtr const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->registerDefaultProjection((ompl::base::ProjectionEvaluatorPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_registerProjections___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->registerProjections();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getProjection___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::ProjectionEvaluator > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = ((ompl::base::StateSpace const *)arg1)->getProjection((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::ProjectionEvaluatorPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getDefaultProjection___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::ProjectionEvaluator > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::StateSpace const *)arg1)->getDefaultProjection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::ProjectionEvaluatorPtr(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_hasProjection___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->hasProjection((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateSpace_hasDefaultProjection___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateSpace const *)arg1)->hasDefaultProjection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getRegisteredProjections___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::map< std::string,ompl::base::ProjectionEvaluatorPtr > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::map< std::string,ompl::base::ProjectionEvaluatorPtr > *) &((ompl::base::StateSpace const *)arg1)->getRegisteredProjections();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_printState__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_printState__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->printState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_printSettings___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->printSettings(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_printProjections___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->printProjections(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_sanityChecks__SWIG_0___(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->sanityChecks(arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_sanityChecks__SWIG_1___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->sanityChecks();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_diagram___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->diagram(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_list___(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->list(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_Diagram___(void * jarg1) {
  std::ostream *arg1 = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ompl::base::StateSpace::Diagram(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_List___(void * jarg1) {
  std::ostream *arg1 = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ompl::base::StateSpace::List(*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_allocSubspaceStateSampler__SWIG_0___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr tempnull2 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSpacePtr *)jarg2 : &tempnull2; 
  {
    try {
      result = ((ompl::base::StateSpace const *)arg1)->allocSubspaceStateSampler((ompl::base::StateSpacePtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getSubstateAtLocation__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace::SubstateLocation *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace::SubstateLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpace::SubstateLocation const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->getSubstateAtLocation(arg2,(ompl::base::StateSpace::SubstateLocation const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateSpace_getSubstateLocationsByName___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  std::map< std::string,ompl::base::StateSpace::SubstateLocation > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::map< std::string,ompl::base::StateSpace::SubstateLocation > *) &((ompl::base::StateSpace const *)arg1)->getSubstateLocationsByName();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_getCommonSubspaces__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSpacePtr *)jarg2 : &tempnull2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::StateSpace const *)arg1)->getCommonSubspaces((ompl::base::StateSpacePtr const &)*arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_computeLocations___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->computeLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateSpace_setup___(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_CompoundStateSpace__SWIG_0___() {
  void * jresult ;
  ompl::base::CompoundStateSpace *result = 0 ;
  
  {
    try {
      result = (ompl::base::CompoundStateSpace *)new ompl::base::CompoundStateSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::CompoundStateSpace >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_CompoundStateSpace__SWIG_1___(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< ompl::base::StateSpacePtr > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  ompl::base::CompoundStateSpace *result = 0 ;
  
  arg1 = (std::vector< ompl::base::StateSpacePtr > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::StateSpacePtr > const & is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::CompoundStateSpace *)new ompl::base::CompoundStateSpace((std::vector< ompl::base::StateSpacePtr > const &)*arg1,(std::vector< double > const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::CompoundStateSpace >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_CompoundStateSpace___(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_isCompound___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isCompound();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_isHybrid___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isHybrid();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_addSubspace___(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSpacePtr *)jarg2 : &tempnull2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->addSubspace((ompl::base::StateSpacePtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaceCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspace__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspace(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspace__SWIG_1___(void * jarg1, const char * jarg2) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspace((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaceIndex___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceIndex((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_hasSubspace___(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->hasSubspace((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaceWeight__SWIG_0___(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaceWeight__SWIG_1___(void * jarg1, const char * jarg2) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeight((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_setSubspaceWeight__SWIG_0___(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setSubspaceWeight(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_setSubspaceWeight__SWIG_1___(void * jarg1, const char * jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setSubspaceWeight((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaces___(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  std::vector< ompl::base::StateSpacePtr > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< ompl::base::StateSpacePtr > *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspaces();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSubspaceWeights___(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeights();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_isLocked___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isLocked();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_lock____(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->lock();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getMaximumExtent___(void * jarg1) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getMaximumExtent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getMeasure___(void * jarg1) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_enforceBounds___(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->enforceBounds(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_satisfiesBounds___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_copyState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getSerializationLength___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSerializationLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_serialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_deserialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_distance___(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (double)((ompl::base::CompoundStateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_setLongestValidSegmentFraction___(void * jarg1, double jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLongestValidSegmentFraction(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_validSegmentCount___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->validSegmentCount((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_equalStates___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_interpolate___(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_allocDefaultStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::CompoundStateSpace const *)arg1)->allocDefaultStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_allocState___(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::State *)((ompl::base::CompoundStateSpace const *)arg1)->allocState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_freeState___(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->freeState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_getValueAddressAtIndex___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double *)((ompl::base::CompoundStateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_printState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_printSettings___(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::CompoundStateSpace const *)arg1)->printSettings(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_computeLocations___(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->computeLocations();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_setup___(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::shared_ptr< ompl::base::CompoundStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::CompoundStateSpace > *)jarg1;
  arg1 = (ompl::base::CompoundStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_copyStateData__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpacePtr *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  ompl::base::StateSpacePtr tempnull1 ;
  ompl::base::StateSpacePtr tempnull3 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = jarg1 ? (ompl::base::StateSpacePtr *)jarg1 : &tempnull1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = jarg3 ? (ompl::base::StateSpacePtr *)jarg3 : &tempnull3; 
  arg4 = (ompl::base::State *)jarg4; 
  {
    try {
      result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((std::shared_ptr< ompl::base::StateSpace > const &)*arg1,arg2,(std::shared_ptr< ompl::base::StateSpace > const &)*arg3,(ompl::base::State const *)arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_copyStateData__SWIG_2___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpacePtr *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  std::vector< std::string > *arg5 = 0 ;
  ompl::base::StateSpacePtr tempnull1 ;
  ompl::base::StateSpacePtr tempnull3 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = jarg1 ? (ompl::base::StateSpacePtr *)jarg1 : &tempnull1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = jarg3 ? (ompl::base::StateSpacePtr *)jarg3 : &tempnull3; 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (std::vector< std::string > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((std::shared_ptr< ompl::base::StateSpace > const &)*arg1,arg2,(std::shared_ptr< ompl::base::StateSpace > const &)*arg3,(ompl::base::State const *)arg4,(std::vector< std::string > const &)*arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorBounds___(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::RealVectorBounds *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (ompl::base::RealVectorBounds *)new ompl::base::RealVectorBounds(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorBounds >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_setLow__SWIG_0___(void * jarg1, double jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setLow(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_setHigh__SWIG_0___(void * jarg1, double jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setHigh(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_setLow__SWIG_1___(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setLow(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_setHigh__SWIG_1___(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setHigh(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_resize___(void * jarg1, unsigned int jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::size_t arg2 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::size_t)jarg2; 
  {
    try {
      (arg1)->resize(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_getVolume___(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::RealVectorBounds const *)arg1)->getVolume();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_getDifference___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds const > *smartarg1 = 0 ;
  std::vector< double > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::RealVectorBounds const *)arg1)->getDifference();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_check___(void * jarg1) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::RealVectorBounds const *)arg1)->check();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_low_set___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2; 
  {
    try {
      if (arg1) (arg1)->low = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_low_get___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *)& ((arg1)->low);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_high_set___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > *arg2 = (std::vector< double > *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< double > *)jarg2; 
  {
    try {
      if (arg1) (arg1)->high = *arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorBounds_high_get___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  std::vector< double > *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::vector< double > *)& ((arg1)->high);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RealVectorBounds___(void * jarg1) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::shared_ptr< ompl::base::RealVectorBounds > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorBounds > *)jarg1;
  arg1 = (ompl::base::RealVectorBounds *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorStateSampler *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::RealVectorStateSampler *)new ompl::base::RealVectorStateSampler((ompl::base::StateSpace const *)arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorStateSampler >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSampler_sampleUniform___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      (arg1)->sampleUniform(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSampler_sampleUniformNear___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::RealVectorStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSampler_sampleGaussian___(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  std::shared_ptr< ompl::base::RealVectorStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RealVectorStateSampler___(void * jarg1) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSampler > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSampler > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSampler *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorStateSpace_StateType___() {
  void * jresult ;
  ompl::base::RealVectorStateSpace::StateType *result = 0 ;
  
  {
    try {
      result = (ompl::base::RealVectorStateSpace::StateType *)new ompl::base::RealVectorStateSpace::StateType();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_StateType_values_set___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      if (arg1) (arg1)->values = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_StateType_values_get___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  {
    try {
      result = (double *) ((arg1)->values);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RealVectorStateSpace_StateType___(void * jarg1) {
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorStateSpace__SWIG_0___(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::RealVectorStateSpace *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  {
    try {
      result = (ompl::base::RealVectorStateSpace *)new ompl::base::RealVectorStateSpace(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorStateSpace >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_RealVectorStateSpace__SWIG_1___() {
  void * jresult ;
  ompl::base::RealVectorStateSpace *result = 0 ;
  
  {
    try {
      result = (ompl::base::RealVectorStateSpace *)new ompl::base::RealVectorStateSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::RealVectorStateSpace >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_RealVectorStateSpace___(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_0___(void * jarg1, double jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->addDimension(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_1___(void * jarg1, double jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->addDimension(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_2___(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->addDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_3___(void * jarg1, const char * jarg2, double jarg3, double jarg4) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      (arg1)->addDimension((std::string const &)*arg2,arg3,arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_4___(void * jarg1, const char * jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->addDimension((std::string const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_addDimension__SWIG_5___(void * jarg1, const char * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      (arg1)->addDimension((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_setBounds__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::RealVectorBounds *arg2 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  
  arg2 = (ompl::base::RealVectorBounds *)(((std::shared_ptr< const ompl::base::RealVectorBounds > *)jarg2) ? ((std::shared_ptr< const ompl::base::RealVectorBounds > *)jarg2)->get() : 0);
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::RealVectorBounds const & reference is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setBounds((ompl::base::RealVectorBounds const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_setBounds__SWIG_1___(void * jarg1, double jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setBounds(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getBounds___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  ompl::base::RealVectorBounds *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::RealVectorBounds *) &((ompl::base::RealVectorStateSpace const *)arg1)->getBounds();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::shared_ptr< const ompl::base::RealVectorBounds >(result SWIG_NO_NULL_DELETER_0); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::RealVectorStateSpace const *)arg1)->getDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getDimensionName___(void * jarg1, unsigned int jarg2) {
  const char * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (std::string *) &((ompl::base::RealVectorStateSpace const *)arg1)->getDimensionName(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getDimensionIndex___(void * jarg1, const char * jarg2) {
  int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try {
      result = (int)((ompl::base::RealVectorStateSpace const *)arg1)->getDimensionIndex((std::string const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_setDimensionName___(void * jarg1, unsigned int jarg2, const char * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try {
      (arg1)->setDimensionName(arg2,(std::string const &)*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getMaximumExtent___(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->getMaximumExtent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getMeasure___(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->getMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_enforceBounds___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->enforceBounds(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_satisfiesBounds___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::RealVectorStateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_copyState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getSerializationLength___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::RealVectorStateSpace const *)arg1)->getSerializationLength();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_serialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_deserialize___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_distance___(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_equalStates___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::RealVectorStateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_interpolate___(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_allocDefaultStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::RealVectorStateSpace const *)arg1)->allocDefaultStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_allocState___(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::State *)((ompl::base::RealVectorStateSpace const *)arg1)->allocState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_freeState___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->freeState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_getValueAddressAtIndex___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (double *)((ompl::base::RealVectorStateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_printState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_printSettings___(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::RealVectorStateSpace const *)arg1)->printSettings(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_registerProjections___(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->registerProjections();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_setup___(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::shared_ptr< ompl::base::RealVectorStateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::RealVectorStateSpace > *)jarg1;
  arg1 = (ompl::base::RealVectorStateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_SpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpacePtr arg1 ;
  ompl::base::SpaceInformation *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::StateSpacePtr *)jarg1; 
  {
    try {
      result = (ompl::base::SpaceInformation *)new ompl::base::SpaceInformation(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::SpaceInformation >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_SpaceInformation___(void * jarg1) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_isValid___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->isValid((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getStateSpace___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::base::SpaceInformation const *)arg1)->getStateSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_equalStates___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_satisfiesBounds___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_distance___(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_enforceBounds___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->enforceBounds(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printState__SWIG_0___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printState__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setStateValidityChecker__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::StateValidityCheckerPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::StateValidityCheckerPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateValidityCheckerPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setStateValidityChecker__SWIG_1___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::StateValidityCheckerFn *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::StateValidityCheckerFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityCheckerFn const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerFn const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getStateValidityChecker___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::StateValidityCheckerPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::StateValidityCheckerPtr *) &((ompl::base::SpaceInformation const *)arg1)->getStateValidityChecker();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateValidityCheckerPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setMotionValidator___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::MotionValidatorPtr *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::MotionValidatorPtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::MotionValidatorPtr *)jarg2 : &tempnull2; 
  {
    try {
      (arg1)->setMotionValidator((ompl::base::MotionValidatorPtr const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getMotionValidator__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::MotionValidatorPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::MotionValidatorPtr *) &((ompl::base::SpaceInformation const *)arg1)->getMotionValidator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::MotionValidatorPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setStateValidityCheckingResolution___(void * jarg1, double jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  double arg2 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double)jarg2; 
  {
    try {
      (arg1)->setStateValidityCheckingResolution(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getStateValidityCheckingResolution___(void * jarg1) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->getStateValidityCheckingResolution();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getStateDimension___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::SpaceInformation const *)arg1)->getStateDimension();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getSpaceMeasure___(void * jarg1) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->getSpaceMeasure();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_allocState___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::State *)((ompl::base::SpaceInformation const *)arg1)->allocState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_allocStates___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::vector< ompl::base::State * > *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ompl::base::State * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->allocStates(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_freeState___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->freeState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_freeStates___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::vector< ompl::base::State * > *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ompl::base::State * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->freeStates(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_copyState___(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_cloneState___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::State *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (ompl::base::State *)((ompl::base::SpaceInformation const *)arg1)->cloneState((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_allocStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::SpaceInformation const *)arg1)->allocStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_allocValidStateSampler___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::ValidStateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::SpaceInformation const *)arg1)->allocValidStateSampler();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::ValidStateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setValidStateSamplerAllocator___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::ValidStateSamplerAllocator *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::ValidStateSamplerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ValidStateSamplerAllocator const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setValidStateSamplerAllocator((ompl::base::ValidStateSamplerAllocator const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_clearValidStateSamplerAllocator___(void * jarg1) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->clearValidStateSamplerAllocator();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getMaximumExtent___(void * jarg1) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->getMaximumExtent();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_searchValidNearby__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, double jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  unsigned int arg5 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->searchValidNearby(arg2,(ompl::base::State const *)arg3,arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_searchValidNearby__SWIG_1___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::ValidStateSamplerPtr *arg2 = 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  double arg5 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::ValidStateSamplerPtr tempnull2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::ValidStateSamplerPtr *)jarg2 : &tempnull2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (double)jarg5; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->searchValidNearby((ompl::base::ValidStateSamplerPtr const &)*arg2,arg3,(ompl::base::State const *)arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_randomBounceMotion___(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::StateSamplerPtr *arg2 = 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  unsigned int arg4 ;
  std::vector< ompl::base::State * > *arg5 = 0 ;
  bool arg6 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr tempnull2 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::StateSamplerPtr *)jarg2 : &tempnull2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (std::vector< ompl::base::State * > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (unsigned int)((ompl::base::SpaceInformation const *)arg1)->randomBounceMotion((ompl::base::StateSamplerPtr const &)*arg2,(ompl::base::State const *)arg3,arg4,*arg5,arg6);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_checkMotion__SWIG_0___(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::pair< ompl::base::State *,double > *arg4 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (std::pair< ompl::base::State *,double > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< ompl::base::State *,double > & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_checkMotion__SWIG_1___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->checkMotion((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_checkMotion__SWIG_2___(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::vector< ompl::base::State * > *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int *arg4 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ompl::base::State * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > const & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "unsigned int & is null", 0);
    return 0;
  } 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->checkMotion((std::vector< ompl::base::State * > const &)*arg2,arg3,*arg4);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_checkMotion__SWIG_3___(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::vector< ompl::base::State * > *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< ompl::base::State * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > const & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->checkMotion((std::vector< ompl::base::State * > const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getMotionStates___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::vector< ompl::base::State * > *arg4 = 0 ;
  unsigned int arg5 ;
  bool arg6 ;
  bool arg7 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (std::vector< ompl::base::State * > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & is null", 0);
    return 0;
  } 
  arg5 = (unsigned int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  {
    try {
      result = (unsigned int)((ompl::base::SpaceInformation const *)arg1)->getMotionStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,*arg4,arg5,arg6,arg7);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_getCheckedMotionCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  unsigned int result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (unsigned int)((ompl::base::SpaceInformation const *)arg1)->getCheckedMotionCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_probabilityOfValidState___(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->probabilityOfValidState(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_averageValidMotionLength___(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (double)((ompl::base::SpaceInformation const *)arg1)->averageValidMotionLength(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_samplesPerSecond___(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  unsigned int arg5 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg3 = (double *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg4 = (double *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return ;
  } 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->samplesPerSecond(*arg2,*arg3,*arg4,arg5);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printSettings__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printSettings(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printSettings__SWIG_1___(void * jarg1) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printSettings();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printProperties__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printProperties(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_printProperties__SWIG_1___(void * jarg1) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      ((ompl::base::SpaceInformation const *)arg1)->printProperties();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_params___SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  ompl::base::ParamSet *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::ParamSet *) &(arg1)->params();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_setup___(void * jarg1) {
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->setup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_SpaceInformation_isSetup___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::SpaceInformation *arg1 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg1;
  arg1 = (ompl::base::SpaceInformation *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::SpaceInformation const *)arg1)->isSetup();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_OptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr arg1 ;
  ompl::base::OptimizationObjective *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::SpaceInformationPtr *)jarg1; 
  {
    try {
      result = (ompl::base::OptimizationObjective *)new SwigDirector_OptimizationObjective(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::OptimizationObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_OptimizationObjective___(void * jarg1) {
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_getDescription___(void * jarg1) {
  const char * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (std::string *) &((ompl::base::OptimizationObjective const *)arg1)->getDescription();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isSatisfied___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->isSatisfied(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isSatisfiedSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::isSatisfied(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_getCostThreshold___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->getCostThreshold();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_setCostThreshold___(void * jarg1, void * jarg2) {
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setCostThreshold(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isCostBetterThan___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->isCostBetterThan(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isCostBetterThanSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::isCostBetterThan(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isCostEquivalentTo___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->isCostEquivalentTo(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isCostEquivalentToSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::isCostEquivalentTo(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isFinite___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->isFinite(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isFiniteSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::isFinite(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_betterCost___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->betterCost(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_betterCostSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::betterCost(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_stateCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_motionCost___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->motionCost((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_combineCosts___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->combineCosts(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_combineCostsSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::combineCosts(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_identityCost___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->identityCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_identityCostSwigExplicitOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::identityCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_infiniteCost___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->infiniteCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_infiniteCostSwigExplicitOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::infiniteCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_initialCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->initialCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_initialCostSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::initialCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_terminalCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->terminalCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_terminalCostSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::terminalCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isSymmetric___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->isSymmetric();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_isSymmetricSwigExplicitOptimizationObjective___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::isSymmetric();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_averageStateCost___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->averageStateCost(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_averageStateCostSwigExplicitOptimizationObjective___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::averageStateCost(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_setCostToGoHeuristic___(void * jarg1, void * jarg2) {
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::CostToGoHeuristic *arg2 = 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::CostToGoHeuristic *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::CostToGoHeuristic const & is null", 0);
    return ;
  } 
  {
    try {
      (arg1)->setCostToGoHeuristic((ompl::base::CostToGoHeuristic const &)*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_hasCostToGoHeuristic___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::OptimizationObjective const *)arg1)->hasCostToGoHeuristic();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_costToGo___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::Goal *arg3 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg3 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  
  smartarg3 = (std::shared_ptr< const ompl::base::Goal > *)jarg3;
  arg3 = (ompl::base::Goal *)(smartarg3 ? smartarg3->get() : 0); 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->costToGo((ompl::base::State const *)arg2,(ompl::base::Goal const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_motionCostHeuristic___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->motionCostHeuristic((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_motionCostHeuristicSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::motionCostHeuristic((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_getSpaceInformation___(void * jarg1) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (ompl::base::SpaceInformationPtr *) &((ompl::base::OptimizationObjective const *)arg1)->getSpaceInformation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::SpaceInformationPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_allocInformedStateSampler___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::ProblemDefinitionPtr *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull2 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::InformedSampler > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::ProblemDefinitionPtr *)jarg2 : &tempnull2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->allocInformedStateSampler((ompl::base::ProblemDefinitionPtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::InformedSamplerPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_allocInformedStateSamplerSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  ompl::base::ProblemDefinitionPtr *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull2 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::InformedSampler > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::ProblemDefinitionPtr *)jarg2 : &tempnull2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::allocInformedStateSampler((ompl::base::ProblemDefinitionPtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::InformedSamplerPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective__print___(void * jarg1, void * jarg2) {
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::OptimizationObjective const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective__printSwigExplicitOptimizationObjective___(void * jarg1, void * jarg2) {
  ompl::base::OptimizationObjective *arg1 = (ompl::base::OptimizationObjective *) 0 ;
  std::ostream *arg2 = 0 ;
  std::shared_ptr< ompl::base::OptimizationObjective const > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::OptimizationObjective > *)jarg1;
  arg1 = (ompl::base::OptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::OptimizationObjective const *)arg1)->ompl::base::OptimizationObjective::print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_OptimizationObjective_director_connect___(void *objarg, SwigDirector_OptimizationObjective::SWIG_Callback0_t callback0, SwigDirector_OptimizationObjective::SWIG_Callback1_t callback1, SwigDirector_OptimizationObjective::SWIG_Callback2_t callback2, SwigDirector_OptimizationObjective::SWIG_Callback3_t callback3, SwigDirector_OptimizationObjective::SWIG_Callback4_t callback4, SwigDirector_OptimizationObjective::SWIG_Callback5_t callback5, SwigDirector_OptimizationObjective::SWIG_Callback6_t callback6, SwigDirector_OptimizationObjective::SWIG_Callback7_t callback7, SwigDirector_OptimizationObjective::SWIG_Callback8_t callback8, SwigDirector_OptimizationObjective::SWIG_Callback9_t callback9, SwigDirector_OptimizationObjective::SWIG_Callback10_t callback10, SwigDirector_OptimizationObjective::SWIG_Callback11_t callback11, SwigDirector_OptimizationObjective::SWIG_Callback12_t callback12, SwigDirector_OptimizationObjective::SWIG_Callback13_t callback13, SwigDirector_OptimizationObjective::SWIG_Callback14_t callback14, SwigDirector_OptimizationObjective::SWIG_Callback15_t callback15, SwigDirector_OptimizationObjective::SWIG_Callback16_t callback16) {
  std::shared_ptr< ompl::base::OptimizationObjective > *obj = (std::shared_ptr< ompl::base::OptimizationObjective > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_OptimizationObjective *director = static_cast<SwigDirector_OptimizationObjective *>(obj->operator->());
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_goalRegionCostToGo___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::State *arg1 = (ompl::base::State *) 0 ;
  ompl::base::Goal *arg2 = (ompl::base::Goal *) 0 ;
  std::shared_ptr< ompl::base::Goal const > *smartarg2 = 0 ;
  ompl::base::Cost result;
  
  arg1 = (ompl::base::State *)jarg1; 
  
  smartarg2 = (std::shared_ptr< const ompl::base::Goal > *)jarg2;
  arg2 = (ompl::base::Goal *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = ompl::base::goalRegionCostToGo((ompl::base::State const *)arg1,(ompl::base::Goal const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_MultiOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::MultiOptimizationObjective *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::MultiOptimizationObjective *)new ompl::base::MultiOptimizationObjective((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::MultiOptimizationObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_addObjective___(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  double arg3 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr tempnull2 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::OptimizationObjectivePtr *)jarg2 : &tempnull2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->addObjective((ompl::base::OptimizationObjectivePtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_getObjectiveCount___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  std::size_t result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::MultiOptimizationObjective const *)arg1)->getObjectiveCount();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_getObjective___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::OptimizationObjectivePtr *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (ompl::base::OptimizationObjectivePtr *) &((ompl::base::MultiOptimizationObjective const *)arg1)->getObjective(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::OptimizationObjectivePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_getObjectiveWeight___(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  double result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (double)((ompl::base::MultiOptimizationObjective const *)arg1)->getObjectiveWeight(arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_setObjectiveWeight___(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  {
    try {
      (arg1)->setObjectiveWeight(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_lock____(void * jarg1) {
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (arg1)->lock();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_isLocked___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::MultiOptimizationObjective const *)arg1)->isLocked();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_stateCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::MultiOptimizationObjective const *)arg1)->stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_motionCost___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::MultiOptimizationObjective const *)arg1)->motionCost((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_MultiOptimizationObjective___(void * jarg1) {
  ompl::base::MultiOptimizationObjective *arg1 = (ompl::base::MultiOptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::MultiOptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MultiOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::MultiOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateCostIntegralObjective__SWIG_0___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  bool arg2 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::StateCostIntegralObjective *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (ompl::base::StateCostIntegralObjective *)new SwigDirector_StateCostIntegralObjective((ompl::base::SpaceInformationPtr const &)*arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::StateCostIntegralObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_StateCostIntegralObjective__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::StateCostIntegralObjective *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::StateCostIntegralObjective *)new SwigDirector_StateCostIntegralObjective((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::StateCostIntegralObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_stateCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::StateCostIntegralObjective const *)arg1)->stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_stateCostSwigExplicitStateCostIntegralObjective___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::StateCostIntegralObjective const *)arg1)->ompl::base::StateCostIntegralObjective::stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_motionCost___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::StateCostIntegralObjective const *)arg1)->motionCost((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_motionCostSwigExplicitStateCostIntegralObjective___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::StateCostIntegralObjective const *)arg1)->ompl::base::StateCostIntegralObjective::motionCost((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_isMotionCostInterpolationEnabled___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = (bool)((ompl::base::StateCostIntegralObjective const *)arg1)->isMotionCostInterpolationEnabled();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_StateCostIntegralObjective___(void * jarg1) {
  ompl::base::StateCostIntegralObjective *arg1 = (ompl::base::StateCostIntegralObjective *) 0 ;
  std::shared_ptr< ompl::base::StateCostIntegralObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateCostIntegralObjective > *)jarg1;
  arg1 = (ompl::base::StateCostIntegralObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_director_connect___(void *objarg, SwigDirector_StateCostIntegralObjective::SWIG_Callback0_t callback0, SwigDirector_StateCostIntegralObjective::SWIG_Callback1_t callback1, SwigDirector_StateCostIntegralObjective::SWIG_Callback2_t callback2, SwigDirector_StateCostIntegralObjective::SWIG_Callback3_t callback3, SwigDirector_StateCostIntegralObjective::SWIG_Callback4_t callback4, SwigDirector_StateCostIntegralObjective::SWIG_Callback5_t callback5, SwigDirector_StateCostIntegralObjective::SWIG_Callback6_t callback6, SwigDirector_StateCostIntegralObjective::SWIG_Callback7_t callback7, SwigDirector_StateCostIntegralObjective::SWIG_Callback8_t callback8, SwigDirector_StateCostIntegralObjective::SWIG_Callback9_t callback9, SwigDirector_StateCostIntegralObjective::SWIG_Callback10_t callback10, SwigDirector_StateCostIntegralObjective::SWIG_Callback11_t callback11, SwigDirector_StateCostIntegralObjective::SWIG_Callback12_t callback12, SwigDirector_StateCostIntegralObjective::SWIG_Callback13_t callback13, SwigDirector_StateCostIntegralObjective::SWIG_Callback14_t callback14, SwigDirector_StateCostIntegralObjective::SWIG_Callback15_t callback15, SwigDirector_StateCostIntegralObjective::SWIG_Callback16_t callback16) {
  std::shared_ptr< ompl::base::StateCostIntegralObjective > *obj = (std::shared_ptr< ompl::base::StateCostIntegralObjective > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StateCostIntegralObjective *director = static_cast<SwigDirector_StateCostIntegralObjective *>(obj->operator->());
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_MaximizeMinClearanceObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::MaximizeMinClearanceObjective *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::MaximizeMinClearanceObjective *)new ompl::base::MaximizeMinClearanceObjective((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::MaximizeMinClearanceObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MaximizeMinClearanceObjective_stateCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::MaximizeMinClearanceObjective *arg1 = (ompl::base::MaximizeMinClearanceObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::MaximizeMinClearanceObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MaximizeMinClearanceObjective > *)jarg1;
  arg1 = (ompl::base::MaximizeMinClearanceObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::MaximizeMinClearanceObjective const *)arg1)->stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_MaximizeMinClearanceObjective_isCostBetterThan___(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::MaximizeMinClearanceObjective *arg1 = (ompl::base::MaximizeMinClearanceObjective *) 0 ;
  ompl::base::Cost arg2 ;
  ompl::base::Cost arg3 ;
  std::shared_ptr< ompl::base::MaximizeMinClearanceObjective const > *smartarg1 = 0 ;
  ompl::base::Cost *argp2 ;
  ompl::base::Cost *argp3 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MaximizeMinClearanceObjective > *)jarg1;
  arg1 = (ompl::base::MaximizeMinClearanceObjective *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (ompl::base::Cost *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (ompl::base::Cost *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::Cost", 0);
    return 0;
  }
  arg3 = *argp3; 
  {
    try {
      result = (bool)((ompl::base::MaximizeMinClearanceObjective const *)arg1)->isCostBetterThan(arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MaximizeMinClearanceObjective_identityCost___(void * jarg1) {
  void * jresult ;
  ompl::base::MaximizeMinClearanceObjective *arg1 = (ompl::base::MaximizeMinClearanceObjective *) 0 ;
  std::shared_ptr< ompl::base::MaximizeMinClearanceObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MaximizeMinClearanceObjective > *)jarg1;
  arg1 = (ompl::base::MaximizeMinClearanceObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::MaximizeMinClearanceObjective const *)arg1)->identityCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_MaximizeMinClearanceObjective_infiniteCost___(void * jarg1) {
  void * jresult ;
  ompl::base::MaximizeMinClearanceObjective *arg1 = (ompl::base::MaximizeMinClearanceObjective *) 0 ;
  std::shared_ptr< ompl::base::MaximizeMinClearanceObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::MaximizeMinClearanceObjective > *)jarg1;
  arg1 = (ompl::base::MaximizeMinClearanceObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      result = ((ompl::base::MaximizeMinClearanceObjective const *)arg1)->infiniteCost();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_MaximizeMinClearanceObjective___(void * jarg1) {
  ompl::base::MaximizeMinClearanceObjective *arg1 = (ompl::base::MaximizeMinClearanceObjective *) 0 ;
  std::shared_ptr< ompl::base::MaximizeMinClearanceObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::MaximizeMinClearanceObjective > *)jarg1;
  arg1 = (ompl::base::MaximizeMinClearanceObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_PathLengthOptimizationObjective___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::PathLengthOptimizationObjective *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::PathLengthOptimizationObjective *)new ompl::base::PathLengthOptimizationObjective((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ompl::base::PathLengthOptimizationObjective >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PathLengthOptimizationObjective_stateCost___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PathLengthOptimizationObjective *arg1 = (ompl::base::PathLengthOptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::PathLengthOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PathLengthOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::PathLengthOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = ((ompl::base::PathLengthOptimizationObjective const *)arg1)->stateCost((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PathLengthOptimizationObjective_motionCost___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::PathLengthOptimizationObjective *arg1 = (ompl::base::PathLengthOptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::PathLengthOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PathLengthOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::PathLengthOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::PathLengthOptimizationObjective const *)arg1)->motionCost((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PathLengthOptimizationObjective_motionCostHeuristic___(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::PathLengthOptimizationObjective *arg1 = (ompl::base::PathLengthOptimizationObjective *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  std::shared_ptr< ompl::base::PathLengthOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::Cost result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PathLengthOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::PathLengthOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  {
    try {
      result = ((ompl::base::PathLengthOptimizationObjective const *)arg1)->motionCostHeuristic((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::Cost(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_PathLengthOptimizationObjective_allocInformedStateSampler___(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::PathLengthOptimizationObjective *arg1 = (ompl::base::PathLengthOptimizationObjective *) 0 ;
  ompl::base::ProblemDefinitionPtr *arg2 = 0 ;
  unsigned int arg3 ;
  std::shared_ptr< ompl::base::PathLengthOptimizationObjective const > *smartarg1 = 0 ;
  ompl::base::ProblemDefinitionPtr tempnull2 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::InformedSampler > > result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::PathLengthOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::PathLengthOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (ompl::base::ProblemDefinitionPtr *)jarg2 : &tempnull2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = ((ompl::base::PathLengthOptimizationObjective const *)arg1)->allocInformedStateSampler((ompl::base::ProblemDefinitionPtr const &)*arg2,arg3);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new ompl::base::InformedSamplerPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_PathLengthOptimizationObjective___(void * jarg1) {
  ompl::base::PathLengthOptimizationObjective *arg1 = (ompl::base::PathLengthOptimizationObjective *) 0 ;
  std::shared_ptr< ompl::base::PathLengthOptimizationObjective > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::PathLengthOptimizationObjective > *)jarg1;
  arg1 = (ompl::base::PathLengthOptimizationObjective *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try {
      (void)arg1; delete smartarg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_Determinism_setDeterministicStateSamplerAllocator___(void * jarg1, unsigned int jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::StateSpace > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      ompl::base::Determinism::setDeterministicStateSamplerAllocator(arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_Determinism_allocHalton___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int arg2 ;
  std::shared_ptr< ompl::base::StateSpace const > *smartarg1 = 0 ;
  ompl::base::StateSamplerPtr result;
  
  
  smartarg1 = (std::shared_ptr< const ompl::base::StateSpace > *)jarg1;
  arg1 = (ompl::base::StateSpace *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = ompl::base::Determinism::allocHalton((ompl::base::StateSpace const *)arg1,arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::StateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_Determinism___() {
  void * jresult ;
  ompl::base::Determinism *result = 0 ;
  
  {
    try {
      result = (ompl::base::Determinism *)new ompl::base::Determinism();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_Determinism___(void * jarg1) {
  ompl::base::Determinism *arg1 = (ompl::base::Determinism *) 0 ;
  
  arg1 = (ompl::base::Determinism *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ValidStateSamplerAllocatorDirector___(void * jarg1) {
  ValidStateSamplerAllocatorDirector *arg1 = (ValidStateSamplerAllocatorDirector *) 0 ;
  
  arg1 = (ValidStateSamplerAllocatorDirector *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ValidStateSamplerAllocatorDirector_Invoke___(void * jarg1, void * jarg2) {
  void * jresult ;
  ValidStateSamplerAllocatorDirector *arg1 = (ValidStateSamplerAllocatorDirector *) 0 ;
  ompl::base::SpaceInformation *arg2 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg2 = 0 ;
  SwigDirector_ValidStateSamplerAllocatorDirector *darg = 0;
  ompl::base::ValidStateSamplerPtr result;
  
  arg1 = (ValidStateSamplerAllocatorDirector *)jarg1; 
  
  smartarg2 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg2;
  arg2 = (ompl::base::SpaceInformation *)(smartarg2 ? smartarg2->get() : 0); 
  darg = dynamic_cast<SwigDirector_ValidStateSamplerAllocatorDirector *>(arg1);
  {
    try {
      result = (darg)->Invoke((ompl::base::SpaceInformation const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::ValidStateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ValidStateSamplerAllocatorDirector___() {
  void * jresult ;
  ValidStateSamplerAllocatorDirector *result = 0 ;
  
  {
    try {
      result = (ValidStateSamplerAllocatorDirector *)new SwigDirector_ValidStateSamplerAllocatorDirector();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ValidStateSamplerAllocatorDirector_director_connect___(void *objarg, SwigDirector_ValidStateSamplerAllocatorDirector::SWIG_Callback0_t callback0) {
  ValidStateSamplerAllocatorDirector *obj = (ValidStateSamplerAllocatorDirector *)objarg;
  SwigDirector_ValidStateSamplerAllocatorDirector *director = static_cast<SwigDirector_ValidStateSamplerAllocatorDirector *>(obj);
  director->swig_connect_director(callback0);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new__function__SWIG_0___(void * jarg1) {
  void * jresult ;
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *arg1 = 0 ;
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *result = 0 ;
  
  arg1 = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)new std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) >((std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ValidStateSamplerAllocator_Invoke___(void * jarg1, void * jarg2) {
  void * jresult ;
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *arg1 = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *) 0 ;
  ompl::base::SpaceInformation *arg2 = (ompl::base::SpaceInformation *) 0 ;
  std::shared_ptr< ompl::base::SpaceInformation const > *smartarg2 = 0 ;
  ompl::base::ValidStateSamplerPtr result;
  
  arg1 = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)jarg1; 
  
  smartarg2 = (std::shared_ptr< const ompl::base::SpaceInformation > *)jarg2;
  arg2 = (ompl::base::SpaceInformation *)(smartarg2 ? smartarg2->get() : 0); 
  {
    try {
      result = ((std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > const *)arg1)->operator ()((ompl::base::SpaceInformation const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new ompl::base::ValidStateSamplerPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new__function__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::ValidStateSamplerPtr (*arg1)(ompl::base::SpaceInformation const *) = (ompl::base::ValidStateSamplerPtr (*)(ompl::base::SpaceInformation const *)) (ompl::base::ValidStateSamplerPtr (*)(ompl::base::SpaceInformation const *))0 ;
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *result = 0 ;
  
  arg1 = (ompl::base::ValidStateSamplerPtr (*)(ompl::base::SpaceInformation const *))jarg1; 
  {
    try {
      result = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)new std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new__function__SWIG_2___(void * jarg1) {
  void * jresult ;
  ValidStateSamplerAllocatorDirector *arg1 = (ValidStateSamplerAllocatorDirector *) 0 ;
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *result = 0 ;
  
  arg1 = (ValidStateSamplerAllocatorDirector *)jarg1; 
  {
    try {
      result = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)new_std_function_Sl_ompl_base_ValidStateSamplerPtr_Sp_ompl_base_SpaceInformation_SS_const_Sm__SP__Sg___SWIG_2(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ValidStateSamplerAllocator___(void * jarg1) {
  std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *arg1 = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *) 0 ;
  
  arg1 = (std::function< ompl::base::ValidStateSamplerPtr (ompl::base::SpaceInformation const *) > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateStateSpace__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace > *)new ompl::base::ScopedState< ompl::base::StateSpace >((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateStateSpace__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpacePtr arg1 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::StateSpacePtr *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace > *)new ompl::base::ScopedState< ompl::base::StateSpace >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateStateSpace__SWIG_2___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::StateSpace > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace > *)new ompl::base::ScopedState< ompl::base::StateSpace >((ompl::base::ScopedState< ompl::base::StateSpace > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateStateSpace__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpacePtr arg1 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace > *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::StateSpacePtr *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace > *)new ompl::base::ScopedState< ompl::base::StateSpace >(arg1,(ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ScopedStateStateSpace___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_getSpace___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->getSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_distance___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (double)((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->distance((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_random___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      (arg1)->random();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_enforceBounds___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      (arg1)->enforceBounds();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_satisfiesBounds___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  bool result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = (bool)((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->satisfiesBounds();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_reals___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  std::vector< double > result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = ((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->reals();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace__print__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace__print__SWIG_1___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      ((ompl::base::ScopedState< ompl::base::StateSpace > const *)arg1)->print();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace___ref____SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace >::StateType *) &(arg1)->operator *();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace___deref____SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace >::StateType *)(arg1)->operator ->();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateStateSpace_get__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::StateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::StateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::StateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::StateSpace >::StateType *)(arg1)->get();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateRealVectorStateSpace__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::SpaceInformationPtr tempnull1 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *result = 0 ;
  
  arg1 = jarg1 ? (ompl::base::SpaceInformationPtr *)jarg1 : &tempnull1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)new ompl::base::ScopedState< ompl::base::RealVectorStateSpace >((ompl::base::SpaceInformationPtr const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateRealVectorStateSpace__SWIG_1___(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpacePtr arg1 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::StateSpacePtr *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)new ompl::base::ScopedState< ompl::base::RealVectorStateSpace >(arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateRealVectorStateSpace__SWIG_2___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = 0 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const & is null", 0);
    return 0;
  } 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)new ompl::base::ScopedState< ompl::base::RealVectorStateSpace >((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const &)*arg1);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_new_ScopedStateRealVectorStateSpace__SWIG_3___(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpacePtr arg1 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *result = 0 ;
  
  if (jarg1) arg1 = *(ompl::base::StateSpacePtr *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)new ompl::base::ScopedState< ompl::base::RealVectorStateSpace >(arg1,(ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_delete_ScopedStateRealVectorStateSpace___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_getSpace___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::StateSpacePtr *) &((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->getSpace();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new ompl::base::StateSpacePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_distance___(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  double result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  {
    try {
      result = (double)((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->distance((ompl::base::State const *)arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_random___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      (arg1)->random();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_enforceBounds___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      (arg1)->enforceBounds();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_satisfiesBounds___(void * jarg1) {
  unsigned int jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  bool result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (bool)((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->satisfiesBounds();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_reals___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  std::vector< double > result;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = ((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->reals();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< double >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace__print__SWIG_0___(void * jarg1, void * jarg2) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & is null", 0);
    return ;
  } 
  {
    try {
      ((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->print(*arg2);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace__print__SWIG_1___(void * jarg1) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      ((ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->print();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace___ref____SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *) &(arg1)->operator *();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace___deref____SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *)(arg1)->operator ->();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_get__SWIG_0___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace >::StateType *)(arg1)->get();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_values_set___(void * jarg1, void * jarg2) {
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    try {
      if (arg1) (*arg1)->values = arg2;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OmplfBase_ScopedStateRealVectorStateSpace_values_get___(void * jarg1) {
  void * jresult ;
  ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *) 0 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::ScopedState< ompl::base::RealVectorStateSpace > *)jarg1; 
  {
    try {
      result = (double *) ((*(ompl::base::ScopedState< ompl::base::RealVectorStateSpace > const *)arg1)->values);
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT ompl::base::State * SWIGSTDCALL CSharp_OmplfBase_CompoundState_SWIGUpcast___(ompl::base::CompoundState *jarg1) {
    return (ompl::base::State *)jarg1;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateValidityChecker > * SWIGSTDCALL CSharp_OmplfBase_AllValidStateValidityChecker_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::AllValidStateValidityChecker > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateValidityChecker >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::ValidStateSampler > * SWIGSTDCALL CSharp_OmplfBase_UniformValidStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::UniformValidStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::ValidStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::ValidStateSampler > * SWIGSTDCALL CSharp_OmplfBase_GaussianValidStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::GaussianValidStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::ValidStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::ValidStateSampler > * SWIGSTDCALL CSharp_OmplfBase_ObstacleBasedValidStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::ObstacleBasedValidStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::ValidStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::ValidStateSampler > * SWIGSTDCALL CSharp_OmplfBase_MaximizeClearanceValidStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::MaximizeClearanceValidStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::ValidStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::MotionValidator > * SWIGSTDCALL CSharp_OmplfBase_DiscreteMotionValidator_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::DiscreteMotionValidator > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::MotionValidator >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSampler > * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::CompoundStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSampler > * SWIGSTDCALL CSharp_OmplfBase_SubspaceStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::SubspaceStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::DeterministicSequence > * SWIGSTDCALL CSharp_OmplfBase_HaltonSequence_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::HaltonSequence > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::DeterministicSequence >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::DeterministicSequence > * SWIGSTDCALL CSharp_OmplfBase_PrecomputedSequence_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::PrecomputedSequence > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::DeterministicSequence >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSampler > * SWIGSTDCALL CSharp_OmplfBase_DeterministicStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::DeterministicStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::DeterministicStateSampler > * SWIGSTDCALL CSharp_OmplfBase_SO2DeterministicStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::SO2DeterministicStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::DeterministicStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::DeterministicStateSampler > * SWIGSTDCALL CSharp_OmplfBase_RealVectorDeterministicStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::RealVectorDeterministicStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::DeterministicStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::DeterministicStateSampler > * SWIGSTDCALL CSharp_OmplfBase_SE2DeterministicStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::SE2DeterministicStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::DeterministicStateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSampler > * SWIGSTDCALL CSharp_OmplfBase_InformedStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::InformedStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSampler >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSpace > * SWIGSTDCALL CSharp_OmplfBase_CompoundStateSpace_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::CompoundStateSpace > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSpace >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSampler > * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSampler_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::RealVectorStateSampler > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSampler >(*jarg1) : 0;
}

SWIGEXPORT ompl::base::State * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_StateType_SWIGUpcast___(ompl::base::RealVectorStateSpace::StateType *jarg1) {
    return (ompl::base::State *)jarg1;
}

SWIGEXPORT std::shared_ptr< ompl::base::StateSpace > * SWIGSTDCALL CSharp_OmplfBase_RealVectorStateSpace_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::RealVectorStateSpace > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::StateSpace >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::OptimizationObjective > * SWIGSTDCALL CSharp_OmplfBase_MultiOptimizationObjective_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::MultiOptimizationObjective > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::OptimizationObjective >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::OptimizationObjective > * SWIGSTDCALL CSharp_OmplfBase_StateCostIntegralObjective_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::StateCostIntegralObjective > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::OptimizationObjective >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< ompl::base::OptimizationObjective > * SWIGSTDCALL CSharp_OmplfBase_PathLengthOptimizationObjective_SWIGSmartPtrUpcast___(std::shared_ptr< ompl::base::PathLengthOptimizationObjective > *jarg1) {
    return jarg1 ? new std::shared_ptr< ompl::base::OptimizationObjective >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif


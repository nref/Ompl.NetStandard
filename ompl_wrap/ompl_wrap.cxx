/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ompl_wrap(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ompl_wrap(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ompl_wrap(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}



#include "ompl/util/ClassForward.h"
#include "ompl/util/Time.h"
#include "ompl/base/Cost.h"
#include "ompl/base/GenericParam.h"
#include "ompl/base/Path.h"
#include "ompl/base/PlannerTerminationCondition.h"
#include "ompl/base/ProjectionEvaluator.h"
#include "ompl/base/State.h"
#include "ompl/base/StateSpace.h"
#include "ompl/base/spaces/RealVectorBounds.h"
#include "ompl/base/spaces/RealVectorStateSpace.h"
#include "ompl/control/Control.h"
#include "ompl/control/ControlSampler.h"
#include "ompl/control/DirectedControlSampler.h"
#include "ompl/geometric/PathGeometric.h"
#include "ompl/geometric/PathSimplifier.h"
#include "ompl/geometric/SimpleSetup.h"
#include "ompl/control/PathControl.h"
#include "ompl/control/StatePropagator.h"
#include "ompl/control/SpaceInformation.h"

using State = ompl::base::State;
using StateSpace = ompl::base::StateSpace;
using StateSamplerPtr = ompl::base::StateSamplerPtr;
using StateSamplerAllocator = std::function<StateSamplerPtr(const StateSpace *)>;
using StatePropagatorFn = std::function<void(const ompl::base::State *, const ompl::control::Control *, const double, ompl::base::State *)>;




/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ompl_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_now() {
  void * jresult ;
  ompl::time::point result;
  
  result = ompl::time::now();
  jresult = new ompl::time::point((const ompl::time::point &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_seconds__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  ompl::time::duration result;
  
  arg1 = (double)jarg1; 
  result = ompl::time::seconds(arg1);
  jresult = new ompl::time::duration((const ompl::time::duration &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_seconds__SWIG_1(void * jarg1) {
  double jresult ;
  ompl::time::duration *arg1 = 0 ;
  double result;
  
  arg1 = (ompl::time::duration *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::duration const & type is null", 0);
    return 0;
  } 
  result = (double)ompl::time::seconds((std::chrono::system_clock::duration const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_as_string(void * jarg1) {
  void * jresult ;
  ompl::time::point *arg1 = 0 ;
  std::string result;
  
  arg1 = (ompl::time::point *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::time::point const & type is null", 0);
    return 0;
  } 
  result = ompl::time::as_string((std::chrono::system_clock::time_point const &)*arg1);
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProgressDisplay__SWIG_0(void * jarg1) {
  void * jresult ;
  std::ostream *arg1 = 0 ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return 0;
  } 
  result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProgressDisplay__SWIG_1() {
  void * jresult ;
  ompl::time::ProgressDisplay *result = 0 ;
  
  result = (ompl::time::ProgressDisplay *)new ompl::time::ProgressDisplay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProgressDisplay_count(void * jarg1) {
  unsigned int jresult ;
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  result = (unsigned int)((ompl::time::ProgressDisplay const *)arg1)->count();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProgressDisplay(void * jarg1) {
  ompl::time::ProgressDisplay *arg1 = (ompl::time::ProgressDisplay *) 0 ;
  
  arg1 = (ompl::time::ProgressDisplay *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Cost__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  ompl::base::Cost *result = 0 ;
  
  arg1 = (double)jarg1; 
  result = (ompl::base::Cost *)new ompl::base::Cost(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Cost__SWIG_1() {
  void * jresult ;
  ompl::base::Cost *result = 0 ;
  
  result = (ompl::base::Cost *)new ompl::base::Cost();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Cost_value(void * jarg1) {
  double jresult ;
  ompl::base::Cost *arg1 = (ompl::base::Cost *) 0 ;
  double result;
  
  arg1 = (ompl::base::Cost *)jarg1; 
  result = (double)((ompl::base::Cost const *)arg1)->value();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Cost(void * jarg1) {
  ompl::base::Cost *arg1 = (ompl::base::Cost *) 0 ;
  
  arg1 = (ompl::base::Cost *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_GenericParam(void * jarg1) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericParam_getName(void * jarg1) {
  void * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  result = (std::string *) &((ompl::base::GenericParam const *)arg1)->getName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericParam_setName(void * jarg1, void * jarg2) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GenericParam_setValue(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setValue((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericParam_getValue(void * jarg1) {
  void * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string result;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  result = ((ompl::base::GenericParam const *)arg1)->getValue();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GenericParam_setRangeSuggestion(void * jarg1, void * jarg2) {
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->setRangeSuggestion((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GenericParam_getRangeSuggestion(void * jarg1) {
  void * jresult ;
  ompl::base::GenericParam *arg1 = (ompl::base::GenericParam *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::GenericParam *)jarg1; 
  result = (std::string *) &((ompl::base::GenericParam const *)arg1)->getRangeSuggestion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_add(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::GenericParamPtr *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::GenericParamPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::GenericParamPtr const & type is null", 0);
    return ;
  } 
  (arg1)->add((ompl::base::GenericParamPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_remove(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->remove((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_include__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::ParamSet *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::ParamSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ParamSet const & type is null", 0);
    return ;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->include((ompl::base::ParamSet const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_include__SWIG_1(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  ompl::base::ParamSet *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (ompl::base::ParamSet *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ParamSet const & type is null", 0);
    return ;
  } 
  (arg1)->include((ompl::base::ParamSet const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParamSet_setParam(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setParam((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParamSet_getParam__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::ParamSet const *)arg1)->getParam((std::string const &)*arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParamSet_setParams__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->setParams((std::map< std::string,std::string > const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParamSet_setParams__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->setParams((std::map< std::string,std::string > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_getParams__SWIG_0(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > & type is null", 0);
    return ;
  } 
  ((ompl::base::ParamSet const *)arg1)->getParams(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_getParamNames(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  ((ompl::base::ParamSet const *)arg1)->getParamNames(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_getParamValues(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  ((ompl::base::ParamSet const *)arg1)->getParamValues(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParamSet_getParams__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::map< std::string,ompl::base::GenericParamPtr > *result = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  result = (std::map< std::string,ompl::base::GenericParamPtr > *) &((ompl::base::ParamSet const *)arg1)->getParams();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParamSet_getParam__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  ompl::base::GenericParamPtr *result = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::GenericParamPtr *) &((ompl::base::ParamSet const *)arg1)->getParam((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParamSet_hasParam(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::ParamSet const *)arg1)->hasParam((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ParamSet_size(void * jarg1) {
  void * jresult ;
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  result = ((ompl::base::ParamSet const *)arg1)->size();
  jresult = new std::size_t((const std::size_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_clear(void * jarg1) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParamSet_print(void * jarg1, void * jarg2) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::ParamSet const *)arg1)->print(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ParamSet() {
  void * jresult ;
  ompl::base::ParamSet *result = 0 ;
  
  result = (ompl::base::ParamSet *)new ompl::base::ParamSet();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ParamSet(void * jarg1) {
  ompl::base::ParamSet *arg1 = (ompl::base::ParamSet *) 0 ;
  
  arg1 = (ompl::base::ParamSet *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Path(void * jarg1) {
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  
  arg1 = (ompl::base::Path *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Path_getSpaceInformation(void * jarg1) {
  void * jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  arg1 = (ompl::base::Path *)jarg1; 
  result = (ompl::base::SpaceInformationPtr *) &((ompl::base::Path const *)arg1)->getSpaceInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Path_length(void * jarg1) {
  double jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  double result;
  
  arg1 = (ompl::base::Path *)jarg1; 
  result = (double)((ompl::base::Path const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Path_cost(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  ompl::base::Cost result;
  
  arg1 = (ompl::base::Path *)jarg1; 
  arg2 = (ompl::base::OptimizationObjectivePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjectivePtr const & type is null", 0);
    return 0;
  } 
  result = ((ompl::base::Path const *)arg1)->cost((ompl::base::OptimizationObjectivePtr const &)*arg2);
  jresult = new ompl::base::Cost((const ompl::base::Cost &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Path_check(void * jarg1) {
  unsigned int jresult ;
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  bool result;
  
  arg1 = (ompl::base::Path *)jarg1; 
  result = (bool)((ompl::base::Path const *)arg1)->check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Path_print(void * jarg1, void * jarg2) {
  ompl::base::Path *arg1 = (ompl::base::Path *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::Path *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::Path const *)arg1)->print(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlannerTerminationCondition__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::base::PlannerTerminationConditionFn *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *result = 0 ;
  
  arg1 = (ompl::base::PlannerTerminationConditionFn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationConditionFn const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::PlannerTerminationCondition *)new ompl::base::PlannerTerminationCondition((ompl::base::PlannerTerminationConditionFn const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlannerTerminationCondition__SWIG_1(void * jarg1, double jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationConditionFn *arg1 = 0 ;
  double arg2 ;
  ompl::base::PlannerTerminationCondition *result = 0 ;
  
  arg1 = (ompl::base::PlannerTerminationConditionFn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationConditionFn const & type is null", 0);
    return 0;
  } 
  arg2 = (double)jarg2; 
  result = (ompl::base::PlannerTerminationCondition *)new ompl::base::PlannerTerminationCondition((ompl::base::PlannerTerminationConditionFn const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlannerTerminationCondition(void * jarg1) {
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  
  arg1 = (ompl::base::PlannerTerminationCondition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlannerTerminationCondition_terminate(void * jarg1) {
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  
  arg1 = (ompl::base::PlannerTerminationCondition *)jarg1; 
  ((ompl::base::PlannerTerminationCondition const *)arg1)->terminate();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlannerTerminationCondition_eval(void * jarg1) {
  unsigned int jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = (ompl::base::PlannerTerminationCondition *) 0 ;
  bool result;
  
  arg1 = (ompl::base::PlannerTerminationCondition *)jarg1; 
  result = (bool)((ompl::base::PlannerTerminationCondition const *)arg1)->eval();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_plannerNonTerminatingCondition() {
  void * jresult ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  result = ompl::base::plannerNonTerminatingCondition();
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_plannerAlwaysTerminatingCondition() {
  void * jresult ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  result = ompl::base::plannerAlwaysTerminatingCondition();
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_plannerOrTerminationCondition(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (ompl::base::PlannerTerminationCondition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::PlannerTerminationCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  result = ompl::base::plannerOrTerminationCondition((ompl::base::PlannerTerminationCondition const &)*arg1,(ompl::base::PlannerTerminationCondition const &)*arg2);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_plannerAndTerminationCondition(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::PlannerTerminationCondition *arg1 = 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (ompl::base::PlannerTerminationCondition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::PlannerTerminationCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  result = ompl::base::plannerAndTerminationCondition((ompl::base::PlannerTerminationCondition const &)*arg1,(ompl::base::PlannerTerminationCondition const &)*arg2);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_timedPlannerTerminationCondition__SWIG_0(double jarg1) {
  void * jresult ;
  double arg1 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (double)jarg1; 
  result = ompl::base::timedPlannerTerminationCondition(arg1);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_timedPlannerTerminationCondition__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::time::duration arg1 ;
  ompl::time::duration *argp1 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  argp1 = (ompl::time::duration *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::time::duration", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = ompl::base::timedPlannerTerminationCondition(arg1);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_timedPlannerTerminationCondition__SWIG_2(double jarg1, double jarg2) {
  void * jresult ;
  double arg1 ;
  double arg2 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  result = ompl::base::timedPlannerTerminationCondition(arg1,arg2);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_exactSolnPlannerTerminationCondition(void * jarg1) {
  void * jresult ;
  ompl::base::ProblemDefinitionPtr *arg1 = 0 ;
  SwigValueWrapper< ompl::base::PlannerTerminationCondition > result;
  
  arg1 = (ompl::base::ProblemDefinitionPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProblemDefinitionPtr const & type is null", 0);
    return 0;
  } 
  result = ompl::base::exactSolnPlannerTerminationCondition((ompl::base::ProblemDefinitionPtr const &)*arg1);
  jresult = new ompl::base::PlannerTerminationCondition((const ompl::base::PlannerTerminationCondition &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SubspaceProjectionEvaluator_setup(void * jarg1) {
  ompl::base::SubspaceProjectionEvaluator *arg1 = (ompl::base::SubspaceProjectionEvaluator *) 0 ;
  
  arg1 = (ompl::base::SubspaceProjectionEvaluator *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubspaceProjectionEvaluator_getDimension(void * jarg1) {
  unsigned int jresult ;
  ompl::base::SubspaceProjectionEvaluator *arg1 = (ompl::base::SubspaceProjectionEvaluator *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::SubspaceProjectionEvaluator *)jarg1; 
  result = (unsigned int)((ompl::base::SubspaceProjectionEvaluator const *)arg1)->getDimension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SubspaceProjectionEvaluator(void * jarg1) {
  ompl::base::SubspaceProjectionEvaluator *arg1 = (ompl::base::SubspaceProjectionEvaluator *) 0 ;
  
  arg1 = (ompl::base::SubspaceProjectionEvaluator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompoundState() {
  void * jresult ;
  ompl::base::CompoundState *result = 0 ;
  
  result = (ompl::base::CompoundState *)new ompl::base::CompoundState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompoundState(void * jarg1) {
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundState_components_set(void * jarg1, void * jarg2) {
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  ompl::base::State **arg2 = (ompl::base::State **) 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  arg2 = (ompl::base::State **)jarg2; 
  if (arg1) (arg1)->components = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundState_components_get(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundState *arg1 = (ompl::base::CompoundState *) 0 ;
  ompl::base::State **result = 0 ;
  
  arg1 = (ompl::base::CompoundState *)jarg1; 
  result = (ompl::base::State **) ((arg1)->components);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StateSpace(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_SubstateLocation_chain_set(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  std::vector< std::size_t > arg2 ;
  std::vector< std::size_t > *argp2 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  argp2 = (std::vector< std::size_t > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::size_t >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->chain = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_SubstateLocation_chain_get(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  std::vector< std::size_t > result;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  result =  ((arg1)->chain);
  jresult = new std::vector< std::size_t >((const std::vector< std::size_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_SubstateLocation_space_set(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  if (arg1) (arg1)->space = (ompl::base::StateSpace const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_SubstateLocation_space_get(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  ompl::base::StateSpace *result = 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  result = (ompl::base::StateSpace *) ((arg1)->space);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StateSpace_SubstateLocation() {
  void * jresult ;
  ompl::base::StateSpace::SubstateLocation *result = 0 ;
  
  result = (ompl::base::StateSpace::SubstateLocation *)new ompl::base::StateSpace::SubstateLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StateSpace_SubstateLocation(void * jarg1) {
  ompl::base::StateSpace::SubstateLocation *arg1 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::SubstateLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_ValueLocation_stateLocation_set(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  ompl::base::StateSpace::SubstateLocation *arg2 = (ompl::base::StateSpace::SubstateLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  arg2 = (ompl::base::StateSpace::SubstateLocation *)jarg2; 
  if (arg1) (arg1)->stateLocation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_ValueLocation_stateLocation_get(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  ompl::base::StateSpace::SubstateLocation *result = 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  result = (ompl::base::StateSpace::SubstateLocation *)& ((arg1)->stateLocation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_ValueLocation_index_set(void * jarg1, void * jarg2) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  argp2 = (std::size_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::size_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_ValueLocation_index_get(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  result =  ((arg1)->index);
  jresult = new std::size_t((const std::size_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StateSpace_ValueLocation() {
  void * jresult ;
  ompl::base::StateSpace::ValueLocation *result = 0 ;
  
  result = (ompl::base::StateSpace::ValueLocation *)new ompl::base::StateSpace::ValueLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StateSpace_ValueLocation(void * jarg1) {
  ompl::base::StateSpace::ValueLocation *arg1 = (ompl::base::StateSpace::ValueLocation *) 0 ;
  
  arg1 = (ompl::base::StateSpace::ValueLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_isCompound(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->isCompound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_isDiscrete(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->isDiscrete();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_isHybrid(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->isHybrid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_isMetricSpace(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->isMetricSpace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_hasSymmetricDistance(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->hasSymmetricDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_hasSymmetricInterpolate(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->hasSymmetricInterpolate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getName(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (std::string *) &((ompl::base::StateSpace const *)arg1)->getName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_setName(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_StateSpace_getType(void * jarg1) {
  int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  int result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (int)((ompl::base::StateSpace const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_includes__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpacePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::StateSpace const *)arg1)->includes((ompl::base::StateSpacePtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_includes__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->includes((ompl::base::StateSpace const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_covers__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpacePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::StateSpace const *)arg1)->covers((ompl::base::StateSpacePtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_covers__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->covers((ompl::base::StateSpace const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_params___SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::ParamSet *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (ompl::base::ParamSet *) &(arg1)->params();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StateSpace_getLongestValidSegmentFraction(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (double)((ompl::base::StateSpace const *)arg1)->getLongestValidSegmentFraction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_setLongestValidSegmentFraction(void * jarg1, double jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLongestValidSegmentFraction(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_validSegmentCount(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (unsigned int)((ompl::base::StateSpace const *)arg1)->validSegmentCount((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_setValidSegmentCountFactor(void * jarg1, unsigned int jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setValidSegmentCountFactor(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_getValidSegmentCountFactor(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getValidSegmentCountFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StateSpace_getLongestValidSegmentLength(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (double)((ompl::base::StateSpace const *)arg1)->getLongestValidSegmentLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_computeSignature(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->computeSignature(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_getDimension(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getDimension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StateSpace_getMaximumExtent(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (double)((ompl::base::StateSpace const *)arg1)->getMaximumExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StateSpace_getMeasure(void * jarg1) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (double)((ompl::base::StateSpace const *)arg1)->getMeasure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_enforceBounds(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::StateSpace const *)arg1)->enforceBounds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_satisfiesBounds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_copyState(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::StateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_cloneState(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->cloneState((ompl::base::State const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_StateSpace_distance(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (double)((ompl::base::StateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_getSerializationLength(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::StateSpace const *)arg1)->getSerializationLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_serialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::StateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_deserialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  ((ompl::base::StateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_equalStates(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_interpolate(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  ((ompl::base::StateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_allocDefaultStateSampler(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = ((ompl::base::StateSpace const *)arg1)->allocDefaultStateSampler();
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_allocStateSampler(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = ((ompl::base::StateSpace const *)arg1)->allocStateSampler();
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_setStateSamplerAllocator(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  StateSamplerAllocator *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (StateSamplerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "StateSamplerAllocator const & type is null", 0);
    return ;
  } 
  (arg1)->setStateSamplerAllocator((StateSamplerAllocator const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_clearStateSamplerAllocator(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  (arg1)->clearStateSamplerAllocator();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_allocState(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->allocState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_freeState(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::StateSpace const *)arg1)->freeState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getValueAddressAtIndex__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getValueLocations(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::vector< ompl::base::StateSpace::ValueLocation > *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (std::vector< ompl::base::StateSpace::ValueLocation > *) &((ompl::base::StateSpace const *)arg1)->getValueLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getValueLocationsByName(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::map< std::string,ompl::base::StateSpace::ValueLocation > *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (std::map< std::string,ompl::base::StateSpace::ValueLocation > *) &((ompl::base::StateSpace const *)arg1)->getValueLocationsByName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getValueAddressAtLocation__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace::ValueLocation *arg3 = 0 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace::ValueLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpace::ValueLocation const & type is null", 0);
    return 0;
  } 
  result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtLocation(arg2,(ompl::base::StateSpace::ValueLocation const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getValueAddressAtName__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::string *arg3 = 0 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (double *)((ompl::base::StateSpace const *)arg1)->getValueAddressAtName(arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_copyToReals(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::vector< double > *arg2 = 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::StateSpace const *)arg1)->copyToReals(*arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_copyFromReals(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->copyFromReals(arg2,(std::vector< double > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_registerProjection(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  ompl::base::ProjectionEvaluatorPtr *arg3 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ProjectionEvaluatorPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProjectionEvaluatorPtr const & type is null", 0);
    return ;
  } 
  (arg1)->registerProjection((std::string const &)*arg2,(ompl::base::ProjectionEvaluatorPtr const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_registerDefaultProjection(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::ProjectionEvaluatorPtr *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::ProjectionEvaluatorPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ProjectionEvaluatorPtr const & type is null", 0);
    return ;
  } 
  (arg1)->registerDefaultProjection((ompl::base::ProjectionEvaluatorPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_registerProjections(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  (arg1)->registerProjections();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getProjection(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::ProjectionEvaluator > > result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = ((ompl::base::StateSpace const *)arg1)->getProjection((std::string const &)*arg2);
  jresult = new ompl::base::ProjectionEvaluatorPtr((const ompl::base::ProjectionEvaluatorPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getDefaultProjection(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::base::ProjectionEvaluator > > result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = ((ompl::base::StateSpace const *)arg1)->getDefaultProjection();
  jresult = new ompl::base::ProjectionEvaluatorPtr((const ompl::base::ProjectionEvaluatorPtr &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_hasProjection(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::StateSpace const *)arg1)->hasProjection((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StateSpace_hasDefaultProjection(void * jarg1) {
  unsigned int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (bool)((ompl::base::StateSpace const *)arg1)->hasDefaultProjection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getRegisteredProjections(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::map< std::string,ompl::base::ProjectionEvaluatorPtr > *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (std::map< std::string,ompl::base::ProjectionEvaluatorPtr > *) &((ompl::base::StateSpace const *)arg1)->getRegisteredProjections();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_printState__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_printState__SWIG_1(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::StateSpace const *)arg1)->printState((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_printSettings(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->printSettings(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_printProjections(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->printProjections(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_sanityChecks__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  unsigned int arg4 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  ((ompl::base::StateSpace const *)arg1)->sanityChecks(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_sanityChecks__SWIG_1(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  ((ompl::base::StateSpace const *)arg1)->sanityChecks();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_diagram(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->diagram(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_list(void * jarg1, void * jarg2) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->list(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_Diagram(void * jarg1) {
  std::ostream *arg1 = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ompl::base::StateSpace::Diagram(*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_List(void * jarg1) {
  std::ostream *arg1 = 0 ;
  
  arg1 = (std::ostream *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ompl::base::StateSpace::List(*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_allocSubspaceStateSampler__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpacePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  result = ((ompl::base::StateSpace const *)arg1)->allocSubspaceStateSampler((ompl::base::StateSpacePtr const &)*arg2);
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_allocSubspaceStateSampler__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  result = ((ompl::base::StateSpace const *)arg1)->allocSubspaceStateSampler((ompl::base::StateSpace const *)arg2);
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getSubstateAtLocation__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace::SubstateLocation *arg3 = 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace::SubstateLocation *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpace::SubstateLocation const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::State *)((ompl::base::StateSpace const *)arg1)->getSubstateAtLocation(arg2,(ompl::base::StateSpace::SubstateLocation const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StateSpace_getSubstateLocationsByName(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  std::map< std::string,ompl::base::StateSpace::SubstateLocation > *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (std::map< std::string,ompl::base::StateSpace::SubstateLocation > *) &((ompl::base::StateSpace const *)arg1)->getSubstateLocationsByName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_getCommonSubspaces__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpacePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->getCommonSubspaces((ompl::base::StateSpacePtr const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_getCommonSubspaces__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return ;
  } 
  ((ompl::base::StateSpace const *)arg1)->getCommonSubspaces((ompl::base::StateSpace const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_computeLocations(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  (arg1)->computeLocations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StateSpace_setup(void * jarg1) {
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompoundStateSpace__SWIG_0() {
  void * jresult ;
  ompl::base::CompoundStateSpace *result = 0 ;
  
  result = (ompl::base::CompoundStateSpace *)new ompl::base::CompoundStateSpace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompoundStateSpace__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  std::vector< ompl::base::StateSpacePtr > *arg1 = 0 ;
  std::vector< double > *arg2 = 0 ;
  ompl::base::CompoundStateSpace *result = 0 ;
  
  arg1 = (std::vector< ompl::base::StateSpacePtr > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::StateSpacePtr > const & type is null", 0);
    return 0;
  } 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::CompoundStateSpace *)new ompl::base::CompoundStateSpace((std::vector< ompl::base::StateSpacePtr > const &)*arg1,(std::vector< double > const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompoundStateSpace(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_isCompound(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isCompound();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_isHybrid(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isHybrid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_addSubspace(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::StateSpacePtr *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpacePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->addSubspace((ompl::base::StateSpacePtr const &)*arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaceCount(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_getSubspace__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ompl::base::StateSpacePtr *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspace(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_getSubspace__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::StateSpacePtr *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspace((std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaceIndex(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceIndex((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_hasSubspace(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->hasSubspace((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaceWeight__SWIG_0(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeight(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaceWeight__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeight((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_setSubspaceWeight__SWIG_0(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setSubspaceWeight(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_setSubspaceWeight__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->setSubspaceWeight((std::string const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaces(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::vector< ompl::base::StateSpacePtr > *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (std::vector< ompl::base::StateSpacePtr > *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspaces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_getSubspaceWeights(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (std::vector< double > *) &((ompl::base::CompoundStateSpace const *)arg1)->getSubspaceWeights();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_isLocked(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->isLocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_lock_(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  (arg1)->lock();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_allocSubspaceStateSampler(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::StateSpace *arg2 = (ompl::base::StateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::StateSpace *)jarg2; 
  result = ((ompl::base::CompoundStateSpace const *)arg1)->allocSubspaceStateSampler((ompl::base::StateSpace const *)arg2);
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_getDimension(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getDimension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CompoundStateSpace_getMaximumExtent(void * jarg1) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getMaximumExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_CompoundStateSpace_getMeasure(void * jarg1) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (double)((ompl::base::CompoundStateSpace const *)arg1)->getMeasure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_enforceBounds(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::CompoundStateSpace const *)arg1)->enforceBounds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_satisfiesBounds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_copyState(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::CompoundStateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_getSerializationLength(void * jarg1) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->getSerializationLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_serialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::CompoundStateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_deserialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  ((ompl::base::CompoundStateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_CompoundStateSpace_distance(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (double)((ompl::base::CompoundStateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_setLongestValidSegmentFraction(void * jarg1, double jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLongestValidSegmentFraction(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_validSegmentCount(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (unsigned int)((ompl::base::CompoundStateSpace const *)arg1)->validSegmentCount((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompoundStateSpace_equalStates(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (bool)((ompl::base::CompoundStateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_interpolate(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  ((ompl::base::CompoundStateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_allocDefaultStateSampler(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = ((ompl::base::CompoundStateSpace const *)arg1)->allocDefaultStateSampler();
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_allocState(void * jarg1) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  result = (ompl::base::State *)((ompl::base::CompoundStateSpace const *)arg1)->allocState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_freeState(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::CompoundStateSpace const *)arg1)->freeState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundStateSpace_getValueAddressAtIndex(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double *)((ompl::base::CompoundStateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_printState(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::CompoundStateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_printSettings(void * jarg1, void * jarg2) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::CompoundStateSpace const *)arg1)->printSettings(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_computeLocations(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  (arg1)->computeLocations();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundStateSpace_setup(void * jarg1) {
  ompl::base::CompoundStateSpace *arg1 = (ompl::base::CompoundStateSpace *) 0 ;
  
  arg1 = (ompl::base::CompoundStateSpace *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT int SWIGSTDCALL CSharp_copyStateData__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpacePtr *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = (ompl::base::StateSpacePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpacePtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::State *)jarg4; 
  result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((std::shared_ptr< ompl::base::StateSpace > const &)*arg1,arg2,(std::shared_ptr< ompl::base::StateSpace > const &)*arg3,(ompl::base::State const *)arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_copyStateData__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace *arg3 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((ompl::base::StateSpace const *)arg1,arg2,(ompl::base::StateSpace const *)arg3,(ompl::base::State const *)arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_copyStateData__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpacePtr *arg3 = 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  std::vector< std::string > *arg5 = 0 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = (ompl::base::StateSpacePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpacePtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (std::vector< std::string > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((std::shared_ptr< ompl::base::StateSpace > const &)*arg1,arg2,(std::shared_ptr< ompl::base::StateSpace > const &)*arg3,(ompl::base::State const *)arg4,(std::vector< std::string > const &)*arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_copyStateData__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::StateSpace *arg3 = (ompl::base::StateSpace *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  std::vector< std::string > *arg5 = 0 ;
  ompl::base::AdvancedStateCopyOperation result;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::StateSpace *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (std::vector< std::string > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (ompl::base::AdvancedStateCopyOperation)ompl::base::copyStateData((ompl::base::StateSpace const *)arg1,arg2,(ompl::base::StateSpace const *)arg3,(ompl::base::State const *)arg4,(std::vector< std::string > const &)*arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealVectorBounds(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::RealVectorBounds *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ompl::base::RealVectorBounds *)new ompl::base::RealVectorBounds(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_setLow__SWIG_0(void * jarg1, double jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_setHigh__SWIG_0(void * jarg1, double jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setHigh(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_setLow__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setLow(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_setHigh__SWIG_1(void * jarg1, unsigned int jarg2, double jarg3) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setHigh(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_resize(void * jarg1, void * jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::size_t arg2 ;
  std::size_t *argp2 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  argp2 = (std::size_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::size_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_RealVectorBounds_getVolume(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  double result;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  result = (double)((ompl::base::RealVectorBounds const *)arg1)->getVolume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorBounds_getDifference(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > result;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  result = ((ompl::base::RealVectorBounds const *)arg1)->getDifference();
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_check(void * jarg1) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  ((ompl::base::RealVectorBounds const *)arg1)->check();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_low_set(void * jarg1, void * jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->low = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorBounds_low_get(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > result;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  result =  ((arg1)->low);
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorBounds_high_set(void * jarg1, void * jarg2) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > arg2 ;
  std::vector< double > *argp2 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  argp2 = (std::vector< double > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< double >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->high = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorBounds_high_get(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  std::vector< double > result;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  result =  ((arg1)->high);
  jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealVectorBounds(void * jarg1) {
  ompl::base::RealVectorBounds *arg1 = (ompl::base::RealVectorBounds *) 0 ;
  
  arg1 = (ompl::base::RealVectorBounds *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealVectorStateSampler(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpace *arg1 = (ompl::base::StateSpace *) 0 ;
  ompl::base::RealVectorStateSampler *result = 0 ;
  
  arg1 = (ompl::base::StateSpace *)jarg1; 
  result = (ompl::base::RealVectorStateSampler *)new ompl::base::RealVectorStateSampler((ompl::base::StateSpace const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSampler_sampleUniform(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->sampleUniform(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSampler_sampleUniformNear(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  
  arg1 = (ompl::base::RealVectorStateSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->sampleUniformNear(arg2,(ompl::base::State const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSampler_sampleGaussian(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  
  arg1 = (ompl::base::RealVectorStateSampler *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->sampleGaussian(arg2,(ompl::base::State const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealVectorStateSampler(void * jarg1) {
  ompl::base::RealVectorStateSampler *arg1 = (ompl::base::RealVectorStateSampler *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSampler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealVectorStateSpace_StateType() {
  void * jresult ;
  ompl::base::RealVectorStateSpace::StateType *result = 0 ;
  
  result = (ompl::base::RealVectorStateSpace::StateType *)new ompl::base::RealVectorStateSpace::StateType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_StateType_values_set(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  double *arg2 = (double *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  arg2 = (double *)jarg2; 
  if (arg1) (arg1)->values = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_StateType_values_get(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  result = (double *) ((arg1)->values);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealVectorStateSpace_StateType(void * jarg1) {
  ompl::base::RealVectorStateSpace::StateType *arg1 = (ompl::base::RealVectorStateSpace::StateType *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace::StateType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealVectorStateSpace__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  ompl::base::RealVectorStateSpace *result = 0 ;
  
  arg1 = (unsigned int)jarg1; 
  result = (ompl::base::RealVectorStateSpace *)new ompl::base::RealVectorStateSpace(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RealVectorStateSpace__SWIG_1() {
  void * jresult ;
  ompl::base::RealVectorStateSpace *result = 0 ;
  
  result = (ompl::base::RealVectorStateSpace *)new ompl::base::RealVectorStateSpace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RealVectorStateSpace(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_0(void * jarg1, double jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->addDimension(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_1(void * jarg1, double jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addDimension(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_2(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  (arg1)->addDimension();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_3(void * jarg1, void * jarg2, double jarg3, double jarg4) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->addDimension((std::string const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_4(void * jarg1, void * jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->addDimension((std::string const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_addDimension__SWIG_5(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->addDimension((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_setBounds__SWIG_0(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::RealVectorBounds *arg2 = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::RealVectorBounds *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::RealVectorBounds const & type is null", 0);
    return ;
  } 
  (arg1)->setBounds((ompl::base::RealVectorBounds const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_setBounds__SWIG_1(void * jarg1, double jarg2, double jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setBounds(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_getBounds(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::RealVectorBounds *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (ompl::base::RealVectorBounds *) &((ompl::base::RealVectorStateSpace const *)arg1)->getBounds();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealVectorStateSpace_getDimension(void * jarg1) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::RealVectorStateSpace const *)arg1)->getDimension();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_getDimensionName(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (std::string *) &((ompl::base::RealVectorStateSpace const *)arg1)->getDimensionName(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RealVectorStateSpace_getDimensionIndex(void * jarg1, void * jarg2) {
  int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return 0;
  } 
  result = (int)((ompl::base::RealVectorStateSpace const *)arg1)->getDimensionIndex((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_setDimensionName(void * jarg1, unsigned int jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::string const & type is null", 0);
    return ;
  } 
  (arg1)->setDimensionName(arg2,(std::string const &)*arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_RealVectorStateSpace_getMaximumExtent(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->getMaximumExtent();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_RealVectorStateSpace_getMeasure(void * jarg1) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  double result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->getMeasure();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_enforceBounds(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->enforceBounds(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealVectorStateSpace_satisfiesBounds(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  result = (bool)((ompl::base::RealVectorStateSpace const *)arg1)->satisfiesBounds((ompl::base::State const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_copyState(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->copyState(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealVectorStateSpace_getSerializationLength(void * jarg1) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (unsigned int)((ompl::base::RealVectorStateSpace const *)arg1)->getSerializationLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_serialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  void *arg2 = (void *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->serialize(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_deserialize(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (void *)jarg3; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->deserialize(arg2,(void const *)arg3);
}


SWIGEXPORT double SWIGSTDCALL CSharp_RealVectorStateSpace_distance(void * jarg1, void * jarg2, void * jarg3) {
  double jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (double)((ompl::base::RealVectorStateSpace const *)arg1)->distance((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RealVectorStateSpace_equalStates(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  bool result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (bool)((ompl::base::RealVectorStateSpace const *)arg1)->equalStates((ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_interpolate(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->interpolate((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_allocDefaultStateSampler(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  StateSamplerPtr result;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = ((ompl::base::RealVectorStateSpace const *)arg1)->allocDefaultStateSampler();
  jresult = new StateSamplerPtr((const StateSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_allocState(void * jarg1) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  result = (ompl::base::State *)((ompl::base::RealVectorStateSpace const *)arg1)->allocState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_freeState(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  ((ompl::base::RealVectorStateSpace const *)arg1)->freeState(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RealVectorStateSpace_getValueAddressAtIndex(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  unsigned int arg3 ;
  double *result = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (double *)((ompl::base::RealVectorStateSpace const *)arg1)->getValueAddressAtIndex(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_printState(void * jarg1, void * jarg2, void * jarg3) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  std::ostream *arg3 = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::RealVectorStateSpace const *)arg1)->printState((ompl::base::State const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_printSettings(void * jarg1, void * jarg2) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::base::RealVectorStateSpace const *)arg1)->printSettings(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_registerProjections(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  (arg1)->registerProjections();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RealVectorStateSpace_setup(void * jarg1) {
  ompl::base::RealVectorStateSpace *arg1 = (ompl::base::RealVectorStateSpace *) 0 ;
  
  arg1 = (ompl::base::RealVectorStateSpace *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompoundControl() {
  void * jresult ;
  ompl::control::CompoundControl *result = 0 ;
  
  result = (ompl::control::CompoundControl *)new ompl::control::CompoundControl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompoundControl(void * jarg1) {
  ompl::control::CompoundControl *arg1 = (ompl::control::CompoundControl *) 0 ;
  
  arg1 = (ompl::control::CompoundControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControl_components_set(void * jarg1, void * jarg2) {
  ompl::control::CompoundControl *arg1 = (ompl::control::CompoundControl *) 0 ;
  ompl::control::Control **arg2 = (ompl::control::Control **) 0 ;
  
  arg1 = (ompl::control::CompoundControl *)jarg1; 
  arg2 = (ompl::control::Control **)jarg2; 
  if (arg1) (arg1)->components = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompoundControl_components_get(void * jarg1) {
  void * jresult ;
  ompl::control::CompoundControl *arg1 = (ompl::control::CompoundControl *) 0 ;
  ompl::control::Control **result = 0 ;
  
  arg1 = (ompl::control::CompoundControl *)jarg1; 
  result = (ompl::control::Control **) ((arg1)->components);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ControlSampler(void * jarg1) {
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ControlSampler_sample__SWIG_0(void * jarg1, void * jarg2) {
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  (arg1)->sample(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ControlSampler_sample__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  (arg1)->sample(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ControlSampler_sampleNext__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  (arg1)->sampleNext(arg2,(ompl::control::Control const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ControlSampler_sampleNext__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  (arg1)->sampleNext(arg2,(ompl::control::Control const *)arg3,(ompl::base::State const *)arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ControlSampler_sampleStepCount(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::control::ControlSampler *arg1 = (ompl::control::ControlSampler *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (ompl::control::ControlSampler *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->sampleStepCount(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CompoundControlSampler(void * jarg1) {
  void * jresult ;
  ompl::control::ControlSpace *arg1 = (ompl::control::ControlSpace *) 0 ;
  ompl::control::CompoundControlSampler *result = 0 ;
  
  arg1 = (ompl::control::ControlSpace *)jarg1; 
  result = (ompl::control::CompoundControlSampler *)new ompl::control::CompoundControlSampler((ompl::control::ControlSpace const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CompoundControlSampler(void * jarg1) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControlSampler_addSampler(void * jarg1, void * jarg2) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  ompl::control::ControlSamplerPtr *arg2 = 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  arg2 = (ompl::control::ControlSamplerPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::control::ControlSamplerPtr const & type is null", 0);
    return ;
  } 
  (arg1)->addSampler((ompl::control::ControlSamplerPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControlSampler_sample__SWIG_0(void * jarg1, void * jarg2) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  (arg1)->sample(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControlSampler_sample__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  (arg1)->sample(arg2,(ompl::base::State const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControlSampler_sampleNext__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  (arg1)->sampleNext(arg2,(ompl::control::Control const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CompoundControlSampler_sampleNext__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ompl::control::CompoundControlSampler *arg1 = (ompl::control::CompoundControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::CompoundControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  (arg1)->sampleNext(arg2,(ompl::control::Control const *)arg3,(ompl::base::State const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DirectedControlSampler(void * jarg1) {
  ompl::control::DirectedControlSampler *arg1 = (ompl::control::DirectedControlSampler *) 0 ;
  
  arg1 = (ompl::control::DirectedControlSampler *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectedControlSampler_sampleTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ompl::control::DirectedControlSampler *arg1 = (ompl::control::DirectedControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::control::DirectedControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  result = (unsigned int)(arg1)->sampleTo(arg2,(ompl::base::State const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DirectedControlSampler_sampleTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::control::DirectedControlSampler *arg1 = (ompl::control::DirectedControlSampler *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  ompl::base::State *arg4 = (ompl::base::State *) 0 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::control::DirectedControlSampler *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (ompl::base::State *)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  result = (unsigned int)(arg1)->sampleTo(arg2,(ompl::control::Control const *)arg3,(ompl::base::State const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathGeometric__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = (ompl::base::SpaceInformationPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SpaceInformationPtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathGeometric__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::geometric::PathGeometric const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathGeometric__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = (ompl::base::SpaceInformationPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SpaceInformationPtr const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::State *)jarg2; 
  result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1,(ompl::base::State const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathGeometric__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = (ompl::base::SpaceInformationPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SpaceInformationPtr const & type is null", 0);
    return 0;
  } 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  result = (ompl::geometric::PathGeometric *)new ompl::geometric::PathGeometric((ompl::base::SpaceInformationPtr const &)*arg1,(ompl::base::State const *)arg2,(ompl::base::State const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PathGeometric(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathGeometric_cost(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  ompl::base::Cost result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::OptimizationObjectivePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjectivePtr const & type is null", 0);
    return 0;
  } 
  result = ((ompl::geometric::PathGeometric const *)arg1)->cost((ompl::base::OptimizationObjectivePtr const &)*arg2);
  jresult = new ompl::base::Cost((const ompl::base::Cost &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PathGeometric_length(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  double result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = (double)((ompl::geometric::PathGeometric const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathGeometric_check(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = (bool)((ompl::geometric::PathGeometric const *)arg1)->check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PathGeometric_smoothness(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  double result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = (double)((ompl::geometric::PathGeometric const *)arg1)->smoothness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PathGeometric_clearance(void * jarg1) {
  double jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  double result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = (double)((ompl::geometric::PathGeometric const *)arg1)->clearance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_print(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::geometric::PathGeometric const *)arg1)->print(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_printAsMatrix(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::geometric::PathGeometric const *)arg1)->printAsMatrix(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_interpolate__SWIG_0(void * jarg1, unsigned int jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->interpolate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_interpolate__SWIG_1(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  (arg1)->interpolate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_subdivide(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  (arg1)->subdivide();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_reverse(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathGeometric_checkAndRepair(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  std::pair< bool,bool > result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (arg1)->checkAndRepair(arg2);
  jresult = new std::pair< bool,bool >((const std::pair< bool,bool > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_overlay__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & type is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (arg1)->overlay((ompl::geometric::PathGeometric const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_overlay__SWIG_1(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & type is null", 0);
    return ;
  } 
  (arg1)->overlay((ompl::geometric::PathGeometric const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_append__SWIG_0(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->append((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_append__SWIG_1(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric const & type is null", 0);
    return ;
  } 
  (arg1)->append((ompl::geometric::PathGeometric const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_prepend(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->prepend((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_keepAfter(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->keepAfter((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_keepBefore(void * jarg1, void * jarg2) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->keepBefore((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_random(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  (arg1)->random();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathGeometric_randomValid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->randomValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PathGeometric_getClosestIndex(void * jarg1, void * jarg2) {
  int jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  int result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  result = (int)((ompl::geometric::PathGeometric const *)arg1)->getClosestIndex((ompl::base::State const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathGeometric_getStates(void * jarg1) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::vector< ompl::base::State * > *result = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = (std::vector< ompl::base::State * > *) &(arg1)->getStates();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathGeometric_getState__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  unsigned int arg2 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ompl::base::State *)(arg1)->getState(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathGeometric_getStateCount(void * jarg1) {
  void * jresult ;
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  result = ((ompl::geometric::PathGeometric const *)arg1)->getStateCount();
  jresult = new std::size_t((const std::size_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathGeometric_clear(void * jarg1) {
  ompl::geometric::PathGeometric *arg1 = (ompl::geometric::PathGeometric *) 0 ;
  
  arg1 = (ompl::geometric::PathGeometric *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathSimplifier__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< ompl::base::SpaceInformation > > arg1 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  ompl::base::OptimizationObjectivePtr *arg3 = 0 ;
  ompl::base::SpaceInformationPtr *argp1 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  argp1 = (ompl::base::SpaceInformationPtr *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::SpaceInformationPtr", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (ompl::base::GoalPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::GoalPtr const & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::OptimizationObjectivePtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjectivePtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1,(ompl::base::GoalPtr const &)*arg2,(ompl::base::OptimizationObjectivePtr const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathSimplifier__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< ompl::base::SpaceInformation > > arg1 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  ompl::base::SpaceInformationPtr *argp1 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  argp1 = (ompl::base::SpaceInformationPtr *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::SpaceInformationPtr", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (ompl::base::GoalPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::GoalPtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1,(ompl::base::GoalPtr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathSimplifier__SWIG_2(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::shared_ptr< ompl::base::SpaceInformation > > arg1 ;
  ompl::base::SpaceInformationPtr *argp1 ;
  ompl::geometric::PathSimplifier *result = 0 ;
  
  argp1 = (ompl::base::SpaceInformationPtr *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::base::SpaceInformationPtr", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (ompl::geometric::PathSimplifier *)new ompl::geometric::PathSimplifier(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PathSimplifier(void * jarg1) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_reduceVertices__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->reduceVertices(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_reduceVertices__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->reduceVertices(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_reduceVertices__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->reduceVertices(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_reduceVertices__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->reduceVertices(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_shortcutPath__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_shortcutPath__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_shortcutPath__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->shortcutPath(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_shortcutPath__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->shortcutPath(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_shortcutPath__SWIG_4(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->shortcutPath(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_perturbPath__SWIG_0(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_perturbPath__SWIG_1(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_perturbPath__SWIG_2(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->perturbPath(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_perturbPath__SWIG_3(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->perturbPath(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_collapseCloseVertices__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->collapseCloseVertices(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_collapseCloseVertices__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->collapseCloseVertices(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_collapseCloseVertices__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->collapseCloseVertices(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathSimplifier_smoothBSpline__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, double jarg4) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  double arg4 ;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->smoothBSpline(*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathSimplifier_smoothBSpline__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return ;
  } 
  arg3 = (unsigned int)jarg3; 
  (arg1)->smoothBSpline(*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathSimplifier_smoothBSpline__SWIG_2(void * jarg1, void * jarg2) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return ;
  } 
  (arg1)->smoothBSpline(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_simplifyMax(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->simplifyMax(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_simplify__SWIG_0(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->simplify(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_simplify__SWIG_1(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->simplify(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_simplify__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->simplify(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_simplify__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->simplify(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_0(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_1(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_2(void * jarg1, void * jarg2, double jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->findBetterGoal(*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_3(void * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (double)jarg3; 
  result = (bool)(arg1)->findBetterGoal(*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_4(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5, double jarg6) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  double arg5 ;
  double arg6 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_5(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, double jarg5) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  double arg5 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  arg5 = (double)jarg5; 
  result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_6(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  unsigned int arg4 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  arg4 = (unsigned int)jarg4; 
  result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_findBetterGoal__SWIG_7(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  ompl::geometric::PathGeometric *arg2 = 0 ;
  ompl::base::PlannerTerminationCondition *arg3 = 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = (ompl::geometric::PathGeometric *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::geometric::PathGeometric & type is null", 0);
    return 0;
  } 
  arg3 = (ompl::base::PlannerTerminationCondition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->findBetterGoal(*arg2,(ompl::base::PlannerTerminationCondition const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathSimplifier_freeStates__SWIG_0(void * jarg1, unsigned int jarg2) {
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  bool arg2 ;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->freeStates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathSimplifier_freeStates__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::PathSimplifier *arg1 = (ompl::geometric::PathSimplifier *) 0 ;
  bool result;
  
  arg1 = (ompl::geometric::PathSimplifier *)jarg1; 
  result = (bool)((ompl::geometric::PathSimplifier const *)arg1)->freeStates();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleSetup__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::geometric::SimpleSetup *result = 0 ;
  
  arg1 = (ompl::base::SpaceInformationPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SpaceInformationPtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::SimpleSetup *)new ompl::geometric::SimpleSetup((ompl::base::SpaceInformationPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SimpleSetup__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  ompl::geometric::SimpleSetup *result = 0 ;
  
  arg1 = (ompl::base::StateSpacePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::geometric::SimpleSetup *)new ompl::geometric::SimpleSetup((ompl::base::StateSpacePtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SimpleSetup(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getSpaceInformation(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::SpaceInformationPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::SpaceInformationPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getSpaceInformation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getProblemDefinition__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ProblemDefinitionPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::ProblemDefinitionPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getProblemDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getStateSpace(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateSpacePtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::StateSpacePtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getStateSpace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getStateValidityChecker(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateValidityCheckerPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::StateValidityCheckerPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getStateValidityChecker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getGoal(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::GoalPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::GoalPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getGoal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getPlanner(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::PlannerPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getPlanner();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getPlannerAllocator(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerAllocator *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::PlannerAllocator *) &((ompl::geometric::SimpleSetup const *)arg1)->getPlannerAllocator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getPathSimplifier__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::geometric::PathSimplifierPtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::geometric::PathSimplifierPtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getPathSimplifier();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getOptimizationObjective(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::OptimizationObjectivePtr *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::base::OptimizationObjectivePtr *) &((ompl::geometric::SimpleSetup const *)arg1)->getOptimizationObjective();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SimpleSetup_haveExactSolutionPath(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  bool result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (bool)((ompl::geometric::SimpleSetup const *)arg1)->haveExactSolutionPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SimpleSetup_haveSolutionPath(void * jarg1) {
  unsigned int jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  bool result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (bool)((ompl::geometric::SimpleSetup const *)arg1)->haveSolutionPath();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getSolutionPlannerName(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::string result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = ((ompl::geometric::SimpleSetup const *)arg1)->getSolutionPlannerName();
  jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getSolutionPath(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::geometric::PathGeometric *result = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (ompl::geometric::PathGeometric *) &((ompl::geometric::SimpleSetup const *)arg1)->getSolutionPath();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_getPlannerData(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerData *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::PlannerData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerData & type is null", 0);
    return ;
  } 
  ((ompl::geometric::SimpleSetup const *)arg1)->getPlannerData(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setStateValidityChecker__SWIG_0(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateValidityCheckerPtr *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::StateValidityCheckerPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityCheckerPtr const & type is null", 0);
    return ;
  } 
  (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setStateValidityChecker__SWIG_1(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::StateValidityCheckerFn *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::StateValidityCheckerFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateValidityCheckerFn const & type is null", 0);
    return ;
  } 
  (arg1)->setStateValidityChecker((ompl::base::StateValidityCheckerFn const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setOptimizationObjective(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::OptimizationObjectivePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjectivePtr const & type is null", 0);
    return ;
  } 
  (arg1)->setOptimizationObjective((ompl::base::OptimizationObjectivePtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setStartAndGoalStates__SWIG_0(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  ompl::base::ScopedState< > *arg3 = 0 ;
  double arg4 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  arg4 = (double)jarg4; 
  (arg1)->setStartAndGoalStates((ompl::base::ScopedState< > const &)*arg2,(ompl::base::ScopedState< > const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setStartAndGoalStates__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  ompl::base::ScopedState< > *arg3 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  arg3 = (ompl::base::ScopedState< > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  (arg1)->setStartAndGoalStates((ompl::base::ScopedState< > const &)*arg2,(ompl::base::ScopedState< > const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_addStartState(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  (arg1)->addStartState((ompl::base::ScopedState< > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_clearStartStates(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  (arg1)->clearStartStates();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setStartState(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  (arg1)->setStartState((ompl::base::ScopedState< > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setGoalState__SWIG_0(void * jarg1, void * jarg2, double jarg3) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  double arg3 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  arg3 = (double)jarg3; 
  (arg1)->setGoalState((ompl::base::ScopedState< > const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setGoalState__SWIG_1(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::ScopedState< > *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::ScopedState< > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::ScopedState< > const & type is null", 0);
    return ;
  } 
  (arg1)->setGoalState((ompl::base::ScopedState< > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setGoal(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::GoalPtr *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::GoalPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::GoalPtr const & type is null", 0);
    return ;
  } 
  (arg1)->setGoal((ompl::base::GoalPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setPlanner(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerPtr *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::PlannerPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerPtr const & type is null", 0);
    return ;
  } 
  (arg1)->setPlanner((ompl::base::PlannerPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setPlannerAllocator(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerAllocator *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::PlannerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerAllocator const & type is null", 0);
    return ;
  } 
  (arg1)->setPlannerAllocator((ompl::base::PlannerAllocator const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_solve__SWIG_0(void * jarg1, double jarg2) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double arg2 ;
  ompl::base::PlannerStatus result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->solve(arg2);
  jresult = new ompl::base::PlannerStatus((const ompl::base::PlannerStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_solve__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerStatus result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (arg1)->solve();
  jresult = new ompl::base::PlannerStatus((const ompl::base::PlannerStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_solve__SWIG_2(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  ompl::base::PlannerStatus result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::PlannerTerminationCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return 0;
  } 
  result = (arg1)->solve((ompl::base::PlannerTerminationCondition const &)*arg2);
  jresult = new ompl::base::PlannerStatus((const ompl::base::PlannerStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SimpleSetup_getLastPlannerStatus(void * jarg1) {
  void * jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerStatus result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = ((ompl::geometric::SimpleSetup const *)arg1)->getLastPlannerStatus();
  jresult = new ompl::base::PlannerStatus((const ompl::base::PlannerStatus &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleSetup_getLastPlanComputationTime(void * jarg1) {
  double jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (double)((ompl::geometric::SimpleSetup const *)arg1)->getLastPlanComputationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_SimpleSetup_getLastSimplificationTime(void * jarg1) {
  double jresult ;
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double result;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  result = (double)((ompl::geometric::SimpleSetup const *)arg1)->getLastSimplificationTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_simplifySolution__SWIG_0(void * jarg1, double jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->simplifySolution(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_simplifySolution__SWIG_1(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  (arg1)->simplifySolution();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_simplifySolution__SWIG_2(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  ompl::base::PlannerTerminationCondition *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (ompl::base::PlannerTerminationCondition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::PlannerTerminationCondition const & type is null", 0);
    return ;
  } 
  (arg1)->simplifySolution((ompl::base::PlannerTerminationCondition const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_clear(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_print__SWIG_0(void * jarg1, void * jarg2) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::geometric::SimpleSetup const *)arg1)->print(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_print__SWIG_1(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  ((ompl::geometric::SimpleSetup const *)arg1)->print();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SimpleSetup_setup(void * jarg1) {
  ompl::geometric::SimpleSetup *arg1 = (ompl::geometric::SimpleSetup *) 0 ;
  
  arg1 = (ompl::geometric::SimpleSetup *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathControl__SWIG_0(void * jarg1) {
  void * jresult ;
  ompl::base::SpaceInformationPtr *arg1 = 0 ;
  ompl::control::PathControl *result = 0 ;
  
  arg1 = (ompl::base::SpaceInformationPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::SpaceInformationPtr const & type is null", 0);
    return 0;
  } 
  result = (ompl::control::PathControl *)new ompl::control::PathControl((ompl::base::SpaceInformationPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PathControl__SWIG_1(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = 0 ;
  ompl::control::PathControl *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::control::PathControl const & type is null", 0);
    return 0;
  } 
  result = (ompl::control::PathControl *)new ompl::control::PathControl((ompl::control::PathControl const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PathControl(void * jarg1) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_cost(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  ompl::base::OptimizationObjectivePtr *arg2 = 0 ;
  ompl::base::Cost result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (ompl::base::OptimizationObjectivePtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::OptimizationObjectivePtr const & type is null", 0);
    return 0;
  } 
  result = ((ompl::control::PathControl const *)arg1)->cost((ompl::base::OptimizationObjectivePtr const &)*arg2);
  jresult = new ompl::base::Cost((const ompl::base::Cost &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PathControl_length(void * jarg1) {
  double jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  double result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = (double)((ompl::control::PathControl const *)arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathControl_check(void * jarg1) {
  unsigned int jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  bool result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = (bool)((ompl::control::PathControl const *)arg1)->check();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_print(void * jarg1, void * jarg2) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::control::PathControl const *)arg1)->print(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_printAsMatrix(void * jarg1, void * jarg2) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::control::PathControl const *)arg1)->printAsMatrix(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_asGeometric(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  SwigValueWrapper< ompl::geometric::PathGeometric > result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = ((ompl::control::PathControl const *)arg1)->asGeometric();
  jresult = new ompl::geometric::PathGeometric((const ompl::geometric::PathGeometric &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_append__SWIG_0(void * jarg1, void * jarg2) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  (arg1)->append((ompl::base::State const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_append__SWIG_1(void * jarg1, void * jarg2, void * jarg3, double jarg4) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  double arg4 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (double)jarg4; 
  (arg1)->append((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_interpolate(void * jarg1) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  (arg1)->interpolate();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PathControl_random(void * jarg1) {
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  (arg1)->random();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PathControl_randomValid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->randomValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getStates(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::vector< ompl::base::State * > *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = (std::vector< ompl::base::State * > *) &(arg1)->getStates();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getControls(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::vector< ompl::control::Control * > *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = (std::vector< ompl::control::Control * > *) &(arg1)->getControls();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getControlDurations(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = (std::vector< double > *) &(arg1)->getControlDurations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getState__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  unsigned int arg2 ;
  ompl::base::State *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ompl::base::State *)(arg1)->getState(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getControl__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  unsigned int arg2 ;
  ompl::control::Control *result = 0 ;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (ompl::control::Control *)(arg1)->getControl(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PathControl_getControlDuration(void * jarg1, unsigned int jarg2) {
  double jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  unsigned int arg2 ;
  double result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)((ompl::control::PathControl const *)arg1)->getControlDuration(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getStateCount(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = ((ompl::control::PathControl const *)arg1)->getStateCount();
  jresult = new std::size_t((const std::size_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PathControl_getControlCount(void * jarg1) {
  void * jresult ;
  ompl::control::PathControl *arg1 = (ompl::control::PathControl *) 0 ;
  std::size_t result;
  
  arg1 = (ompl::control::PathControl *)jarg1; 
  result = ((ompl::control::PathControl const *)arg1)->getControlCount();
  jresult = new std::size_t((const std::size_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StatePropagator(void * jarg1) {
  ompl::control::StatePropagator *arg1 = (ompl::control::StatePropagator *) 0 ;
  
  arg1 = (ompl::control::StatePropagator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StatePropagator_propagate(void * jarg1, void * jarg2, void * jarg3, double jarg4, void * jarg5) {
  ompl::control::StatePropagator *arg1 = (ompl::control::StatePropagator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  double arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::StatePropagator *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  ((ompl::control::StatePropagator const *)arg1)->propagate((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatePropagator_canPropagateBackward(void * jarg1) {
  unsigned int jresult ;
  ompl::control::StatePropagator *arg1 = (ompl::control::StatePropagator *) 0 ;
  bool result;
  
  arg1 = (ompl::control::StatePropagator *)jarg1; 
  result = (bool)((ompl::control::StatePropagator const *)arg1)->canPropagateBackward();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatePropagator_steer(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::control::StatePropagator *arg1 = (ompl::control::StatePropagator *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::base::State *arg3 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg4 = (ompl::control::Control *) 0 ;
  double *arg5 = 0 ;
  bool result;
  
  arg1 = (ompl::control::StatePropagator *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::base::State *)jarg3; 
  arg4 = (ompl::control::Control *)jarg4; 
  arg5 = (double *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & type is null", 0);
    return 0;
  } 
  result = (bool)((ompl::control::StatePropagator const *)arg1)->steer((ompl::base::State const *)arg2,(ompl::base::State const *)arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StatePropagator_canSteer(void * jarg1) {
  unsigned int jresult ;
  ompl::control::StatePropagator *arg1 = (ompl::control::StatePropagator *) 0 ;
  bool result;
  
  arg1 = (ompl::control::StatePropagator *)jarg1; 
  result = (bool)((ompl::control::StatePropagator const *)arg1)->canSteer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpaceInformation(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::base::StateSpacePtr *arg1 = 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::control::ControlSpace > > arg2 ;
  ompl::control::ControlSpacePtr *argp2 ;
  ompl::control::SpaceInformation *result = 0 ;
  
  arg1 = (ompl::base::StateSpacePtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::base::StateSpacePtr const & type is null", 0);
    return 0;
  } 
  argp2 = (ompl::control::ControlSpacePtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ompl::control::ControlSpacePtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (ompl::control::SpaceInformation *)new ompl::control::SpaceInformation((ompl::base::StateSpacePtr const &)*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpaceInformation(void * jarg1) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_getControlSpace(void * jarg1) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::ControlSpacePtr *result = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (ompl::control::ControlSpacePtr *) &((ompl::control::SpaceInformation const *)arg1)->getControlSpace();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_allocControl(void * jarg1) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *result = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (ompl::control::Control *)((ompl::control::SpaceInformation const *)arg1)->allocControl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_freeControl(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  ((ompl::control::SpaceInformation const *)arg1)->freeControl(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_copyControl(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  ((ompl::control::SpaceInformation const *)arg1)->copyControl(arg2,(ompl::control::Control const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_cloneControl(void * jarg1, void * jarg2) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *result = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  result = (ompl::control::Control *)((ompl::control::SpaceInformation const *)arg1)->cloneControl((ompl::control::Control const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_printControl__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  std::ostream *arg3 = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (std::ostream *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::control::SpaceInformation const *)arg1)->printControl((ompl::control::Control const *)arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_printControl__SWIG_1(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  ((ompl::control::SpaceInformation const *)arg1)->printControl((ompl::control::Control const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_equalControls(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  bool result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  result = (bool)((ompl::control::SpaceInformation const *)arg1)->equalControls((ompl::control::Control const *)arg2,(ompl::control::Control const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_nullControl(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::Control *arg2 = (ompl::control::Control *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::Control *)jarg2; 
  ((ompl::control::SpaceInformation const *)arg1)->nullControl(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_allocControlSampler(void * jarg1) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::control::ControlSampler > > result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = ((ompl::control::SpaceInformation const *)arg1)->allocControlSampler();
  jresult = new ompl::control::ControlSamplerPtr((const ompl::control::ControlSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setMinMaxControlDuration(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->setMinMaxControlDuration(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setMinControlDuration(void * jarg1, unsigned int jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMinControlDuration(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setMaxControlDuration(void * jarg1, unsigned int jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->setMaxControlDuration(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_getMinControlDuration(void * jarg1) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (unsigned int)((ompl::control::SpaceInformation const *)arg1)->getMinControlDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_getMaxControlDuration(void * jarg1) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (unsigned int)((ompl::control::SpaceInformation const *)arg1)->getMaxControlDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_allocDirectedControlSampler(void * jarg1) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  SwigValueWrapper< std::shared_ptr< ompl::control::DirectedControlSampler > > result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = ((ompl::control::SpaceInformation const *)arg1)->allocDirectedControlSampler();
  jresult = new ompl::control::DirectedControlSamplerPtr((const ompl::control::DirectedControlSamplerPtr &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setDirectedControlSamplerAllocator(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::DirectedControlSamplerAllocator *arg2 = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::DirectedControlSamplerAllocator *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::control::DirectedControlSamplerAllocator const & type is null", 0);
    return ;
  } 
  (arg1)->setDirectedControlSamplerAllocator((ompl::control::DirectedControlSamplerAllocator const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_clearDirectedSamplerAllocator(void * jarg1) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  (arg1)->clearDirectedSamplerAllocator();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpaceInformation_getStatePropagator(void * jarg1) {
  void * jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::StatePropagatorPtr *result = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (ompl::control::StatePropagatorPtr *) &((ompl::control::SpaceInformation const *)arg1)->getStatePropagator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setStatePropagator__SWIG_0(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::StatePropagatorFn *arg2 = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::StatePropagatorFn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::control::StatePropagatorFn const & type is null", 0);
    return ;
  } 
  (arg1)->setStatePropagator((ompl::control::StatePropagatorFn const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setStatePropagator__SWIG_1(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::control::StatePropagatorPtr *arg2 = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::control::StatePropagatorPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ompl::control::StatePropagatorPtr const & type is null", 0);
    return ;
  } 
  (arg1)->setStatePropagator((ompl::control::StatePropagatorPtr const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setPropagationStepSize(void * jarg1, double jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  double arg2 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPropagationStepSize(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_SpaceInformation_getPropagationStepSize(void * jarg1) {
  double jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  double result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (double)((ompl::control::SpaceInformation const *)arg1)->getPropagationStepSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_propagate__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  int arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  ((ompl::control::SpaceInformation const *)arg1)->propagate((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_canPropagateBackward(void * jarg1) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  bool result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  result = (bool)((ompl::control::SpaceInformation const *)arg1)->canPropagateBackward();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_propagateWhileValid__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  int arg4 ;
  ompl::base::State *arg5 = (ompl::base::State *) 0 ;
  unsigned int result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ompl::base::State *)jarg5; 
  result = (unsigned int)((ompl::control::SpaceInformation const *)arg1)->propagateWhileValid((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_propagate__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  int arg4 ;
  std::vector< ompl::base::State * > *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (std::vector< ompl::base::State * > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & type is null", 0);
    return ;
  } 
  arg6 = jarg6 ? true : false; 
  ((ompl::control::SpaceInformation const *)arg1)->propagate((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4,*arg5,arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpaceInformation_propagateWhileValid__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  ompl::base::State *arg2 = (ompl::base::State *) 0 ;
  ompl::control::Control *arg3 = (ompl::control::Control *) 0 ;
  int arg4 ;
  std::vector< ompl::base::State * > *arg5 = 0 ;
  bool arg6 ;
  unsigned int result;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (ompl::base::State *)jarg2; 
  arg3 = (ompl::control::Control *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (std::vector< ompl::base::State * > *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< ompl::base::State * > & type is null", 0);
    return 0;
  } 
  arg6 = jarg6 ? true : false; 
  result = (unsigned int)((ompl::control::SpaceInformation const *)arg1)->propagateWhileValid((ompl::base::State const *)arg2,(ompl::control::Control const *)arg3,arg4,*arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_printSettings__SWIG_0(void * jarg1, void * jarg2) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  std::ostream *arg2 = 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  arg2 = (std::ostream *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::ostream & type is null", 0);
    return ;
  } 
  ((ompl::control::SpaceInformation const *)arg1)->printSettings(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_printSettings__SWIG_1(void * jarg1) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  ((ompl::control::SpaceInformation const *)arg1)->printSettings();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpaceInformation_setup(void * jarg1) {
  ompl::control::SpaceInformation *arg1 = (ompl::control::SpaceInformation *) 0 ;
  
  arg1 = (ompl::control::SpaceInformation *)jarg1; 
  (arg1)->setup();
}


SWIGEXPORT ompl::base::State * SWIGSTDCALL CSharp_CompoundState_SWIGUpcast(ompl::base::CompoundState *jarg1) {
    return (ompl::base::State *)jarg1;
}

SWIGEXPORT ompl::base::StateSpace * SWIGSTDCALL CSharp_CompoundStateSpace_SWIGUpcast(ompl::base::CompoundStateSpace *jarg1) {
    return (ompl::base::StateSpace *)jarg1;
}

SWIGEXPORT ompl::base::State * SWIGSTDCALL CSharp_RealVectorStateSpace_StateType_SWIGUpcast(ompl::base::RealVectorStateSpace::StateType *jarg1) {
    return (ompl::base::State *)jarg1;
}

SWIGEXPORT ompl::base::StateSpace * SWIGSTDCALL CSharp_RealVectorStateSpace_SWIGUpcast(ompl::base::RealVectorStateSpace *jarg1) {
    return (ompl::base::StateSpace *)jarg1;
}

SWIGEXPORT ompl::control::Control * SWIGSTDCALL CSharp_CompoundControl_SWIGUpcast(ompl::control::CompoundControl *jarg1) {
    return (ompl::control::Control *)jarg1;
}

SWIGEXPORT ompl::control::ControlSampler * SWIGSTDCALL CSharp_CompoundControlSampler_SWIGUpcast(ompl::control::CompoundControlSampler *jarg1) {
    return (ompl::control::ControlSampler *)jarg1;
}

SWIGEXPORT ompl::base::Path * SWIGSTDCALL CSharp_PathGeometric_SWIGUpcast(ompl::geometric::PathGeometric *jarg1) {
    return (ompl::base::Path *)jarg1;
}

SWIGEXPORT ompl::base::Path * SWIGSTDCALL CSharp_PathControl_SWIGUpcast(ompl::control::PathControl *jarg1) {
    return (ompl::base::Path *)jarg1;
}

#ifdef __cplusplus
}
#endif


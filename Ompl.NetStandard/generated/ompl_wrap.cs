//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ompl_wrap {
  public static SWIGTYPE_p_std__chrono__system_clock__time_point now() {
    SWIGTYPE_p_std__chrono__system_clock__time_point ret = new SWIGTYPE_p_std__chrono__system_clock__time_point(ompl_wrapPINVOKE.now(), true);
    return ret;
  }

  public static SWIGTYPE_p_std__chrono__system_clock__duration seconds(double sec) {
    SWIGTYPE_p_std__chrono__system_clock__duration ret = new SWIGTYPE_p_std__chrono__system_clock__duration(ompl_wrapPINVOKE.seconds__SWIG_0(sec), true);
    return ret;
  }

  public static double seconds(SWIGTYPE_p_std__chrono__system_clock__duration d) {
    double ret = ompl_wrapPINVOKE.seconds__SWIG_1(SWIGTYPE_p_std__chrono__system_clock__duration.getCPtr(d));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__string as_string(SWIGTYPE_p_std__chrono__system_clock__time_point p) {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ompl_wrapPINVOKE.as_string(SWIGTYPE_p_std__chrono__system_clock__time_point.getCPtr(p)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerNonTerminatingCondition() {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.plannerNonTerminatingCondition(), true);
    return ret;
  }

  public static PlannerTerminationCondition plannerAlwaysTerminatingCondition() {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.plannerAlwaysTerminatingCondition(), true);
    return ret;
  }

  public static PlannerTerminationCondition plannerOrTerminationCondition(PlannerTerminationCondition c1, PlannerTerminationCondition c2) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.plannerOrTerminationCondition(PlannerTerminationCondition.getCPtr(c1), PlannerTerminationCondition.getCPtr(c2)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition plannerAndTerminationCondition(PlannerTerminationCondition c1, PlannerTerminationCondition c2) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.plannerAndTerminationCondition(PlannerTerminationCondition.getCPtr(c1), PlannerTerminationCondition.getCPtr(c2)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(double duration) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.timedPlannerTerminationCondition__SWIG_0(duration), true);
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(SWIGTYPE_p_std__chrono__system_clock__duration duration) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.timedPlannerTerminationCondition__SWIG_1(SWIGTYPE_p_std__chrono__system_clock__duration.getCPtr(duration)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlannerTerminationCondition timedPlannerTerminationCondition(double duration, double interval) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.timedPlannerTerminationCondition__SWIG_2(duration, interval), true);
    return ret;
  }

  public static PlannerTerminationCondition exactSolnPlannerTerminationCondition(SWIGTYPE_p_ompl__base__ProblemDefinitionPtr pdef) {
    PlannerTerminationCondition ret = new PlannerTerminationCondition(ompl_wrapPINVOKE.exactSolnPlannerTerminationCondition(SWIGTYPE_p_ompl__base__ProblemDefinitionPtr.getCPtr(pdef)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t destS, State dest, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t sourceS, State source) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_wrapPINVOKE.copyStateData__SWIG_0(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(destS), State.getCPtr(dest), SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(sourceS), State.getCPtr(source));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(StateSpace destS, State dest, StateSpace sourceS, State source) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_wrapPINVOKE.copyStateData__SWIG_1(StateSpace.getCPtr(destS), State.getCPtr(dest), StateSpace.getCPtr(sourceS), State.getCPtr(source));
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t destS, State dest, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t sourceS, State source, SWIGTYPE_p_std__vectorT_std__string_t subspaces) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_wrapPINVOKE.copyStateData__SWIG_2(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(destS), State.getCPtr(dest), SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(sourceS), State.getCPtr(source), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(subspaces));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AdvancedStateCopyOperation copyStateData(StateSpace destS, State dest, StateSpace sourceS, State source, SWIGTYPE_p_std__vectorT_std__string_t subspaces) {
    AdvancedStateCopyOperation ret = (AdvancedStateCopyOperation)ompl_wrapPINVOKE.copyStateData__SWIG_3(StateSpace.getCPtr(destS), State.getCPtr(dest), StateSpace.getCPtr(sourceS), State.getCPtr(source), SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(subspaces));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

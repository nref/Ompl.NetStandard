//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SimpleSetup : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SimpleSetup(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SimpleSetup obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SimpleSetup() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_SimpleSetup(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SimpleSetup(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t si) : this(ompl_wrapPINVOKE.new_SimpleSetup__SWIG_0(SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t.getCPtr(si)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public SimpleSetup(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t space) : this(ompl_wrapPINVOKE.new_SimpleSetup__SWIG_1(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t.getCPtr(space)), true) {
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t getSpaceInformation() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t(ompl_wrapPINVOKE.SimpleSetup_getSpaceInformation(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ompl__base__ProblemDefinitionPtr getProblemDefinition() {
    SWIGTYPE_p_ompl__base__ProblemDefinitionPtr ret = new SWIGTYPE_p_ompl__base__ProblemDefinitionPtr(ompl_wrapPINVOKE.SimpleSetup_getProblemDefinition__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t getStateSpace() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__StateSpace_t(ompl_wrapPINVOKE.SimpleSetup_getStateSpace(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ompl__base__StateValidityCheckerPtr getStateValidityChecker() {
    SWIGTYPE_p_ompl__base__StateValidityCheckerPtr ret = new SWIGTYPE_p_ompl__base__StateValidityCheckerPtr(ompl_wrapPINVOKE.SimpleSetup_getStateValidityChecker(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ompl__base__GoalPtr getGoal() {
    SWIGTYPE_p_ompl__base__GoalPtr ret = new SWIGTYPE_p_ompl__base__GoalPtr(ompl_wrapPINVOKE.SimpleSetup_getGoal(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ompl__base__PlannerPtr getPlanner() {
    SWIGTYPE_p_ompl__base__PlannerPtr ret = new SWIGTYPE_p_ompl__base__PlannerPtr(ompl_wrapPINVOKE.SimpleSetup_getPlanner(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_ompl__base__PlannerAllocator getPlannerAllocator() {
    SWIGTYPE_p_ompl__base__PlannerAllocator ret = new SWIGTYPE_p_ompl__base__PlannerAllocator(ompl_wrapPINVOKE.SimpleSetup_getPlannerAllocator(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__geometric__PathSimplifier_t getPathSimplifier() {
    SWIGTYPE_p_std__shared_ptrT_ompl__geometric__PathSimplifier_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__geometric__PathSimplifier_t(ompl_wrapPINVOKE.SimpleSetup_getPathSimplifier__SWIG_0(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t getOptimizationObjective() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t(ompl_wrapPINVOKE.SimpleSetup_getOptimizationObjective(swigCPtr), false);
    return ret;
  }

  public bool haveExactSolutionPath() {
    bool ret = ompl_wrapPINVOKE.SimpleSetup_haveExactSolutionPath(swigCPtr);
    return ret;
  }

  public bool haveSolutionPath() {
    bool ret = ompl_wrapPINVOKE.SimpleSetup_haveSolutionPath(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_std__string getSolutionPlannerName() {
    SWIGTYPE_p_std__string ret = new SWIGTYPE_p_std__string(ompl_wrapPINVOKE.SimpleSetup_getSolutionPlannerName(swigCPtr), true);
    return ret;
  }

  public PathGeometric getSolutionPath() {
    PathGeometric ret = new PathGeometric(ompl_wrapPINVOKE.SimpleSetup_getSolutionPath(swigCPtr), false);
    return ret;
  }

  public void getPlannerData(SWIGTYPE_p_ompl__base__PlannerData pd) {
    ompl_wrapPINVOKE.SimpleSetup_getPlannerData(swigCPtr, SWIGTYPE_p_ompl__base__PlannerData.getCPtr(pd));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_ompl__base__StateValidityCheckerPtr svc) {
    ompl_wrapPINVOKE.SimpleSetup_setStateValidityChecker__SWIG_0(swigCPtr, SWIGTYPE_p_ompl__base__StateValidityCheckerPtr.getCPtr(svc));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_ompl__base__StateValidityCheckerFn svc) {
    ompl_wrapPINVOKE.SimpleSetup_setStateValidityChecker__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__StateValidityCheckerFn.getCPtr(svc));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOptimizationObjective(SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t optimizationObjective) {
    ompl_wrapPINVOKE.SimpleSetup_setOptimizationObjective(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t.getCPtr(optimizationObjective));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_t start, SWIGTYPE_p_ompl__base__ScopedStateT_t goal, double threshold) {
    ompl_wrapPINVOKE.SimpleSetup_setStartAndGoalStates__SWIG_0(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(goal), threshold);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStartAndGoalStates(SWIGTYPE_p_ompl__base__ScopedStateT_t start, SWIGTYPE_p_ompl__base__ScopedStateT_t goal) {
    ompl_wrapPINVOKE.SimpleSetup_setStartAndGoalStates__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(start), SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(goal));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void addStartState(SWIGTYPE_p_ompl__base__ScopedStateT_t state) {
    ompl_wrapPINVOKE.SimpleSetup_addStartState(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(state));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearStartStates() {
    ompl_wrapPINVOKE.SimpleSetup_clearStartStates(swigCPtr);
  }

  public void setStartState(SWIGTYPE_p_ompl__base__ScopedStateT_t state) {
    ompl_wrapPINVOKE.SimpleSetup_setStartState(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(state));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_t goal, double threshold) {
    ompl_wrapPINVOKE.SimpleSetup_setGoalState__SWIG_0(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(goal), threshold);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoalState(SWIGTYPE_p_ompl__base__ScopedStateT_t goal) {
    ompl_wrapPINVOKE.SimpleSetup_setGoalState__SWIG_1(swigCPtr, SWIGTYPE_p_ompl__base__ScopedStateT_t.getCPtr(goal));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setGoal(SWIGTYPE_p_ompl__base__GoalPtr goal) {
    ompl_wrapPINVOKE.SimpleSetup_setGoal(swigCPtr, SWIGTYPE_p_ompl__base__GoalPtr.getCPtr(goal));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPlanner(SWIGTYPE_p_ompl__base__PlannerPtr planner) {
    ompl_wrapPINVOKE.SimpleSetup_setPlanner(swigCPtr, SWIGTYPE_p_ompl__base__PlannerPtr.getCPtr(planner));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPlannerAllocator(SWIGTYPE_p_ompl__base__PlannerAllocator pa) {
    ompl_wrapPINVOKE.SimpleSetup_setPlannerAllocator(swigCPtr, SWIGTYPE_p_ompl__base__PlannerAllocator.getCPtr(pa));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual SWIGTYPE_p_ompl__base__PlannerStatus solve(double time) {
    SWIGTYPE_p_ompl__base__PlannerStatus ret = new SWIGTYPE_p_ompl__base__PlannerStatus(ompl_wrapPINVOKE.SimpleSetup_solve__SWIG_0(swigCPtr, time), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ompl__base__PlannerStatus solve() {
    SWIGTYPE_p_ompl__base__PlannerStatus ret = new SWIGTYPE_p_ompl__base__PlannerStatus(ompl_wrapPINVOKE.SimpleSetup_solve__SWIG_1(swigCPtr), true);
    return ret;
  }

  public virtual SWIGTYPE_p_ompl__base__PlannerStatus solve(PlannerTerminationCondition ptc) {
    SWIGTYPE_p_ompl__base__PlannerStatus ret = new SWIGTYPE_p_ompl__base__PlannerStatus(ompl_wrapPINVOKE.SimpleSetup_solve__SWIG_2(swigCPtr, PlannerTerminationCondition.getCPtr(ptc)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ompl__base__PlannerStatus getLastPlannerStatus() {
    SWIGTYPE_p_ompl__base__PlannerStatus ret = new SWIGTYPE_p_ompl__base__PlannerStatus(ompl_wrapPINVOKE.SimpleSetup_getLastPlannerStatus(swigCPtr), true);
    return ret;
  }

  public double getLastPlanComputationTime() {
    double ret = ompl_wrapPINVOKE.SimpleSetup_getLastPlanComputationTime(swigCPtr);
    return ret;
  }

  public double getLastSimplificationTime() {
    double ret = ompl_wrapPINVOKE.SimpleSetup_getLastSimplificationTime(swigCPtr);
    return ret;
  }

  public void simplifySolution(double duration) {
    ompl_wrapPINVOKE.SimpleSetup_simplifySolution__SWIG_0(swigCPtr, duration);
  }

  public void simplifySolution() {
    ompl_wrapPINVOKE.SimpleSetup_simplifySolution__SWIG_1(swigCPtr);
  }

  public void simplifySolution(PlannerTerminationCondition ptc) {
    ompl_wrapPINVOKE.SimpleSetup_simplifySolution__SWIG_2(swigCPtr, PlannerTerminationCondition.getCPtr(ptc));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void clear() {
    ompl_wrapPINVOKE.SimpleSetup_clear(swigCPtr);
  }

  public virtual void print(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.SimpleSetup_print__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void print() {
    ompl_wrapPINVOKE.SimpleSetup_print__SWIG_1(swigCPtr);
  }

  public virtual void setup() {
    ompl_wrapPINVOKE.SimpleSetup_setup(swigCPtr);
  }

}

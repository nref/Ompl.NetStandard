//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Path : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Path(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Path obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Path() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ompl_wrapPINVOKE.delete_Path(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t getSpaceInformation() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__SpaceInformation_t(ompl_wrapPINVOKE.Path_getSpaceInformation(swigCPtr), false);
    return ret;
  }

  public virtual double length() {
    double ret = ompl_wrapPINVOKE.Path_length(swigCPtr);
    return ret;
  }

  public virtual Cost cost(SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t obj) {
    Cost ret = new Cost(ompl_wrapPINVOKE.Path_cost(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__OptimizationObjective_t.getCPtr(obj)), true);
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool check() {
    bool ret = ompl_wrapPINVOKE.Path_check(swigCPtr);
    return ret;
  }

  public virtual void print(SWIGTYPE_p_std__ostream out_) {
    ompl_wrapPINVOKE.Path_print(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(out_));
    if (ompl_wrapPINVOKE.SWIGPendingException.Pending) throw ompl_wrapPINVOKE.SWIGPendingException.Retrieve();
  }

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class MultiOptimizationObjective : OptimizationObjective {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal MultiOptimizationObjective(global::System.IntPtr cPtr, bool cMemoryOwn) : base(ompl_basePINVOKE.MultiOptimizationObjective_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MultiOptimizationObjective obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          ompl_basePINVOKE.delete_MultiOptimizationObjective(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MultiOptimizationObjective(SpaceInformation si) : this(ompl_basePINVOKE.new_MultiOptimizationObjective(SpaceInformation.getCPtr(si)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void addObjective(OptimizationObjective objective, double weight) {
    ompl_basePINVOKE.MultiOptimizationObjective_addObjective(swigCPtr, OptimizationObjective.getCPtr(objective), weight);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getObjectiveCount() {
    uint ret = ompl_basePINVOKE.MultiOptimizationObjective_getObjectiveCount(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public OptimizationObjective getObjective(uint idx) {
    global::System.IntPtr cPtr = ompl_basePINVOKE.MultiOptimizationObjective_getObjective(swigCPtr, idx);
    OptimizationObjective ret = (cPtr == global::System.IntPtr.Zero) ? null : new OptimizationObjective(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getObjectiveWeight(uint idx) {
    double ret = ompl_basePINVOKE.MultiOptimizationObjective_getObjectiveWeight(swigCPtr, idx);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setObjectiveWeight(uint idx, double weight) {
    ompl_basePINVOKE.MultiOptimizationObjective_setObjectiveWeight(swigCPtr, idx, weight);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void lock_() {
    ompl_basePINVOKE.MultiOptimizationObjective_lock_(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isLocked() {
    bool ret = ompl_basePINVOKE.MultiOptimizationObjective_isLocked(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Cost stateCost(State s) {
    Cost ret = new Cost(ompl_basePINVOKE.MultiOptimizationObjective_stateCost(swigCPtr, State.getCPtr(s)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override Cost motionCost(State s1, State s2) {
    Cost ret = new Cost(ompl_basePINVOKE.MultiOptimizationObjective_motionCost(swigCPtr, State.getCPtr(s1), State.getCPtr(s2)), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

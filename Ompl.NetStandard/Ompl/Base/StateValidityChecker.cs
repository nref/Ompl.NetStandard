//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.0
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class StateValidityChecker : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal StateValidityChecker(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StateValidityChecker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StateValidityChecker() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ompl_basePINVOKE.delete_StateValidityChecker(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public StateValidityChecker(SpaceInformation si) : this(ompl_basePINVOKE.new_StateValidityChecker__SWIG_0(SpaceInformation.getCPtr(si)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual bool isValid(State state) {
    bool ret = ompl_basePINVOKE.StateValidityChecker_isValid__SWIG_0(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isValid(State state, SWIGTYPE_p_double dist) {
    bool ret = (SwigDerivedClassHasMethod("isValid", swigMethodTypes1) ? ompl_basePINVOKE.StateValidityChecker_isValidSwigExplicitStateValidityChecker__SWIG_1(swigCPtr, State.getCPtr(state), SWIGTYPE_p_double.getCPtr(dist)) : ompl_basePINVOKE.StateValidityChecker_isValid__SWIG_1(swigCPtr, State.getCPtr(state), SWIGTYPE_p_double.getCPtr(dist)));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool isValid(State state, SWIGTYPE_p_double dist, State validState, SWIGTYPE_p_bool validStateAvailable) {
    bool ret = (SwigDerivedClassHasMethod("isValid", swigMethodTypes2) ? ompl_basePINVOKE.StateValidityChecker_isValidSwigExplicitStateValidityChecker__SWIG_2(swigCPtr, State.getCPtr(state), SWIGTYPE_p_double.getCPtr(dist), State.getCPtr(validState), SWIGTYPE_p_bool.getCPtr(validStateAvailable)) : ompl_basePINVOKE.StateValidityChecker_isValid__SWIG_2(swigCPtr, State.getCPtr(state), SWIGTYPE_p_double.getCPtr(dist), State.getCPtr(validState), SWIGTYPE_p_bool.getCPtr(validStateAvailable)));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double clearance(State arg0) {
    double ret = (SwigDerivedClassHasMethod("clearance", swigMethodTypes3) ? ompl_basePINVOKE.StateValidityChecker_clearanceSwigExplicitStateValidityChecker__SWIG_0(swigCPtr, State.getCPtr(arg0)) : ompl_basePINVOKE.StateValidityChecker_clearance__SWIG_0(swigCPtr, State.getCPtr(arg0)));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double clearance(State state, State arg1, SWIGTYPE_p_bool validStateAvailable) {
    double ret = (SwigDerivedClassHasMethod("clearance", swigMethodTypes4) ? ompl_basePINVOKE.StateValidityChecker_clearanceSwigExplicitStateValidityChecker__SWIG_1(swigCPtr, State.getCPtr(state), State.getCPtr(arg1), SWIGTYPE_p_bool.getCPtr(validStateAvailable)) : ompl_basePINVOKE.StateValidityChecker_clearance__SWIG_1(swigCPtr, State.getCPtr(state), State.getCPtr(arg1), SWIGTYPE_p_bool.getCPtr(validStateAvailable)));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateValidityCheckerSpecs getSpecs() {
    StateValidityCheckerSpecs ret = new StateValidityCheckerSpecs(ompl_basePINVOKE.StateValidityChecker_getSpecs(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool equal_to(StateValidityChecker arg0) {
    bool ret = (SwigDerivedClassHasMethod("equal_to", swigMethodTypes5) ? ompl_basePINVOKE.StateValidityChecker_equal_toSwigExplicitStateValidityChecker(swigCPtr, StateValidityChecker.getCPtr(arg0)) : ompl_basePINVOKE.StateValidityChecker_equal_to(swigCPtr, StateValidityChecker.getCPtr(arg0)));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("isValid", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateStateValidityChecker_0(SwigDirectorMethodisValid__SWIG_0);
    if (SwigDerivedClassHasMethod("isValid", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateStateValidityChecker_1(SwigDirectorMethodisValid__SWIG_1);
    if (SwigDerivedClassHasMethod("isValid", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateStateValidityChecker_2(SwigDirectorMethodisValid__SWIG_2);
    if (SwigDerivedClassHasMethod("clearance", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateStateValidityChecker_3(SwigDirectorMethodclearance__SWIG_0);
    if (SwigDerivedClassHasMethod("clearance", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateStateValidityChecker_4(SwigDirectorMethodclearance__SWIG_1);
    if (SwigDerivedClassHasMethod("equal_to", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateStateValidityChecker_5(SwigDirectorMethodequal_to);
    ompl_basePINVOKE.StateValidityChecker_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(StateValidityChecker))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private bool SwigDirectorMethodisValid__SWIG_0(global::System.IntPtr state) {
    return isValid((state == global::System.IntPtr.Zero) ? null : new State(state, false));
  }

  private bool SwigDirectorMethodisValid__SWIG_1(global::System.IntPtr state, global::System.IntPtr dist) {
    return isValid((state == global::System.IntPtr.Zero) ? null : new State(state, false), new SWIGTYPE_p_double(dist, false));
  }

  private bool SwigDirectorMethodisValid__SWIG_2(global::System.IntPtr state, global::System.IntPtr dist, global::System.IntPtr validState, global::System.IntPtr validStateAvailable) {
    return isValid((state == global::System.IntPtr.Zero) ? null : new State(state, false), new SWIGTYPE_p_double(dist, false), (validState == global::System.IntPtr.Zero) ? null : new State(validState, false), new SWIGTYPE_p_bool(validStateAvailable, false));
  }

  private double SwigDirectorMethodclearance__SWIG_0(global::System.IntPtr arg0) {
    return clearance((arg0 == global::System.IntPtr.Zero) ? null : new State(arg0, false));
  }

  private double SwigDirectorMethodclearance__SWIG_1(global::System.IntPtr state, global::System.IntPtr arg1, global::System.IntPtr validStateAvailable) {
    return clearance((state == global::System.IntPtr.Zero) ? null : new State(state, false), (arg1 == global::System.IntPtr.Zero) ? null : new State(arg1, false), new SWIGTYPE_p_bool(validStateAvailable, false));
  }

  private bool SwigDirectorMethodequal_to(global::System.IntPtr arg0) {
    return equal_to((arg0 == global::System.IntPtr.Zero) ? null : new StateValidityChecker(arg0, true));
  }

  public delegate bool SwigDelegateStateValidityChecker_0(global::System.IntPtr state);
  public delegate bool SwigDelegateStateValidityChecker_1(global::System.IntPtr state, global::System.IntPtr dist);
  public delegate bool SwigDelegateStateValidityChecker_2(global::System.IntPtr state, global::System.IntPtr dist, global::System.IntPtr validState, global::System.IntPtr validStateAvailable);
  public delegate double SwigDelegateStateValidityChecker_3(global::System.IntPtr arg0);
  public delegate double SwigDelegateStateValidityChecker_4(global::System.IntPtr state, global::System.IntPtr arg1, global::System.IntPtr validStateAvailable);
  public delegate bool SwigDelegateStateValidityChecker_5(global::System.IntPtr arg0);

  private SwigDelegateStateValidityChecker_0 swigDelegate0;
  private SwigDelegateStateValidityChecker_1 swigDelegate1;
  private SwigDelegateStateValidityChecker_2 swigDelegate2;
  private SwigDelegateStateValidityChecker_3 swigDelegate3;
  private SwigDelegateStateValidityChecker_4 swigDelegate4;
  private SwigDelegateStateValidityChecker_5 swigDelegate5;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(State) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(State), typeof(SWIGTYPE_p_double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(State), typeof(SWIGTYPE_p_double), typeof(State), typeof(SWIGTYPE_p_bool) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(State) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(State), typeof(State), typeof(SWIGTYPE_p_bool) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(StateValidityChecker) };
}

}

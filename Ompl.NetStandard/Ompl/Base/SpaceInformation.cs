//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Ompl.Base {

public class SpaceInformation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal SpaceInformation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SpaceInformation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SpaceInformation() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          ompl_basePINVOKE.delete_SpaceInformation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SpaceInformation(StateSpace space) : this(ompl_basePINVOKE.new_SpaceInformation(StateSpace.getCPtr(space)), true) {
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid(State state) {
    bool ret = ompl_basePINVOKE.SpaceInformation_isValid(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateSpace getStateSpace() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.SpaceInformation_getStateSpace(swigCPtr);
    StateSpace ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateSpace(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool equalStates(State state1, State state2) {
    bool ret = ompl_basePINVOKE.SpaceInformation_equalStates(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool satisfiesBounds(State state) {
    bool ret = ompl_basePINVOKE.SpaceInformation_satisfiesBounds(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double distance(State state1, State state2) {
    double ret = ompl_basePINVOKE.SpaceInformation_distance(swigCPtr, State.getCPtr(state1), State.getCPtr(state2));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void enforceBounds(State state) {
    ompl_basePINVOKE.SpaceInformation_enforceBounds(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void printState(State state, SWIGTYPE_p_std__ostream _out) {
    ompl_basePINVOKE.SpaceInformation_printState__SWIG_0(swigCPtr, State.getCPtr(state), SWIGTYPE_p_std__ostream.getCPtr(_out));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void printState(State state) {
    ompl_basePINVOKE.SpaceInformation_printState__SWIG_1(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t svc) {
    ompl_basePINVOKE.SpaceInformation_setStateValidityChecker__SWIG_0(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t.getCPtr(svc));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setStateValidityChecker(SWIGTYPE_p_std__functionT_bool_fompl__base__State_const_pF_t svc) {
    ompl_basePINVOKE.SpaceInformation_setStateValidityChecker__SWIG_1(swigCPtr, SWIGTYPE_p_std__functionT_bool_fompl__base__State_const_pF_t.getCPtr(svc));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t getStateValidityChecker() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__StateValidityChecker_t(ompl_basePINVOKE.SpaceInformation_getStateValidityChecker(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setMotionValidator(SWIGTYPE_p_std__shared_ptrT_ompl__base__MotionValidator_t mv) {
    ompl_basePINVOKE.SpaceInformation_setMotionValidator(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__MotionValidator_t.getCPtr(mv));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__MotionValidator_t getMotionValidator() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__MotionValidator_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__MotionValidator_t(ompl_basePINVOKE.SpaceInformation_getMotionValidator__SWIG_0(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setStateValidityCheckingResolution(double resolution) {
    ompl_basePINVOKE.SpaceInformation_setStateValidityCheckingResolution(swigCPtr, resolution);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public double getStateValidityCheckingResolution() {
    double ret = ompl_basePINVOKE.SpaceInformation_getStateValidityCheckingResolution(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getStateDimension() {
    uint ret = ompl_basePINVOKE.SpaceInformation_getStateDimension(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double getSpaceMeasure() {
    double ret = ompl_basePINVOKE.SpaceInformation_getSpaceMeasure(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public State allocState() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.SpaceInformation_allocState(swigCPtr);
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void allocStates(SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states) {
    ompl_basePINVOKE.SpaceInformation_allocStates(swigCPtr, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void freeState(State state) {
    ompl_basePINVOKE.SpaceInformation_freeState(swigCPtr, State.getCPtr(state));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void freeStates(SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states) {
    ompl_basePINVOKE.SpaceInformation_freeStates(swigCPtr, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void copyState(State destination, State source) {
    ompl_basePINVOKE.SpaceInformation_copyState(swigCPtr, State.getCPtr(destination), State.getCPtr(source));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public State cloneState(State source) {
    global::System.IntPtr cPtr = ompl_basePINVOKE.SpaceInformation_cloneState(swigCPtr, State.getCPtr(source));
    State ret = (cPtr == global::System.IntPtr.Zero) ? null : new State(cPtr, false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateSampler allocStateSampler() {
    global::System.IntPtr cPtr = ompl_basePINVOKE.SpaceInformation_allocStateSampler(swigCPtr);
    StateSampler ret = (cPtr == global::System.IntPtr.Zero) ? null : new StateSampler(cPtr, true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ompl__base__ValidStateSampler_t allocValidStateSampler() {
    SWIGTYPE_p_std__shared_ptrT_ompl__base__ValidStateSampler_t ret = new SWIGTYPE_p_std__shared_ptrT_ompl__base__ValidStateSampler_t(ompl_basePINVOKE.SpaceInformation_allocValidStateSampler(swigCPtr), true);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setValidStateSamplerAllocator(SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__ValidStateSampler_t_fompl__base__SpaceInformation_const_pF_t vssa) {
    ompl_basePINVOKE.SpaceInformation_setValidStateSamplerAllocator(swigCPtr, SWIGTYPE_p_std__functionT_std__shared_ptrT_ompl__base__ValidStateSampler_t_fompl__base__SpaceInformation_const_pF_t.getCPtr(vssa));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public void clearValidStateSamplerAllocator() {
    ompl_basePINVOKE.SpaceInformation_clearValidStateSamplerAllocator(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public double getMaximumExtent() {
    double ret = ompl_basePINVOKE.SpaceInformation_getMaximumExtent(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool searchValidNearby(State state, State near, double distance, uint attempts) {
    bool ret = ompl_basePINVOKE.SpaceInformation_searchValidNearby__SWIG_0(swigCPtr, State.getCPtr(state), State.getCPtr(near), distance, attempts);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool searchValidNearby(SWIGTYPE_p_std__shared_ptrT_ompl__base__ValidStateSampler_t sampler, State state, State near, double distance) {
    bool ret = ompl_basePINVOKE.SpaceInformation_searchValidNearby__SWIG_1(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ompl__base__ValidStateSampler_t.getCPtr(sampler), State.getCPtr(state), State.getCPtr(near), distance);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint randomBounceMotion(StateSampler sss, State start, uint steps, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states, bool alloc) {
    uint ret = ompl_basePINVOKE.SpaceInformation_randomBounceMotion(swigCPtr, StateSampler.getCPtr(sss), State.getCPtr(start), steps, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states), alloc);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool checkMotion(State s1, State s2, SWIGTYPE_p_std__pairT_ompl__base__State_p_double_t lastValid) {
    bool ret = ompl_basePINVOKE.SpaceInformation_checkMotion__SWIG_0(swigCPtr, State.getCPtr(s1), State.getCPtr(s2), SWIGTYPE_p_std__pairT_ompl__base__State_p_double_t.getCPtr(lastValid));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool checkMotion(State s1, State s2) {
    bool ret = ompl_basePINVOKE.SpaceInformation_checkMotion__SWIG_1(swigCPtr, State.getCPtr(s1), State.getCPtr(s2));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkMotion(SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states, uint count, SWIGTYPE_p_unsigned_int firstInvalidStateIndex) {
    bool ret = ompl_basePINVOKE.SpaceInformation_checkMotion__SWIG_2(swigCPtr, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states), count, SWIGTYPE_p_unsigned_int.getCPtr(firstInvalidStateIndex));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool checkMotion(SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states, uint count) {
    bool ret = ompl_basePINVOKE.SpaceInformation_checkMotion__SWIG_3(swigCPtr, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states), count);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint getMotionStates(State s1, State s2, SWIGTYPE_p_std__vectorT_ompl__base__State_p_t states, uint count, bool endpoints, bool alloc) {
    uint ret = ompl_basePINVOKE.SpaceInformation_getMotionStates(swigCPtr, State.getCPtr(s1), State.getCPtr(s2), SWIGTYPE_p_std__vectorT_ompl__base__State_p_t.getCPtr(states), count, endpoints, alloc);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint getCheckedMotionCount() {
    uint ret = ompl_basePINVOKE.SpaceInformation_getCheckedMotionCount(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double probabilityOfValidState(uint attempts) {
    double ret = ompl_basePINVOKE.SpaceInformation_probabilityOfValidState(swigCPtr, attempts);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double averageValidMotionLength(uint attempts) {
    double ret = ompl_basePINVOKE.SpaceInformation_averageValidMotionLength(swigCPtr, attempts);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void samplesPerSecond(SWIGTYPE_p_double uniform, SWIGTYPE_p_double near, SWIGTYPE_p_double gaussian, uint attempts) {
    ompl_basePINVOKE.SpaceInformation_samplesPerSecond(swigCPtr, SWIGTYPE_p_double.getCPtr(uniform), SWIGTYPE_p_double.getCPtr(near), SWIGTYPE_p_double.getCPtr(gaussian), attempts);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printSettings(SWIGTYPE_p_std__ostream _out) {
    ompl_basePINVOKE.SpaceInformation_printSettings__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(_out));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printSettings() {
    ompl_basePINVOKE.SpaceInformation_printSettings__SWIG_1(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printProperties(SWIGTYPE_p_std__ostream _out) {
    ompl_basePINVOKE.SpaceInformation_printProperties__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(_out));
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void printProperties() {
    ompl_basePINVOKE.SpaceInformation_printProperties__SWIG_1(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public ParamSet params_() {
    ParamSet ret = new ParamSet(ompl_basePINVOKE.SpaceInformation_params___SWIG_0(swigCPtr), false);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void setup() {
    ompl_basePINVOKE.SpaceInformation_setup(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isSetup() {
    bool ret = ompl_basePINVOKE.SpaceInformation_isSetup(swigCPtr);
    if (ompl_basePINVOKE.SWIGPendingException.Pending) throw ompl_basePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
